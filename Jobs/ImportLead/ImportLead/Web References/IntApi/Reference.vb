'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace IntApi
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="IntApiSoap", [Namespace]:="AdvProspectDb")>  _
    Partial Public Class IntApi
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private HelloKittyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsProcessedAlibabaEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessTracepartEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessTracepartsExcelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessGlobalspecEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessGlobalspecExcelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessDirectIndustrySalesInquiryEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessAlibabaEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateResourceContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllModelStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMatchedModelsFromTextOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CalculateEngagementPointOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ImportCuratedActivityFromLetterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ImportLeadFromUnicaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ImportLeadDailyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ImportLeadFromUploadedListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateActivityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSiebelActivityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InferAccountNameByEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecuteACLECAMPJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateUNICAOffer_TestServerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SyncSimpleFormInterestedProductContactToSiebelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBoughtUSBContactListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendELetterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.ImportLead.My.MySettings.Default.ImportLead_IntApi_IntApi
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event HelloKittyCompleted As HelloKittyCompletedEventHandler
        
        '''<remarks/>
        Public Event IsProcessedAlibabaEmailCompleted As IsProcessedAlibabaEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessTracepartEmailCompleted As ProcessTracepartEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessTracepartsExcelCompleted As ProcessTracepartsExcelCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessGlobalspecEmailCompleted As ProcessGlobalspecEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessGlobalspecExcelCompleted As ProcessGlobalspecExcelCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessDirectIndustrySalesInquiryEmailCompleted As ProcessDirectIndustrySalesInquiryEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessAlibabaEmailCompleted As ProcessAlibabaEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateResourceContactCompleted As CreateResourceContactCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllModelStringCompleted As GetAllModelStringCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMatchedModelsFromTextCompleted As GetMatchedModelsFromTextCompletedEventHandler
        
        '''<remarks/>
        Public Event CalculateEngagementPointCompleted As CalculateEngagementPointCompletedEventHandler
        
        '''<remarks/>
        Public Event ImportCuratedActivityFromLetterCompleted As ImportCuratedActivityFromLetterCompletedEventHandler
        
        '''<remarks/>
        Public Event ImportLeadFromUnicaCompleted As ImportLeadFromUnicaCompletedEventHandler
        
        '''<remarks/>
        Public Event ImportLeadDailyCompleted As ImportLeadDailyCompletedEventHandler
        
        '''<remarks/>
        Public Event ImportLeadFromUploadedListCompleted As ImportLeadFromUploadedListCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateContactCompleted As CreateContactCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateActivityCompleted As CreateActivityCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSiebelActivityCompleted As GetSiebelActivityCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateContactCompleted As UpdateContactCompletedEventHandler
        
        '''<remarks/>
        Public Event InferAccountNameByEmailCompleted As InferAccountNameByEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event ExecuteACLECAMPJobCompleted As ExecuteACLECAMPJobCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateUNICAOffer_TestServerCompleted As CreateUNICAOffer_TestServerCompletedEventHandler
        
        '''<remarks/>
        Public Event SyncSimpleFormInterestedProductContactToSiebelCompleted As SyncSimpleFormInterestedProductContactToSiebelCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBoughtUSBContactListCompleted As GetBoughtUSBContactListCompletedEventHandler
        
        '''<remarks/>
        Public Event SendELetterCompleted As SendELetterCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/HelloKitty", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HelloKitty() As String
            Dim results() As Object = Me.Invoke("HelloKitty", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HelloKittyAsync()
            Me.HelloKittyAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HelloKittyAsync(ByVal userState As Object)
            If (Me.HelloKittyOperationCompleted Is Nothing) Then
                Me.HelloKittyOperationCompleted = AddressOf Me.OnHelloKittyOperationCompleted
            End If
            Me.InvokeAsync("HelloKitty", New Object(-1) {}, Me.HelloKittyOperationCompleted, userState)
        End Sub
        
        Private Sub OnHelloKittyOperationCompleted(ByVal arg As Object)
            If (Not (Me.HelloKittyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HelloKittyCompleted(Me, New HelloKittyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/IsProcessedAlibabaEmail", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsProcessedAlibabaEmail(ByVal strEmailID As String) As Boolean
            Dim results() As Object = Me.Invoke("IsProcessedAlibabaEmail", New Object() {strEmailID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsProcessedAlibabaEmailAsync(ByVal strEmailID As String)
            Me.IsProcessedAlibabaEmailAsync(strEmailID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsProcessedAlibabaEmailAsync(ByVal strEmailID As String, ByVal userState As Object)
            If (Me.IsProcessedAlibabaEmailOperationCompleted Is Nothing) Then
                Me.IsProcessedAlibabaEmailOperationCompleted = AddressOf Me.OnIsProcessedAlibabaEmailOperationCompleted
            End If
            Me.InvokeAsync("IsProcessedAlibabaEmail", New Object() {strEmailID}, Me.IsProcessedAlibabaEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsProcessedAlibabaEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsProcessedAlibabaEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsProcessedAlibabaEmailCompleted(Me, New IsProcessedAlibabaEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/ProcessTracepartEmail", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessTracepartEmail(ByVal strTracePartMailBody As String, ByVal strEmailID As String, ByRef ErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("ProcessTracepartEmail", New Object() {strTracePartMailBody, strEmailID, ErrMsg})
            ErrMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessTracepartEmailAsync(ByVal strTracePartMailBody As String, ByVal strEmailID As String, ByVal ErrMsg As String)
            Me.ProcessTracepartEmailAsync(strTracePartMailBody, strEmailID, ErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessTracepartEmailAsync(ByVal strTracePartMailBody As String, ByVal strEmailID As String, ByVal ErrMsg As String, ByVal userState As Object)
            If (Me.ProcessTracepartEmailOperationCompleted Is Nothing) Then
                Me.ProcessTracepartEmailOperationCompleted = AddressOf Me.OnProcessTracepartEmailOperationCompleted
            End If
            Me.InvokeAsync("ProcessTracepartEmail", New Object() {strTracePartMailBody, strEmailID, ErrMsg}, Me.ProcessTracepartEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessTracepartEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessTracepartEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessTracepartEmailCompleted(Me, New ProcessTracepartEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/ProcessTracepartsExcel", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessTracepartsExcel(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal ExcelInBytes() As Byte, ByVal strEmailID As String, ByRef ErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("ProcessTracepartsExcel", New Object() {ExcelInBytes, strEmailID, ErrMsg})
            ErrMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessTracepartsExcelAsync(ByVal ExcelInBytes() As Byte, ByVal strEmailID As String, ByVal ErrMsg As String)
            Me.ProcessTracepartsExcelAsync(ExcelInBytes, strEmailID, ErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessTracepartsExcelAsync(ByVal ExcelInBytes() As Byte, ByVal strEmailID As String, ByVal ErrMsg As String, ByVal userState As Object)
            If (Me.ProcessTracepartsExcelOperationCompleted Is Nothing) Then
                Me.ProcessTracepartsExcelOperationCompleted = AddressOf Me.OnProcessTracepartsExcelOperationCompleted
            End If
            Me.InvokeAsync("ProcessTracepartsExcel", New Object() {ExcelInBytes, strEmailID, ErrMsg}, Me.ProcessTracepartsExcelOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessTracepartsExcelOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessTracepartsExcelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessTracepartsExcelCompleted(Me, New ProcessTracepartsExcelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/ProcessGlobalspecEmail", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessGlobalspecEmail(ByVal strGlobalspecMailBody As String, ByVal strEmailID As String, ByRef ErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("ProcessGlobalspecEmail", New Object() {strGlobalspecMailBody, strEmailID, ErrMsg})
            ErrMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessGlobalspecEmailAsync(ByVal strGlobalspecMailBody As String, ByVal strEmailID As String, ByVal ErrMsg As String)
            Me.ProcessGlobalspecEmailAsync(strGlobalspecMailBody, strEmailID, ErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessGlobalspecEmailAsync(ByVal strGlobalspecMailBody As String, ByVal strEmailID As String, ByVal ErrMsg As String, ByVal userState As Object)
            If (Me.ProcessGlobalspecEmailOperationCompleted Is Nothing) Then
                Me.ProcessGlobalspecEmailOperationCompleted = AddressOf Me.OnProcessGlobalspecEmailOperationCompleted
            End If
            Me.InvokeAsync("ProcessGlobalspecEmail", New Object() {strGlobalspecMailBody, strEmailID, ErrMsg}, Me.ProcessGlobalspecEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessGlobalspecEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessGlobalspecEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessGlobalspecEmailCompleted(Me, New ProcessGlobalspecEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/ProcessGlobalspecExcel", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessGlobalspecExcel(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal ExcelInBytes() As Byte, ByVal strEmailID As String, ByRef ErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("ProcessGlobalspecExcel", New Object() {ExcelInBytes, strEmailID, ErrMsg})
            ErrMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessGlobalspecExcelAsync(ByVal ExcelInBytes() As Byte, ByVal strEmailID As String, ByVal ErrMsg As String)
            Me.ProcessGlobalspecExcelAsync(ExcelInBytes, strEmailID, ErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessGlobalspecExcelAsync(ByVal ExcelInBytes() As Byte, ByVal strEmailID As String, ByVal ErrMsg As String, ByVal userState As Object)
            If (Me.ProcessGlobalspecExcelOperationCompleted Is Nothing) Then
                Me.ProcessGlobalspecExcelOperationCompleted = AddressOf Me.OnProcessGlobalspecExcelOperationCompleted
            End If
            Me.InvokeAsync("ProcessGlobalspecExcel", New Object() {ExcelInBytes, strEmailID, ErrMsg}, Me.ProcessGlobalspecExcelOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessGlobalspecExcelOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessGlobalspecExcelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessGlobalspecExcelCompleted(Me, New ProcessGlobalspecExcelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/ProcessDirectIndustrySalesInquiryEmail", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessDirectIndustrySalesInquiryEmail(ByVal strTracePartMailBody As String, ByVal strEmailID As String, ByRef ErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("ProcessDirectIndustrySalesInquiryEmail", New Object() {strTracePartMailBody, strEmailID, ErrMsg})
            ErrMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessDirectIndustrySalesInquiryEmailAsync(ByVal strTracePartMailBody As String, ByVal strEmailID As String, ByVal ErrMsg As String)
            Me.ProcessDirectIndustrySalesInquiryEmailAsync(strTracePartMailBody, strEmailID, ErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessDirectIndustrySalesInquiryEmailAsync(ByVal strTracePartMailBody As String, ByVal strEmailID As String, ByVal ErrMsg As String, ByVal userState As Object)
            If (Me.ProcessDirectIndustrySalesInquiryEmailOperationCompleted Is Nothing) Then
                Me.ProcessDirectIndustrySalesInquiryEmailOperationCompleted = AddressOf Me.OnProcessDirectIndustrySalesInquiryEmailOperationCompleted
            End If
            Me.InvokeAsync("ProcessDirectIndustrySalesInquiryEmail", New Object() {strTracePartMailBody, strEmailID, ErrMsg}, Me.ProcessDirectIndustrySalesInquiryEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessDirectIndustrySalesInquiryEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessDirectIndustrySalesInquiryEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessDirectIndustrySalesInquiryEmailCompleted(Me, New ProcessDirectIndustrySalesInquiryEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/ProcessAlibabaEmail", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessAlibabaEmail(ByVal strAlibaMail As String, ByVal strEmailID As String) As Boolean
            Dim results() As Object = Me.Invoke("ProcessAlibabaEmail", New Object() {strAlibaMail, strEmailID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessAlibabaEmailAsync(ByVal strAlibaMail As String, ByVal strEmailID As String)
            Me.ProcessAlibabaEmailAsync(strAlibaMail, strEmailID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessAlibabaEmailAsync(ByVal strAlibaMail As String, ByVal strEmailID As String, ByVal userState As Object)
            If (Me.ProcessAlibabaEmailOperationCompleted Is Nothing) Then
                Me.ProcessAlibabaEmailOperationCompleted = AddressOf Me.OnProcessAlibabaEmailOperationCompleted
            End If
            Me.InvokeAsync("ProcessAlibabaEmail", New Object() {strAlibaMail, strEmailID}, Me.ProcessAlibabaEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessAlibabaEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessAlibabaEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessAlibabaEmailCompleted(Me, New ProcessAlibabaEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/CreateResourceContact", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CreateResourceContact(ByVal RowId As String)
            Me.Invoke("CreateResourceContact", New Object() {RowId})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateResourceContactAsync(ByVal RowId As String)
            Me.CreateResourceContactAsync(RowId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateResourceContactAsync(ByVal RowId As String, ByVal userState As Object)
            If (Me.CreateResourceContactOperationCompleted Is Nothing) Then
                Me.CreateResourceContactOperationCompleted = AddressOf Me.OnCreateResourceContactOperationCompleted
            End If
            Me.InvokeAsync("CreateResourceContact", New Object() {RowId}, Me.CreateResourceContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateResourceContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateResourceContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateResourceContactCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/GetAllModelString", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllModelString() As String
            Dim results() As Object = Me.Invoke("GetAllModelString", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllModelStringAsync()
            Me.GetAllModelStringAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllModelStringAsync(ByVal userState As Object)
            If (Me.GetAllModelStringOperationCompleted Is Nothing) Then
                Me.GetAllModelStringOperationCompleted = AddressOf Me.OnGetAllModelStringOperationCompleted
            End If
            Me.InvokeAsync("GetAllModelString", New Object(-1) {}, Me.GetAllModelStringOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllModelStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllModelStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllModelStringCompleted(Me, New GetAllModelStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/GetMatchedModelsFromText", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMatchedModelsFromText(ByVal strText As String, ByVal strModels As String) As String()
            Dim results() As Object = Me.Invoke("GetMatchedModelsFromText", New Object() {strText, strModels})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMatchedModelsFromTextAsync(ByVal strText As String, ByVal strModels As String)
            Me.GetMatchedModelsFromTextAsync(strText, strModels, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMatchedModelsFromTextAsync(ByVal strText As String, ByVal strModels As String, ByVal userState As Object)
            If (Me.GetMatchedModelsFromTextOperationCompleted Is Nothing) Then
                Me.GetMatchedModelsFromTextOperationCompleted = AddressOf Me.OnGetMatchedModelsFromTextOperationCompleted
            End If
            Me.InvokeAsync("GetMatchedModelsFromText", New Object() {strText, strModels}, Me.GetMatchedModelsFromTextOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMatchedModelsFromTextOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMatchedModelsFromTextCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMatchedModelsFromTextCompleted(Me, New GetMatchedModelsFromTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/CalculateEngagementPoint", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CalculateEngagementPoint(ByVal email As String, ByVal From_CreateDate As String, ByVal To_CreateDate As String, ByVal IncludeOptyFiltration As Boolean, ByVal IncludeEStoreOrderFiltration As Boolean) As Integer
            Dim results() As Object = Me.Invoke("CalculateEngagementPoint", New Object() {email, From_CreateDate, To_CreateDate, IncludeOptyFiltration, IncludeEStoreOrderFiltration})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CalculateEngagementPointAsync(ByVal email As String, ByVal From_CreateDate As String, ByVal To_CreateDate As String, ByVal IncludeOptyFiltration As Boolean, ByVal IncludeEStoreOrderFiltration As Boolean)
            Me.CalculateEngagementPointAsync(email, From_CreateDate, To_CreateDate, IncludeOptyFiltration, IncludeEStoreOrderFiltration, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CalculateEngagementPointAsync(ByVal email As String, ByVal From_CreateDate As String, ByVal To_CreateDate As String, ByVal IncludeOptyFiltration As Boolean, ByVal IncludeEStoreOrderFiltration As Boolean, ByVal userState As Object)
            If (Me.CalculateEngagementPointOperationCompleted Is Nothing) Then
                Me.CalculateEngagementPointOperationCompleted = AddressOf Me.OnCalculateEngagementPointOperationCompleted
            End If
            Me.InvokeAsync("CalculateEngagementPoint", New Object() {email, From_CreateDate, To_CreateDate, IncludeOptyFiltration, IncludeEStoreOrderFiltration}, Me.CalculateEngagementPointOperationCompleted, userState)
        End Sub
        
        Private Sub OnCalculateEngagementPointOperationCompleted(ByVal arg As Object)
            If (Not (Me.CalculateEngagementPointCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CalculateEngagementPointCompleted(Me, New CalculateEngagementPointCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/ImportCuratedActivityFromLetter", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ImportCuratedActivityFromLetter(ByVal LetterId As String, ByVal ActionType As String, ByVal Email As String, ByVal URL As String, ByVal WebUserType As WebUserTypeEnum, ByVal ActivityType As ActivityType, ByVal InterestedProduct() As ProductLevelAndValue, ByVal SiebelSourceId As String, ByRef ErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("ImportCuratedActivityFromLetter", New Object() {LetterId, ActionType, Email, URL, WebUserType, ActivityType, InterestedProduct, SiebelSourceId, ErrMsg})
            ErrMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ImportCuratedActivityFromLetterAsync(ByVal LetterId As String, ByVal ActionType As String, ByVal Email As String, ByVal URL As String, ByVal WebUserType As WebUserTypeEnum, ByVal ActivityType As ActivityType, ByVal InterestedProduct() As ProductLevelAndValue, ByVal SiebelSourceId As String, ByVal ErrMsg As String)
            Me.ImportCuratedActivityFromLetterAsync(LetterId, ActionType, Email, URL, WebUserType, ActivityType, InterestedProduct, SiebelSourceId, ErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ImportCuratedActivityFromLetterAsync(ByVal LetterId As String, ByVal ActionType As String, ByVal Email As String, ByVal URL As String, ByVal WebUserType As WebUserTypeEnum, ByVal ActivityType As ActivityType, ByVal InterestedProduct() As ProductLevelAndValue, ByVal SiebelSourceId As String, ByVal ErrMsg As String, ByVal userState As Object)
            If (Me.ImportCuratedActivityFromLetterOperationCompleted Is Nothing) Then
                Me.ImportCuratedActivityFromLetterOperationCompleted = AddressOf Me.OnImportCuratedActivityFromLetterOperationCompleted
            End If
            Me.InvokeAsync("ImportCuratedActivityFromLetter", New Object() {LetterId, ActionType, Email, URL, WebUserType, ActivityType, InterestedProduct, SiebelSourceId, ErrMsg}, Me.ImportCuratedActivityFromLetterOperationCompleted, userState)
        End Sub
        
        Private Sub OnImportCuratedActivityFromLetterOperationCompleted(ByVal arg As Object)
            If (Not (Me.ImportCuratedActivityFromLetterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ImportCuratedActivityFromLetterCompleted(Me, New ImportCuratedActivityFromLetterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/ImportLeadFromUnica", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ImportLeadFromUnica(ByVal Email As String, ByVal From_CreateDate As String, ByVal To_CreateDate As String, ByVal IncludeOptyFiltration As Boolean, ByVal IncludeEStoreOrderFiltration As Boolean, ByVal TrackAllStage As Boolean, ByRef ErrMsg As String, ByVal Quality As LeadQuality, ByVal SingleAct As Boolean, ByVal SourceId As String, ByVal LeadDesc As String, ByVal ContactId As String) As String
            Dim results() As Object = Me.Invoke("ImportLeadFromUnica", New Object() {Email, From_CreateDate, To_CreateDate, IncludeOptyFiltration, IncludeEStoreOrderFiltration, TrackAllStage, ErrMsg, Quality, SingleAct, SourceId, LeadDesc, ContactId})
            ErrMsg = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ImportLeadFromUnicaAsync(ByVal Email As String, ByVal From_CreateDate As String, ByVal To_CreateDate As String, ByVal IncludeOptyFiltration As Boolean, ByVal IncludeEStoreOrderFiltration As Boolean, ByVal TrackAllStage As Boolean, ByVal ErrMsg As String, ByVal Quality As LeadQuality, ByVal SingleAct As Boolean, ByVal SourceId As String, ByVal LeadDesc As String, ByVal ContactId As String)
            Me.ImportLeadFromUnicaAsync(Email, From_CreateDate, To_CreateDate, IncludeOptyFiltration, IncludeEStoreOrderFiltration, TrackAllStage, ErrMsg, Quality, SingleAct, SourceId, LeadDesc, ContactId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ImportLeadFromUnicaAsync(ByVal Email As String, ByVal From_CreateDate As String, ByVal To_CreateDate As String, ByVal IncludeOptyFiltration As Boolean, ByVal IncludeEStoreOrderFiltration As Boolean, ByVal TrackAllStage As Boolean, ByVal ErrMsg As String, ByVal Quality As LeadQuality, ByVal SingleAct As Boolean, ByVal SourceId As String, ByVal LeadDesc As String, ByVal ContactId As String, ByVal userState As Object)
            If (Me.ImportLeadFromUnicaOperationCompleted Is Nothing) Then
                Me.ImportLeadFromUnicaOperationCompleted = AddressOf Me.OnImportLeadFromUnicaOperationCompleted
            End If
            Me.InvokeAsync("ImportLeadFromUnica", New Object() {Email, From_CreateDate, To_CreateDate, IncludeOptyFiltration, IncludeEStoreOrderFiltration, TrackAllStage, ErrMsg, Quality, SingleAct, SourceId, LeadDesc, ContactId}, Me.ImportLeadFromUnicaOperationCompleted, userState)
        End Sub
        
        Private Sub OnImportLeadFromUnicaOperationCompleted(ByVal arg As Object)
            If (Not (Me.ImportLeadFromUnicaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ImportLeadFromUnicaCompleted(Me, New ImportLeadFromUnicaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/ImportLeadDaily", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ImportLeadDaily(ByVal Email As String, ByVal From_CreateDate As String, ByVal To_CreateDate As String, ByVal IncludeOptyFiltration As Boolean, ByVal IncludeEStoreOrderFiltration As Boolean, ByVal TrackAllStage As Boolean, ByRef ErrMsg As String, ByVal Quality As LeadQuality, ByVal SingleAct As Boolean, ByVal SourceId As String) As String
            Dim results() As Object = Me.Invoke("ImportLeadDaily", New Object() {Email, From_CreateDate, To_CreateDate, IncludeOptyFiltration, IncludeEStoreOrderFiltration, TrackAllStage, ErrMsg, Quality, SingleAct, SourceId})
            ErrMsg = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ImportLeadDailyAsync(ByVal Email As String, ByVal From_CreateDate As String, ByVal To_CreateDate As String, ByVal IncludeOptyFiltration As Boolean, ByVal IncludeEStoreOrderFiltration As Boolean, ByVal TrackAllStage As Boolean, ByVal ErrMsg As String, ByVal Quality As LeadQuality, ByVal SingleAct As Boolean, ByVal SourceId As String)
            Me.ImportLeadDailyAsync(Email, From_CreateDate, To_CreateDate, IncludeOptyFiltration, IncludeEStoreOrderFiltration, TrackAllStage, ErrMsg, Quality, SingleAct, SourceId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ImportLeadDailyAsync(ByVal Email As String, ByVal From_CreateDate As String, ByVal To_CreateDate As String, ByVal IncludeOptyFiltration As Boolean, ByVal IncludeEStoreOrderFiltration As Boolean, ByVal TrackAllStage As Boolean, ByVal ErrMsg As String, ByVal Quality As LeadQuality, ByVal SingleAct As Boolean, ByVal SourceId As String, ByVal userState As Object)
            If (Me.ImportLeadDailyOperationCompleted Is Nothing) Then
                Me.ImportLeadDailyOperationCompleted = AddressOf Me.OnImportLeadDailyOperationCompleted
            End If
            Me.InvokeAsync("ImportLeadDaily", New Object() {Email, From_CreateDate, To_CreateDate, IncludeOptyFiltration, IncludeEStoreOrderFiltration, TrackAllStage, ErrMsg, Quality, SingleAct, SourceId}, Me.ImportLeadDailyOperationCompleted, userState)
        End Sub
        
        Private Sub OnImportLeadDailyOperationCompleted(ByVal arg As Object)
            If (Not (Me.ImportLeadDailyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ImportLeadDailyCompleted(Me, New ImportLeadDailyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/ImportLeadFromUploadedList", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ImportLeadFromUploadedList(ByVal ListId As String, ByVal From_CreateDate As String, ByVal To_CreateDate As String, ByVal IncludeOptyFiltration As Boolean, ByVal IncludeEStoreOrderFiltration As Boolean, ByVal TrackAllStage As Boolean, ByRef ErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("ImportLeadFromUploadedList", New Object() {ListId, From_CreateDate, To_CreateDate, IncludeOptyFiltration, IncludeEStoreOrderFiltration, TrackAllStage, ErrMsg})
            ErrMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ImportLeadFromUploadedListAsync(ByVal ListId As String, ByVal From_CreateDate As String, ByVal To_CreateDate As String, ByVal IncludeOptyFiltration As Boolean, ByVal IncludeEStoreOrderFiltration As Boolean, ByVal TrackAllStage As Boolean, ByVal ErrMsg As String)
            Me.ImportLeadFromUploadedListAsync(ListId, From_CreateDate, To_CreateDate, IncludeOptyFiltration, IncludeEStoreOrderFiltration, TrackAllStage, ErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ImportLeadFromUploadedListAsync(ByVal ListId As String, ByVal From_CreateDate As String, ByVal To_CreateDate As String, ByVal IncludeOptyFiltration As Boolean, ByVal IncludeEStoreOrderFiltration As Boolean, ByVal TrackAllStage As Boolean, ByVal ErrMsg As String, ByVal userState As Object)
            If (Me.ImportLeadFromUploadedListOperationCompleted Is Nothing) Then
                Me.ImportLeadFromUploadedListOperationCompleted = AddressOf Me.OnImportLeadFromUploadedListOperationCompleted
            End If
            Me.InvokeAsync("ImportLeadFromUploadedList", New Object() {ListId, From_CreateDate, To_CreateDate, IncludeOptyFiltration, IncludeEStoreOrderFiltration, TrackAllStage, ErrMsg}, Me.ImportLeadFromUploadedListOperationCompleted, userState)
        End Sub
        
        Private Sub OnImportLeadFromUploadedListOperationCompleted(ByVal arg As Object)
            If (Not (Me.ImportLeadFromUploadedListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ImportLeadFromUploadedListCompleted(Me, New ImportLeadFromUploadedListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/CreateContact", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateContact( _
                    ByVal Email As String,  _
                    ByVal AccountId As String,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal JobTitle As String,  _
                    ByVal JobFunction As String,  _
                    ByVal ContactDept As String,  _
                    ByVal WorkPhone As String,  _
                    ByVal WorkFax As String,  _
                    ByVal OwnerEmail As String,  _
                    ByVal RBU As String,  _
                    ByVal SrcName As String,  _
                    ByVal WebUserType As String,  _
                    ByVal Comments As String,  _
                    ByVal BAA() As String,  _
                    ByVal IntProd() As String,  _
                    ByRef strErrMsg As String,  _
                    ByVal User As String) As String
            Dim results() As Object = Me.Invoke("CreateContact", New Object() {Email, AccountId, FirstName, LastName, JobTitle, JobFunction, ContactDept, WorkPhone, WorkFax, OwnerEmail, RBU, SrcName, WebUserType, Comments, BAA, IntProd, strErrMsg, User})
            strErrMsg = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateContactAsync( _
                    ByVal Email As String,  _
                    ByVal AccountId As String,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal JobTitle As String,  _
                    ByVal JobFunction As String,  _
                    ByVal ContactDept As String,  _
                    ByVal WorkPhone As String,  _
                    ByVal WorkFax As String,  _
                    ByVal OwnerEmail As String,  _
                    ByVal RBU As String,  _
                    ByVal SrcName As String,  _
                    ByVal WebUserType As String,  _
                    ByVal Comments As String,  _
                    ByVal BAA() As String,  _
                    ByVal IntProd() As String,  _
                    ByVal strErrMsg As String,  _
                    ByVal User As String)
            Me.CreateContactAsync(Email, AccountId, FirstName, LastName, JobTitle, JobFunction, ContactDept, WorkPhone, WorkFax, OwnerEmail, RBU, SrcName, WebUserType, Comments, BAA, IntProd, strErrMsg, User, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateContactAsync( _
                    ByVal Email As String,  _
                    ByVal AccountId As String,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal JobTitle As String,  _
                    ByVal JobFunction As String,  _
                    ByVal ContactDept As String,  _
                    ByVal WorkPhone As String,  _
                    ByVal WorkFax As String,  _
                    ByVal OwnerEmail As String,  _
                    ByVal RBU As String,  _
                    ByVal SrcName As String,  _
                    ByVal WebUserType As String,  _
                    ByVal Comments As String,  _
                    ByVal BAA() As String,  _
                    ByVal IntProd() As String,  _
                    ByVal strErrMsg As String,  _
                    ByVal User As String,  _
                    ByVal userState As Object)
            If (Me.CreateContactOperationCompleted Is Nothing) Then
                Me.CreateContactOperationCompleted = AddressOf Me.OnCreateContactOperationCompleted
            End If
            Me.InvokeAsync("CreateContact", New Object() {Email, AccountId, FirstName, LastName, JobTitle, JobFunction, ContactDept, WorkPhone, WorkFax, OwnerEmail, RBU, SrcName, WebUserType, Comments, BAA, IntProd, strErrMsg, User}, Me.CreateContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateContactCompleted(Me, New CreateContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/CreateActivity", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateActivity(ByVal ActType As String, ByVal ActDesc As String, ByVal ActComment As String, ByVal AccountId As String, ByVal ContactId As String, ByVal SourceId As String, ByVal RBU As String, ByVal OwnerEmail As String, ByVal ActStatus As ActivityStatus, ByRef strErrMsg As String) As String
            Dim results() As Object = Me.Invoke("CreateActivity", New Object() {ActType, ActDesc, ActComment, AccountId, ContactId, SourceId, RBU, OwnerEmail, ActStatus, strErrMsg})
            strErrMsg = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateActivityAsync(ByVal ActType As String, ByVal ActDesc As String, ByVal ActComment As String, ByVal AccountId As String, ByVal ContactId As String, ByVal SourceId As String, ByVal RBU As String, ByVal OwnerEmail As String, ByVal ActStatus As ActivityStatus, ByVal strErrMsg As String)
            Me.CreateActivityAsync(ActType, ActDesc, ActComment, AccountId, ContactId, SourceId, RBU, OwnerEmail, ActStatus, strErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateActivityAsync(ByVal ActType As String, ByVal ActDesc As String, ByVal ActComment As String, ByVal AccountId As String, ByVal ContactId As String, ByVal SourceId As String, ByVal RBU As String, ByVal OwnerEmail As String, ByVal ActStatus As ActivityStatus, ByVal strErrMsg As String, ByVal userState As Object)
            If (Me.CreateActivityOperationCompleted Is Nothing) Then
                Me.CreateActivityOperationCompleted = AddressOf Me.OnCreateActivityOperationCompleted
            End If
            Me.InvokeAsync("CreateActivity", New Object() {ActType, ActDesc, ActComment, AccountId, ContactId, SourceId, RBU, OwnerEmail, ActStatus, strErrMsg}, Me.CreateActivityOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateActivityOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateActivityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateActivityCompleted(Me, New CreateActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/GetSiebelActivity", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSiebelActivity(ByVal RowId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSiebelActivity", New Object() {RowId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSiebelActivityAsync(ByVal RowId As String)
            Me.GetSiebelActivityAsync(RowId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSiebelActivityAsync(ByVal RowId As String, ByVal userState As Object)
            If (Me.GetSiebelActivityOperationCompleted Is Nothing) Then
                Me.GetSiebelActivityOperationCompleted = AddressOf Me.OnGetSiebelActivityOperationCompleted
            End If
            Me.InvokeAsync("GetSiebelActivity", New Object() {RowId}, Me.GetSiebelActivityOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSiebelActivityOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSiebelActivityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSiebelActivityCompleted(Me, New GetSiebelActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/UpdateContact", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateContact(ByVal RowId As String, ByVal Email As String, ByVal AccountId As String, ByVal FirstName As String, ByVal LastName As String, ByVal JobTitle As String, ByVal WorkPhone As String, ByVal WorkFax As String, ByVal OwnerEmail As String, ByVal RBU As String, ByVal BAA() As String, ByVal IntProd() As String, ByRef ErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateContact", New Object() {RowId, Email, AccountId, FirstName, LastName, JobTitle, WorkPhone, WorkFax, OwnerEmail, RBU, BAA, IntProd, ErrMsg})
            ErrMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateContactAsync(ByVal RowId As String, ByVal Email As String, ByVal AccountId As String, ByVal FirstName As String, ByVal LastName As String, ByVal JobTitle As String, ByVal WorkPhone As String, ByVal WorkFax As String, ByVal OwnerEmail As String, ByVal RBU As String, ByVal BAA() As String, ByVal IntProd() As String, ByVal ErrMsg As String)
            Me.UpdateContactAsync(RowId, Email, AccountId, FirstName, LastName, JobTitle, WorkPhone, WorkFax, OwnerEmail, RBU, BAA, IntProd, ErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateContactAsync(ByVal RowId As String, ByVal Email As String, ByVal AccountId As String, ByVal FirstName As String, ByVal LastName As String, ByVal JobTitle As String, ByVal WorkPhone As String, ByVal WorkFax As String, ByVal OwnerEmail As String, ByVal RBU As String, ByVal BAA() As String, ByVal IntProd() As String, ByVal ErrMsg As String, ByVal userState As Object)
            If (Me.UpdateContactOperationCompleted Is Nothing) Then
                Me.UpdateContactOperationCompleted = AddressOf Me.OnUpdateContactOperationCompleted
            End If
            Me.InvokeAsync("UpdateContact", New Object() {RowId, Email, AccountId, FirstName, LastName, JobTitle, WorkPhone, WorkFax, OwnerEmail, RBU, BAA, IntProd, ErrMsg}, Me.UpdateContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateContactCompleted(Me, New UpdateContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/InferAccountNameByEmail", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InferAccountNameByEmail(ByVal strEmail As String, ByRef strAccountName As String, ByRef strAccountCorpURL As String) As Boolean
            Dim results() As Object = Me.Invoke("InferAccountNameByEmail", New Object() {strEmail, strAccountName, strAccountCorpURL})
            strAccountName = CType(results(1),String)
            strAccountCorpURL = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InferAccountNameByEmailAsync(ByVal strEmail As String, ByVal strAccountName As String, ByVal strAccountCorpURL As String)
            Me.InferAccountNameByEmailAsync(strEmail, strAccountName, strAccountCorpURL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InferAccountNameByEmailAsync(ByVal strEmail As String, ByVal strAccountName As String, ByVal strAccountCorpURL As String, ByVal userState As Object)
            If (Me.InferAccountNameByEmailOperationCompleted Is Nothing) Then
                Me.InferAccountNameByEmailOperationCompleted = AddressOf Me.OnInferAccountNameByEmailOperationCompleted
            End If
            Me.InvokeAsync("InferAccountNameByEmail", New Object() {strEmail, strAccountName, strAccountCorpURL}, Me.InferAccountNameByEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnInferAccountNameByEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.InferAccountNameByEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InferAccountNameByEmailCompleted(Me, New InferAccountNameByEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/ExecuteACLECAMPJob", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ExecuteACLECAMPJob(ByVal JobName As String)
            Me.Invoke("ExecuteACLECAMPJob", New Object() {JobName})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteACLECAMPJobAsync(ByVal JobName As String)
            Me.ExecuteACLECAMPJobAsync(JobName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteACLECAMPJobAsync(ByVal JobName As String, ByVal userState As Object)
            If (Me.ExecuteACLECAMPJobOperationCompleted Is Nothing) Then
                Me.ExecuteACLECAMPJobOperationCompleted = AddressOf Me.OnExecuteACLECAMPJobOperationCompleted
            End If
            Me.InvokeAsync("ExecuteACLECAMPJob", New Object() {JobName}, Me.ExecuteACLECAMPJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteACLECAMPJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteACLECAMPJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteACLECAMPJobCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/CreateUNICAOffer_TestServer", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateUNICAOffer_TestServer(ByVal OfferId As String, ByVal OfferName As String, ByVal OfferDesc As String) As Boolean
            Dim results() As Object = Me.Invoke("CreateUNICAOffer_TestServer", New Object() {OfferId, OfferName, OfferDesc})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateUNICAOffer_TestServerAsync(ByVal OfferId As String, ByVal OfferName As String, ByVal OfferDesc As String)
            Me.CreateUNICAOffer_TestServerAsync(OfferId, OfferName, OfferDesc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateUNICAOffer_TestServerAsync(ByVal OfferId As String, ByVal OfferName As String, ByVal OfferDesc As String, ByVal userState As Object)
            If (Me.CreateUNICAOffer_TestServerOperationCompleted Is Nothing) Then
                Me.CreateUNICAOffer_TestServerOperationCompleted = AddressOf Me.OnCreateUNICAOffer_TestServerOperationCompleted
            End If
            Me.InvokeAsync("CreateUNICAOffer_TestServer", New Object() {OfferId, OfferName, OfferDesc}, Me.CreateUNICAOffer_TestServerOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateUNICAOffer_TestServerOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateUNICAOffer_TestServerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateUNICAOffer_TestServerCompleted(Me, New CreateUNICAOffer_TestServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/SyncSimpleFormInterestedProductContactToSiebel", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SyncSimpleFormInterestedProductContactToSiebel() As Boolean
            Dim results() As Object = Me.Invoke("SyncSimpleFormInterestedProductContactToSiebel", New Object(-1) {})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SyncSimpleFormInterestedProductContactToSiebelAsync()
            Me.SyncSimpleFormInterestedProductContactToSiebelAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SyncSimpleFormInterestedProductContactToSiebelAsync(ByVal userState As Object)
            If (Me.SyncSimpleFormInterestedProductContactToSiebelOperationCompleted Is Nothing) Then
                Me.SyncSimpleFormInterestedProductContactToSiebelOperationCompleted = AddressOf Me.OnSyncSimpleFormInterestedProductContactToSiebelOperationCompleted
            End If
            Me.InvokeAsync("SyncSimpleFormInterestedProductContactToSiebel", New Object(-1) {}, Me.SyncSimpleFormInterestedProductContactToSiebelOperationCompleted, userState)
        End Sub
        
        Private Sub OnSyncSimpleFormInterestedProductContactToSiebelOperationCompleted(ByVal arg As Object)
            If (Not (Me.SyncSimpleFormInterestedProductContactToSiebelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SyncSimpleFormInterestedProductContactToSiebelCompleted(Me, New SyncSimpleFormInterestedProductContactToSiebelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/GetBoughtUSBContactList", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBoughtUSBContactList() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetBoughtUSBContactList", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBoughtUSBContactListAsync()
            Me.GetBoughtUSBContactListAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBoughtUSBContactListAsync(ByVal userState As Object)
            If (Me.GetBoughtUSBContactListOperationCompleted Is Nothing) Then
                Me.GetBoughtUSBContactListOperationCompleted = AddressOf Me.OnGetBoughtUSBContactListOperationCompleted
            End If
            Me.InvokeAsync("GetBoughtUSBContactList", New Object(-1) {}, Me.GetBoughtUSBContactListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBoughtUSBContactListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBoughtUSBContactListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBoughtUSBContactListCompleted(Me, New GetBoughtUSBContactListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/SendELetter", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendELetter(ByVal CampId As String, ByRef ErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("SendELetter", New Object() {CampId, ErrMsg})
            ErrMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendELetterAsync(ByVal CampId As String, ByVal ErrMsg As String)
            Me.SendELetterAsync(CampId, ErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendELetterAsync(ByVal CampId As String, ByVal ErrMsg As String, ByVal userState As Object)
            If (Me.SendELetterOperationCompleted Is Nothing) Then
                Me.SendELetterOperationCompleted = AddressOf Me.OnSendELetterOperationCompleted
            End If
            Me.InvokeAsync("SendELetter", New Object() {CampId, ErrMsg}, Me.SendELetterOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendELetterOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendELetterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendELetterCompleted(Me, New SendELetterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="AdvProspectDb")>  _
    Public Enum WebUserTypeEnum
        
        '''<remarks/>
        Alibaba
        
        '''<remarks/>
        DirectIndustry_ClickThrough
        
        '''<remarks/>
        DirectIndustry_SalesRequest
        
        '''<remarks/>
        GlobalSpec
        
        '''<remarks/>
        TracePart
        
        '''<remarks/>
        OtherExtSource
        
        '''<remarks/>
        ON24
        
        '''<remarks/>
        ASF
        
        '''<remarks/>
        ADF
        
        '''<remarks/>
        Support
        
        '''<remarks/>
        RMA
        
        '''<remarks/>
        SUSI_Access
        
        '''<remarks/>
        Web_Access
        
        '''<remarks/>
        Adam_Forum
        
        '''<remarks/>
        iPlanet_Forum
        
        '''<remarks/>
        Corporate_Website
        
        '''<remarks/>
        Sector_Portal
        
        '''<remarks/>
        eStore
        
        '''<remarks/>
        MyAdvantech
        
        '''<remarks/>
        eDM
        
        '''<remarks/>
        AOnlineSalesPortal
        
        '''<remarks/>
        Resource
        
        '''<remarks/>
        Siebel
        
        '''<remarks/>
        iPROS
        
        '''<remarks/>
        eGrabber
        
        '''<remarks/>
        Innocore
        
        '''<remarks/>
        Dlog
        
        '''<remarks/>
        iServicesBlog
        
        '''<remarks/>
        SolutionDay
        
        '''<remarks/>
        AGS
        
        '''<remarks/>
        ITMedia
        
        '''<remarks/>
        Gongye360
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="AdvProspectDb")>  _
    Public Enum ActivityType
        
        '''<remarks/>
        Abandoned_Live_Chat
        
        '''<remarks/>
        Abort_Check_Out
        
        '''<remarks/>
        Add_To_Cart
        
        '''<remarks/>
        Browse_CMS
        
        '''<remarks/>
        Browse_ContactPage
        
        '''<remarks/>
        Browse_General_Info
        
        '''<remarks/>
        Browse_ProductPage
        
        '''<remarks/>
        Browse_ProductPage_From_Sales_Inquiries
        
        '''<remarks/>
        Build_System
        
        '''<remarks/>
        Buy_List
        
        '''<remarks/>
        Call_Inbound
        
        '''<remarks/>
        Click_Forward_To_Friends
        
        '''<remarks/>
        Click_Live_Chat
        
        '''<remarks/>
        Click_To_SNS
        
        '''<remarks/>
        Compare_Product
        
        '''<remarks/>
        Download_3DModel
        
        '''<remarks/>
        Download_MarketingFile
        
        '''<remarks/>
        Download_SR
        
        '''<remarks/>
        Download_TechFile
        
        '''<remarks/>
        eDM_Open
        
        '''<remarks/>
        eDM_Click
        
        '''<remarks/>
        eStore_Customize_Function
        
        '''<remarks/>
        Email_Inbound
        
        '''<remarks/>
        Exhibition_Participant
        
        '''<remarks/>
        Get_Quote
        
        '''<remarks/>
        Giveaway
        
        '''<remarks/>
        Hoovers_List
        
        '''<remarks/>
        Live_Chat
        
        '''<remarks/>
        Media_PR
        
        '''<remarks/>
        Purchase
        
        '''<remarks/>
        Register_Product
        
        '''<remarks/>
        Registration
        
        '''<remarks/>
        Registration_Without_Pwd
        
        '''<remarks/>
        Request_Qty_Discount
        
        '''<remarks/>
        Sales_Inquiry
        
        '''<remarks/>
        Search_Product
        
        '''<remarks/>
        Share_To_SNS
        
        '''<remarks/>
        Send_SR
        
        '''<remarks/>
        SolutionDay_Forum_Seminar
        
        '''<remarks/>
        Subscribe_ENews
        
        '''<remarks/>
        Training
        
        '''<remarks/>
        Update_User_Profile
        
        '''<remarks/>
        Uploaded_List
        
        '''<remarks/>
        OnlineForum_Watch_Video
        
        '''<remarks/>
        OnlineForum_Visit_Booth
        
        '''<remarks/>
        OnlineForum_Vew_Document
        
        '''<remarks/>
        OnlineForum_Stay_Over_90_Minutes
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="AdvProspectDb")>  _
    Partial Public Class ProductLevelAndValue
        
        Private productLevelField As ProductLevelEnum
        
        Private productValueField As String
        
        '''<remarks/>
        Public Property ProductLevel() As ProductLevelEnum
            Get
                Return Me.productLevelField
            End Get
            Set
                Me.productLevelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProductValue() As String
            Get
                Return Me.productValueField
            End Get
            Set
                Me.productValueField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="AdvProspectDb")>  _
    Public Enum ProductLevelEnum
        
        '''<remarks/>
        ProductGroup
        
        '''<remarks/>
        InterestedProduct
        
        '''<remarks/>
        SubCategory
        
        '''<remarks/>
        ModelNo
        
        '''<remarks/>
        PartNo
        
        '''<remarks/>
        SerialNo
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="AdvProspectDb")>  _
    Public Enum LeadQuality
        
        '''<remarks/>
        Hot
        
        '''<remarks/>
        Warm
        
        '''<remarks/>
        Cool
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="AdvProspectDb")>  _
    Public Enum ActivityStatus
        
        '''<remarks/>
        Not_Started
        
        '''<remarks/>
        In_Progress
        
        '''<remarks/>
        Approved
        
        '''<remarks/>
        Cancelled
        
        '''<remarks/>
        Done
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub HelloKittyCompletedEventHandler(ByVal sender As Object, ByVal e As HelloKittyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HelloKittyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub IsProcessedAlibabaEmailCompletedEventHandler(ByVal sender As Object, ByVal e As IsProcessedAlibabaEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsProcessedAlibabaEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ProcessTracepartEmailCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessTracepartEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessTracepartEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ProcessTracepartsExcelCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessTracepartsExcelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessTracepartsExcelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ProcessGlobalspecEmailCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessGlobalspecEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessGlobalspecEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ProcessGlobalspecExcelCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessGlobalspecExcelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessGlobalspecExcelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ProcessDirectIndustrySalesInquiryEmailCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessDirectIndustrySalesInquiryEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessDirectIndustrySalesInquiryEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ProcessAlibabaEmailCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessAlibabaEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessAlibabaEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub CreateResourceContactCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub GetAllModelStringCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllModelStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllModelStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub GetMatchedModelsFromTextCompletedEventHandler(ByVal sender As Object, ByVal e As GetMatchedModelsFromTextCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMatchedModelsFromTextCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub CalculateEngagementPointCompletedEventHandler(ByVal sender As Object, ByVal e As CalculateEngagementPointCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CalculateEngagementPointCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ImportCuratedActivityFromLetterCompletedEventHandler(ByVal sender As Object, ByVal e As ImportCuratedActivityFromLetterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ImportCuratedActivityFromLetterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ImportLeadFromUnicaCompletedEventHandler(ByVal sender As Object, ByVal e As ImportLeadFromUnicaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ImportLeadFromUnicaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ImportLeadDailyCompletedEventHandler(ByVal sender As Object, ByVal e As ImportLeadDailyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ImportLeadDailyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ImportLeadFromUploadedListCompletedEventHandler(ByVal sender As Object, ByVal e As ImportLeadFromUploadedListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ImportLeadFromUploadedListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub CreateContactCompletedEventHandler(ByVal sender As Object, ByVal e As CreateContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub CreateActivityCompletedEventHandler(ByVal sender As Object, ByVal e As CreateActivityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateActivityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub GetSiebelActivityCompletedEventHandler(ByVal sender As Object, ByVal e As GetSiebelActivityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSiebelActivityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub UpdateContactCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub InferAccountNameByEmailCompletedEventHandler(ByVal sender As Object, ByVal e As InferAccountNameByEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InferAccountNameByEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strAccountName() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strAccountCorpURL() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ExecuteACLECAMPJobCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub CreateUNICAOffer_TestServerCompletedEventHandler(ByVal sender As Object, ByVal e As CreateUNICAOffer_TestServerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateUNICAOffer_TestServerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub SyncSimpleFormInterestedProductContactToSiebelCompletedEventHandler(ByVal sender As Object, ByVal e As SyncSimpleFormInterestedProductContactToSiebelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SyncSimpleFormInterestedProductContactToSiebelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub GetBoughtUSBContactListCompletedEventHandler(ByVal sender As Object, ByVal e As GetBoughtUSBContactListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBoughtUSBContactListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub SendELetterCompletedEventHandler(ByVal sender As Object, ByVal e As SendELetterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendELetterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
End Namespace
