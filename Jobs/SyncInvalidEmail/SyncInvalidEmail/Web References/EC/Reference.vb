'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace EC
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ECSoap", [Namespace]:="eBizAEU")>  _
    Partial Public Class EC
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private SelectSAPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UnregEDMOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddInvalidEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddInvalidEmailWithReasonOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCampaignImageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCampaignLinkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCampaignLink2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private UniqueIdToEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ContactOpenedCampaignEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ContactOpenedCampaignEmail2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCampaignContactsInRandomOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendCampaignEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ForwardCampaignEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddContact2CampaignOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMyEDMOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateSiebelActivityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SyncInvalidEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ShowOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEDMContentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCampaignSourceLinkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateInvalidEmailReasonOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.SyncInvalidEmail.My.MySettings.Default.SyncInvalidEmail_EC_EC
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event SelectSAPCompleted As SelectSAPCompletedEventHandler
        
        '''<remarks/>
        Public Event UnregEDMCompleted As UnregEDMCompletedEventHandler
        
        '''<remarks/>
        Public Event AddInvalidEmailCompleted As AddInvalidEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event AddInvalidEmailWithReasonCompleted As AddInvalidEmailWithReasonCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCampaignImageCompleted As GetCampaignImageCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCampaignLinkCompleted As GetCampaignLinkCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCampaignLink2Completed As GetCampaignLink2CompletedEventHandler
        
        '''<remarks/>
        Public Event UniqueIdToEmailCompleted As UniqueIdToEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event ContactOpenedCampaignEmailCompleted As ContactOpenedCampaignEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event ContactOpenedCampaignEmail2Completed As ContactOpenedCampaignEmail2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetCampaignContactsInRandomOrderCompleted As GetCampaignContactsInRandomOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event SendCampaignEmailCompleted As SendCampaignEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event ForwardCampaignEmailCompleted As ForwardCampaignEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event SendEmailCompleted As SendEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event AddContact2CampaignCompleted As AddContact2CampaignCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMyEDMCompleted As GetMyEDMCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateSiebelActivityCompleted As CreateSiebelActivityCompletedEventHandler
        
        '''<remarks/>
        Public Event SyncInvalidEmailCompleted As SyncInvalidEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event ShowCompleted As ShowCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEDMContentCompleted As GetEDMContentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCampaignSourceLinkCompleted As GetCampaignSourceLinkCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateInvalidEmailReasonCompleted As UpdateInvalidEmailReasonCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/SelectSAP", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectSAP(ByVal sqlcmd As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("SelectSAP", New Object() {sqlcmd})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectSAPAsync(ByVal sqlcmd As String)
            Me.SelectSAPAsync(sqlcmd, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectSAPAsync(ByVal sqlcmd As String, ByVal userState As Object)
            If (Me.SelectSAPOperationCompleted Is Nothing) Then
                Me.SelectSAPOperationCompleted = AddressOf Me.OnSelectSAPOperationCompleted
            End If
            Me.InvokeAsync("SelectSAP", New Object() {sqlcmd}, Me.SelectSAPOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectSAPOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectSAPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectSAPCompleted(Me, New SelectSAPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/UnregEDM", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UnregEDM(ByVal email As String, ByVal reason As String) As Boolean
            Dim results() As Object = Me.Invoke("UnregEDM", New Object() {email, reason})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UnregEDMAsync(ByVal email As String, ByVal reason As String)
            Me.UnregEDMAsync(email, reason, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UnregEDMAsync(ByVal email As String, ByVal reason As String, ByVal userState As Object)
            If (Me.UnregEDMOperationCompleted Is Nothing) Then
                Me.UnregEDMOperationCompleted = AddressOf Me.OnUnregEDMOperationCompleted
            End If
            Me.InvokeAsync("UnregEDM", New Object() {email, reason}, Me.UnregEDMOperationCompleted, userState)
        End Sub
        
        Private Sub OnUnregEDMOperationCompleted(ByVal arg As Object)
            If (Not (Me.UnregEDMCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UnregEDMCompleted(Me, New UnregEDMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/AddInvalidEmail", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub AddInvalidEmail(ByVal email As String)
            Me.Invoke("AddInvalidEmail", New Object() {email})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddInvalidEmailAsync(ByVal email As String)
            Me.AddInvalidEmailAsync(email, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddInvalidEmailAsync(ByVal email As String, ByVal userState As Object)
            If (Me.AddInvalidEmailOperationCompleted Is Nothing) Then
                Me.AddInvalidEmailOperationCompleted = AddressOf Me.OnAddInvalidEmailOperationCompleted
            End If
            Me.InvokeAsync("AddInvalidEmail", New Object() {email}, Me.AddInvalidEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddInvalidEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddInvalidEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddInvalidEmailCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/AddInvalidEmailWithReason", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub AddInvalidEmailWithReason(ByVal email As String, ByVal subject As String, ByVal Reason As String)
            Me.Invoke("AddInvalidEmailWithReason", New Object() {email, subject, Reason})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddInvalidEmailWithReasonAsync(ByVal email As String, ByVal subject As String, ByVal Reason As String)
            Me.AddInvalidEmailWithReasonAsync(email, subject, Reason, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddInvalidEmailWithReasonAsync(ByVal email As String, ByVal subject As String, ByVal Reason As String, ByVal userState As Object)
            If (Me.AddInvalidEmailWithReasonOperationCompleted Is Nothing) Then
                Me.AddInvalidEmailWithReasonOperationCompleted = AddressOf Me.OnAddInvalidEmailWithReasonOperationCompleted
            End If
            Me.InvokeAsync("AddInvalidEmailWithReason", New Object() {email, subject, Reason}, Me.AddInvalidEmailWithReasonOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddInvalidEmailWithReasonOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddInvalidEmailWithReasonCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddInvalidEmailWithReasonCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/GetCampaignImage", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCampaignImage(ByVal CampaignRowId As String, ByVal ImgId As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("GetCampaignImage", New Object() {CampaignRowId, ImgId})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCampaignImageAsync(ByVal CampaignRowId As String, ByVal ImgId As String)
            Me.GetCampaignImageAsync(CampaignRowId, ImgId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCampaignImageAsync(ByVal CampaignRowId As String, ByVal ImgId As String, ByVal userState As Object)
            If (Me.GetCampaignImageOperationCompleted Is Nothing) Then
                Me.GetCampaignImageOperationCompleted = AddressOf Me.OnGetCampaignImageOperationCompleted
            End If
            Me.InvokeAsync("GetCampaignImage", New Object() {CampaignRowId, ImgId}, Me.GetCampaignImageOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCampaignImageOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCampaignImageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCampaignImageCompleted(Me, New GetCampaignImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/GetCampaignLink", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCampaignLink(ByVal CampaignRowId As String, ByVal ImgId As String, ByVal Email As String) As String
            Dim results() As Object = Me.Invoke("GetCampaignLink", New Object() {CampaignRowId, ImgId, Email})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCampaignLinkAsync(ByVal CampaignRowId As String, ByVal ImgId As String, ByVal Email As String)
            Me.GetCampaignLinkAsync(CampaignRowId, ImgId, Email, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCampaignLinkAsync(ByVal CampaignRowId As String, ByVal ImgId As String, ByVal Email As String, ByVal userState As Object)
            If (Me.GetCampaignLinkOperationCompleted Is Nothing) Then
                Me.GetCampaignLinkOperationCompleted = AddressOf Me.OnGetCampaignLinkOperationCompleted
            End If
            Me.InvokeAsync("GetCampaignLink", New Object() {CampaignRowId, ImgId, Email}, Me.GetCampaignLinkOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCampaignLinkOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCampaignLinkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCampaignLinkCompleted(Me, New GetCampaignLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/GetCampaignLink2", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCampaignLink2(ByVal CampaignRowId As String, ByVal ImgId As String, ByVal Email As String, ByVal ClientIP As String) As String
            Dim results() As Object = Me.Invoke("GetCampaignLink2", New Object() {CampaignRowId, ImgId, Email, ClientIP})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCampaignLink2Async(ByVal CampaignRowId As String, ByVal ImgId As String, ByVal Email As String, ByVal ClientIP As String)
            Me.GetCampaignLink2Async(CampaignRowId, ImgId, Email, ClientIP, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCampaignLink2Async(ByVal CampaignRowId As String, ByVal ImgId As String, ByVal Email As String, ByVal ClientIP As String, ByVal userState As Object)
            If (Me.GetCampaignLink2OperationCompleted Is Nothing) Then
                Me.GetCampaignLink2OperationCompleted = AddressOf Me.OnGetCampaignLink2OperationCompleted
            End If
            Me.InvokeAsync("GetCampaignLink2", New Object() {CampaignRowId, ImgId, Email, ClientIP}, Me.GetCampaignLink2OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCampaignLink2OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCampaignLink2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCampaignLink2Completed(Me, New GetCampaignLink2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/UniqueIdToEmail", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UniqueIdToEmail(ByVal UniqueId As String) As String
            Dim results() As Object = Me.Invoke("UniqueIdToEmail", New Object() {UniqueId})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UniqueIdToEmailAsync(ByVal UniqueId As String)
            Me.UniqueIdToEmailAsync(UniqueId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UniqueIdToEmailAsync(ByVal UniqueId As String, ByVal userState As Object)
            If (Me.UniqueIdToEmailOperationCompleted Is Nothing) Then
                Me.UniqueIdToEmailOperationCompleted = AddressOf Me.OnUniqueIdToEmailOperationCompleted
            End If
            Me.InvokeAsync("UniqueIdToEmail", New Object() {UniqueId}, Me.UniqueIdToEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnUniqueIdToEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.UniqueIdToEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UniqueIdToEmailCompleted(Me, New UniqueIdToEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/ContactOpenedCampaignEmail", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ContactOpenedCampaignEmail(ByVal email As String, ByVal campaign_row_id As String) As Boolean
            Dim results() As Object = Me.Invoke("ContactOpenedCampaignEmail", New Object() {email, campaign_row_id})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ContactOpenedCampaignEmailAsync(ByVal email As String, ByVal campaign_row_id As String)
            Me.ContactOpenedCampaignEmailAsync(email, campaign_row_id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ContactOpenedCampaignEmailAsync(ByVal email As String, ByVal campaign_row_id As String, ByVal userState As Object)
            If (Me.ContactOpenedCampaignEmailOperationCompleted Is Nothing) Then
                Me.ContactOpenedCampaignEmailOperationCompleted = AddressOf Me.OnContactOpenedCampaignEmailOperationCompleted
            End If
            Me.InvokeAsync("ContactOpenedCampaignEmail", New Object() {email, campaign_row_id}, Me.ContactOpenedCampaignEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnContactOpenedCampaignEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.ContactOpenedCampaignEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ContactOpenedCampaignEmailCompleted(Me, New ContactOpenedCampaignEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/ContactOpenedCampaignEmail2", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ContactOpenedCampaignEmail2(ByVal email As String, ByVal campaign_row_id As String, ByVal ip As String) As Boolean
            Dim results() As Object = Me.Invoke("ContactOpenedCampaignEmail2", New Object() {email, campaign_row_id, ip})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ContactOpenedCampaignEmail2Async(ByVal email As String, ByVal campaign_row_id As String, ByVal ip As String)
            Me.ContactOpenedCampaignEmail2Async(email, campaign_row_id, ip, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ContactOpenedCampaignEmail2Async(ByVal email As String, ByVal campaign_row_id As String, ByVal ip As String, ByVal userState As Object)
            If (Me.ContactOpenedCampaignEmail2OperationCompleted Is Nothing) Then
                Me.ContactOpenedCampaignEmail2OperationCompleted = AddressOf Me.OnContactOpenedCampaignEmail2OperationCompleted
            End If
            Me.InvokeAsync("ContactOpenedCampaignEmail2", New Object() {email, campaign_row_id, ip}, Me.ContactOpenedCampaignEmail2OperationCompleted, userState)
        End Sub
        
        Private Sub OnContactOpenedCampaignEmail2OperationCompleted(ByVal arg As Object)
            If (Not (Me.ContactOpenedCampaignEmail2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ContactOpenedCampaignEmail2Completed(Me, New ContactOpenedCampaignEmail2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/GetCampaignContactsInRandomOrder", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCampaignContactsInRandomOrder(ByVal campaign_row_id As String) As String
            Dim results() As Object = Me.Invoke("GetCampaignContactsInRandomOrder", New Object() {campaign_row_id})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCampaignContactsInRandomOrderAsync(ByVal campaign_row_id As String)
            Me.GetCampaignContactsInRandomOrderAsync(campaign_row_id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCampaignContactsInRandomOrderAsync(ByVal campaign_row_id As String, ByVal userState As Object)
            If (Me.GetCampaignContactsInRandomOrderOperationCompleted Is Nothing) Then
                Me.GetCampaignContactsInRandomOrderOperationCompleted = AddressOf Me.OnGetCampaignContactsInRandomOrderOperationCompleted
            End If
            Me.InvokeAsync("GetCampaignContactsInRandomOrder", New Object() {campaign_row_id}, Me.GetCampaignContactsInRandomOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCampaignContactsInRandomOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCampaignContactsInRandomOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCampaignContactsInRandomOrderCompleted(Me, New GetCampaignContactsInRandomOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/SendCampaignEmail", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendCampaignEmail(ByVal email As String, ByVal campaign_row_id As String) As Boolean
            Dim results() As Object = Me.Invoke("SendCampaignEmail", New Object() {email, campaign_row_id})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendCampaignEmailAsync(ByVal email As String, ByVal campaign_row_id As String)
            Me.SendCampaignEmailAsync(email, campaign_row_id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendCampaignEmailAsync(ByVal email As String, ByVal campaign_row_id As String, ByVal userState As Object)
            If (Me.SendCampaignEmailOperationCompleted Is Nothing) Then
                Me.SendCampaignEmailOperationCompleted = AddressOf Me.OnSendCampaignEmailOperationCompleted
            End If
            Me.InvokeAsync("SendCampaignEmail", New Object() {email, campaign_row_id}, Me.SendCampaignEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendCampaignEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendCampaignEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendCampaignEmailCompleted(Me, New SendCampaignEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/ForwardCampaignEmail", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ForwardCampaignEmail(ByVal email As String, ByVal campaign_row_id As String, ByVal comment As String) As Boolean
            Dim results() As Object = Me.Invoke("ForwardCampaignEmail", New Object() {email, campaign_row_id, comment})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ForwardCampaignEmailAsync(ByVal email As String, ByVal campaign_row_id As String, ByVal comment As String)
            Me.ForwardCampaignEmailAsync(email, campaign_row_id, comment, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ForwardCampaignEmailAsync(ByVal email As String, ByVal campaign_row_id As String, ByVal comment As String, ByVal userState As Object)
            If (Me.ForwardCampaignEmailOperationCompleted Is Nothing) Then
                Me.ForwardCampaignEmailOperationCompleted = AddressOf Me.OnForwardCampaignEmailOperationCompleted
            End If
            Me.InvokeAsync("ForwardCampaignEmail", New Object() {email, campaign_row_id, comment}, Me.ForwardCampaignEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnForwardCampaignEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.ForwardCampaignEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ForwardCampaignEmailCompleted(Me, New ForwardCampaignEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/SendEmail", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendEmail(ByVal SendTo As String, ByVal From As String, ByVal Subject As String, ByVal Body As String, ByVal IsBodyHtml As Boolean, ByVal cc As String, ByVal bcc As String) As Boolean
            Dim results() As Object = Me.Invoke("SendEmail", New Object() {SendTo, From, Subject, Body, IsBodyHtml, cc, bcc})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendEmailAsync(ByVal SendTo As String, ByVal From As String, ByVal Subject As String, ByVal Body As String, ByVal IsBodyHtml As Boolean, ByVal cc As String, ByVal bcc As String)
            Me.SendEmailAsync(SendTo, From, Subject, Body, IsBodyHtml, cc, bcc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendEmailAsync(ByVal SendTo As String, ByVal From As String, ByVal Subject As String, ByVal Body As String, ByVal IsBodyHtml As Boolean, ByVal cc As String, ByVal bcc As String, ByVal userState As Object)
            If (Me.SendEmailOperationCompleted Is Nothing) Then
                Me.SendEmailOperationCompleted = AddressOf Me.OnSendEmailOperationCompleted
            End If
            Me.InvokeAsync("SendEmail", New Object() {SendTo, From, Subject, Body, IsBodyHtml, cc, bcc}, Me.SendEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendEmailCompleted(Me, New SendEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/AddContact2Campaign", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddContact2Campaign(ByVal camprowid As String, ByVal email As String) As Boolean
            Dim results() As Object = Me.Invoke("AddContact2Campaign", New Object() {camprowid, email})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddContact2CampaignAsync(ByVal camprowid As String, ByVal email As String)
            Me.AddContact2CampaignAsync(camprowid, email, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddContact2CampaignAsync(ByVal camprowid As String, ByVal email As String, ByVal userState As Object)
            If (Me.AddContact2CampaignOperationCompleted Is Nothing) Then
                Me.AddContact2CampaignOperationCompleted = AddressOf Me.OnAddContact2CampaignOperationCompleted
            End If
            Me.InvokeAsync("AddContact2Campaign", New Object() {camprowid, email}, Me.AddContact2CampaignOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddContact2CampaignOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddContact2CampaignCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddContact2CampaignCompleted(Me, New AddContact2CampaignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/GetMyEDM", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMyEDM(ByVal uid As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetMyEDM", New Object() {uid})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMyEDMAsync(ByVal uid As String)
            Me.GetMyEDMAsync(uid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMyEDMAsync(ByVal uid As String, ByVal userState As Object)
            If (Me.GetMyEDMOperationCompleted Is Nothing) Then
                Me.GetMyEDMOperationCompleted = AddressOf Me.OnGetMyEDMOperationCompleted
            End If
            Me.InvokeAsync("GetMyEDM", New Object() {uid}, Me.GetMyEDMOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMyEDMOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMyEDMCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMyEDMCompleted(Me, New GetMyEDMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/CreateSiebelActivity", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateSiebelActivity(ByVal Type As String, ByVal Status As String, ByVal Display As String, ByVal Description As String, ByVal Comments As String, ByVal AccountRowID As String, ByVal ContactRowID As String, ByVal Source As String, ByVal Org As String, ByVal OwnerEmail As String) As String
            Dim results() As Object = Me.Invoke("CreateSiebelActivity", New Object() {Type, Status, Display, Description, Comments, AccountRowID, ContactRowID, Source, Org, OwnerEmail})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateSiebelActivityAsync(ByVal Type As String, ByVal Status As String, ByVal Display As String, ByVal Description As String, ByVal Comments As String, ByVal AccountRowID As String, ByVal ContactRowID As String, ByVal Source As String, ByVal Org As String, ByVal OwnerEmail As String)
            Me.CreateSiebelActivityAsync(Type, Status, Display, Description, Comments, AccountRowID, ContactRowID, Source, Org, OwnerEmail, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateSiebelActivityAsync(ByVal Type As String, ByVal Status As String, ByVal Display As String, ByVal Description As String, ByVal Comments As String, ByVal AccountRowID As String, ByVal ContactRowID As String, ByVal Source As String, ByVal Org As String, ByVal OwnerEmail As String, ByVal userState As Object)
            If (Me.CreateSiebelActivityOperationCompleted Is Nothing) Then
                Me.CreateSiebelActivityOperationCompleted = AddressOf Me.OnCreateSiebelActivityOperationCompleted
            End If
            Me.InvokeAsync("CreateSiebelActivity", New Object() {Type, Status, Display, Description, Comments, AccountRowID, ContactRowID, Source, Org, OwnerEmail}, Me.CreateSiebelActivityOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateSiebelActivityOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateSiebelActivityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateSiebelActivityCompleted(Me, New CreateSiebelActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/SyncInvalidEmail", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SyncInvalidEmail()
            Me.Invoke("SyncInvalidEmail", New Object(-1) {})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SyncInvalidEmailAsync()
            Me.SyncInvalidEmailAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SyncInvalidEmailAsync(ByVal userState As Object)
            If (Me.SyncInvalidEmailOperationCompleted Is Nothing) Then
                Me.SyncInvalidEmailOperationCompleted = AddressOf Me.OnSyncInvalidEmailOperationCompleted
            End If
            Me.InvokeAsync("SyncInvalidEmail", New Object(-1) {}, Me.SyncInvalidEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnSyncInvalidEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.SyncInvalidEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SyncInvalidEmailCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/Show", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Show() As String
            Dim results() As Object = Me.Invoke("Show", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ShowAsync()
            Me.ShowAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ShowAsync(ByVal userState As Object)
            If (Me.ShowOperationCompleted Is Nothing) Then
                Me.ShowOperationCompleted = AddressOf Me.OnShowOperationCompleted
            End If
            Me.InvokeAsync("Show", New Object(-1) {}, Me.ShowOperationCompleted, userState)
        End Sub
        
        Private Sub OnShowOperationCompleted(ByVal arg As Object)
            If (Not (Me.ShowCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ShowCompleted(Me, New ShowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/GetEDMContent", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEDMContent(ByVal CampaignRowId As String, ByVal ContactEmail As String) As String
            Dim results() As Object = Me.Invoke("GetEDMContent", New Object() {CampaignRowId, ContactEmail})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEDMContentAsync(ByVal CampaignRowId As String, ByVal ContactEmail As String)
            Me.GetEDMContentAsync(CampaignRowId, ContactEmail, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEDMContentAsync(ByVal CampaignRowId As String, ByVal ContactEmail As String, ByVal userState As Object)
            If (Me.GetEDMContentOperationCompleted Is Nothing) Then
                Me.GetEDMContentOperationCompleted = AddressOf Me.OnGetEDMContentOperationCompleted
            End If
            Me.InvokeAsync("GetEDMContent", New Object() {CampaignRowId, ContactEmail}, Me.GetEDMContentOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEDMContentOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEDMContentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEDMContentCompleted(Me, New GetEDMContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/GetCampaignSourceLink", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCampaignSourceLink(ByVal CampaignName As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetCampaignSourceLink", New Object() {CampaignName})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCampaignSourceLinkAsync(ByVal CampaignName As String)
            Me.GetCampaignSourceLinkAsync(CampaignName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCampaignSourceLinkAsync(ByVal CampaignName As String, ByVal userState As Object)
            If (Me.GetCampaignSourceLinkOperationCompleted Is Nothing) Then
                Me.GetCampaignSourceLinkOperationCompleted = AddressOf Me.OnGetCampaignSourceLinkOperationCompleted
            End If
            Me.InvokeAsync("GetCampaignSourceLink", New Object() {CampaignName}, Me.GetCampaignSourceLinkOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCampaignSourceLinkOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCampaignSourceLinkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCampaignSourceLinkCompleted(Me, New GetCampaignSourceLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/UpdateInvalidEmailReason", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateInvalidEmailReason() As Boolean
            Dim results() As Object = Me.Invoke("UpdateInvalidEmailReason", New Object(-1) {})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateInvalidEmailReasonAsync()
            Me.UpdateInvalidEmailReasonAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateInvalidEmailReasonAsync(ByVal userState As Object)
            If (Me.UpdateInvalidEmailReasonOperationCompleted Is Nothing) Then
                Me.UpdateInvalidEmailReasonOperationCompleted = AddressOf Me.OnUpdateInvalidEmailReasonOperationCompleted
            End If
            Me.InvokeAsync("UpdateInvalidEmailReason", New Object(-1) {}, Me.UpdateInvalidEmailReasonOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateInvalidEmailReasonOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateInvalidEmailReasonCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateInvalidEmailReasonCompleted(Me, New UpdateInvalidEmailReasonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub SelectSAPCompletedEventHandler(ByVal sender As Object, ByVal e As SelectSAPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectSAPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub UnregEDMCompletedEventHandler(ByVal sender As Object, ByVal e As UnregEDMCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UnregEDMCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub AddInvalidEmailCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub AddInvalidEmailWithReasonCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub GetCampaignImageCompletedEventHandler(ByVal sender As Object, ByVal e As GetCampaignImageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCampaignImageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub GetCampaignLinkCompletedEventHandler(ByVal sender As Object, ByVal e As GetCampaignLinkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCampaignLinkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub GetCampaignLink2CompletedEventHandler(ByVal sender As Object, ByVal e As GetCampaignLink2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCampaignLink2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub UniqueIdToEmailCompletedEventHandler(ByVal sender As Object, ByVal e As UniqueIdToEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UniqueIdToEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ContactOpenedCampaignEmailCompletedEventHandler(ByVal sender As Object, ByVal e As ContactOpenedCampaignEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ContactOpenedCampaignEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ContactOpenedCampaignEmail2CompletedEventHandler(ByVal sender As Object, ByVal e As ContactOpenedCampaignEmail2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ContactOpenedCampaignEmail2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub GetCampaignContactsInRandomOrderCompletedEventHandler(ByVal sender As Object, ByVal e As GetCampaignContactsInRandomOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCampaignContactsInRandomOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub SendCampaignEmailCompletedEventHandler(ByVal sender As Object, ByVal e As SendCampaignEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendCampaignEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ForwardCampaignEmailCompletedEventHandler(ByVal sender As Object, ByVal e As ForwardCampaignEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ForwardCampaignEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub SendEmailCompletedEventHandler(ByVal sender As Object, ByVal e As SendEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub AddContact2CampaignCompletedEventHandler(ByVal sender As Object, ByVal e As AddContact2CampaignCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddContact2CampaignCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub GetMyEDMCompletedEventHandler(ByVal sender As Object, ByVal e As GetMyEDMCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMyEDMCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub CreateSiebelActivityCompletedEventHandler(ByVal sender As Object, ByVal e As CreateSiebelActivityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateSiebelActivityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub SyncInvalidEmailCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ShowCompletedEventHandler(ByVal sender As Object, ByVal e As ShowCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ShowCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub GetEDMContentCompletedEventHandler(ByVal sender As Object, ByVal e As GetEDMContentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEDMContentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub GetCampaignSourceLinkCompletedEventHandler(ByVal sender As Object, ByVal e As GetCampaignSourceLinkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCampaignSourceLinkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub UpdateInvalidEmailReasonCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateInvalidEmailReasonCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateInvalidEmailReasonCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
End Namespace
