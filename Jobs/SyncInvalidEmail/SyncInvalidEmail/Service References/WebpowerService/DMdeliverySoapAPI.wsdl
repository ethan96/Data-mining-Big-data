<?xml version="1.0" encoding="utf-8"?>
<wsdl:definitions xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:typens="http://dmdelivery.com/webservice/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns="http://schemas.xmlsoap.org/wsdl/" name="DMdeliverySoapAPI" targetNamespace="http://dmdelivery.com/webservice/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
  <wsdl:types>
    <xsd:schema xmlns="http://www.w3.org/2001/XMLSchema" targetNamespace="http://dmdelivery.com/webservice/">
      <xsd:complexType name="ArrayOfIntType">
        <xsd:annotation>
          <xsd:documentation>This datatype represents a sequence/array of integers.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="int" type="xsd:int" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfStringType">
        <xsd:annotation>
          <xsd:documentation>This datatype represents a sequence/array of strings.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="string" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="DMdeliveryLoginType">
        <xsd:annotation>
          <xsd:documentation>This datatype represents a DMdelivery login, an object containing a username and a password.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="1" name="username">
            <xsd:annotation>
              <xsd:documentation>The username to login with. Must be an existing user for this DMdelivery environment.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="24" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="password">
            <xsd:annotation>
              <xsd:documentation>The password to login with.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="24" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RecipientNameValuePairType">
        <xsd:annotation>
          <xsd:documentation>This datatype represents a name/value pair, a combination of a DMdelivery field name and field value. When adding a recipient, fields not known to DMdelivery will be ignored and empty required fields will fail the request.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="1" maxOccurs="1" name="name">
            <xsd:annotation>
              <xsd:documentation>The DMdelivery database field name</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="255" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" maxOccurs="1" name="value">
            <xsd:annotation>
              <xsd:documentation>The value for the DMdelivery field. Depending on the field type, the string might be converted to a date or an integer. If the value is longer than the maximum length in the database, the value will be truncated.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="0" />
                <xsd:maxLength value="65536" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="AdditionRecipientFields">
        <xsd:annotation>
          <xsd:documentation>This datatype represents additional fields for a recipient. Only field names starting with DMD are allowed. Other field names are ignored.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="fields" type="typens:RecipientNameValuePairType" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="NewRecipientType">
        <xsd:annotation>
          <xsd:documentation>This datatype represents a recipient. It consists of a number of name/value pairs. Use 'getRecipientFields' to find out what field names you should use. Used when adding a new recipient.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="1" maxOccurs="unbounded" name="fields" type="typens:RecipientNameValuePairType" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="NewRecipientArrayType">
        <xsd:annotation>
          <xsd:documentation>This datatype represents a sequence/array of NewRecipientType's.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="1" maxOccurs="1000" name="recipients" type="typens:NewRecipientType" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FilterType">
        <xsd:annotation>
          <xsd:documentation>This datatype represents a filter. It consists of an ID and a name.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element name="filter_id" type="xsd:int" />
          <xsd:element name="filter_name" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FilterArrayType">
        <xsd:annotation>
          <xsd:documentation>This datatype represents a sequence/array of FilterType's</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="filters" type="typens:FilterType" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RecipientType">
        <xsd:annotation>
          <xsd:documentation>This datatype represents a recipient. It consists of a number of name/value pairs. Use 'getRecipientFields' to find out what field names you can expect. Used when retrieving recipients.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="1" maxOccurs="1" name="id" type="xsd:int" />
          <xsd:element minOccurs="1" maxOccurs="unbounded" name="fields" type="typens:RecipientNameValuePairType" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RecipientArrayType">
        <xsd:annotation>
          <xsd:documentation>This datatype represents a sequence/array of RecipientType's.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="1" maxOccurs="unbounded" name="recipients" type="typens:RecipientType" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RecordResultType">
        <xsd:annotation>
          <xsd:documentation>This datatype is used as a return value for adding a new record (for example: group or recipient) to DMdelivery.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="1" name="status">
            <xsd:annotation>
              <xsd:documentation>Either 'OK' (record added successfully), 'DUPLICATE' (duplicate record) or 'ERROR' (an error occured).</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:enumeration value="OK" />
                <xsd:enumeration value="DUPLICATE" />
                <xsd:enumeration value="ERROR" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="0" name="statusMsg" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Only available when status = 'ERROR'. Contains the error message.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" name="id" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Only available when status = 'OK' or 'DUPLICATE'. Contains the database ID for the record.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="BrandType">
        <xsd:annotation>
          <xsd:documentation>This datatype represents a DMdelivery brand.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="1" name="id" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The database ID of the brand.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="name">
            <xsd:annotation>
              <xsd:documentation>The name of the brand.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="80" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="BrandArrayType">
        <xsd:annotation>
          <xsd:documentation>This datatype represents a sequence/array of BrandType's.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="brand" type="typens:BrandType" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CampaignType">
        <xsd:annotation>
          <xsd:documentation>This datatype represents a campaign.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="1" name="id" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The database ID of the campaign.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" name="brand_id" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The database ID of the brand this campaign belongs to.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="name">
            <xsd:annotation>
              <xsd:documentation>The name of the campaign.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="80" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="lang">
            <xsd:annotation>
              <xsd:documentation>The languages used in the campaign. Two character ISO codes, comma separated. Ex: nl,en.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="2" />
                <xsd:maxLength value="80" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="is_overall" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>Whether or not the campaign is an overall campaign.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="is_active" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>Whether or not the campaign is an active campaign.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="has_soap_api" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>Whether or not the campaign has a SOAP webservice.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="create_date" type="xsd:date">
            <xsd:annotation>
              <xsd:documentation>The create-date of the campaign.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" name="remarks">
            <xsd:annotation>
              <xsd:documentation>The remarks for the campaign.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="0" />
                <xsd:maxLength value="65536" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CampaignArrayType">
        <xsd:annotation>
          <xsd:documentation>This datatype represents a sequence/array of CampaignType's.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="campaign" type="typens:CampaignType" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SenderAddressType">
        <xsd:annotation>
          <xsd:documentation>This datatype represents a sender address.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="1" name="id" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The database ID of the sender address.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="dmdelivery_address">
            <xsd:annotation>
              <xsd:documentation>The from address used by DMdelivery.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="255" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="forward_address">
            <xsd:annotation>
              <xsd:documentation>The forward email address.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="255" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="0" name="alias_address">
            <xsd:annotation>
              <xsd:documentation>The (optional) alias.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="255" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SenderAddressArrayType">
        <xsd:annotation>
          <xsd:documentation>This datatype represents a sequence/array of SenderAddressType's.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="senderAddress" type="typens:SenderAddressType" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="MailingType">
        <xsd:annotation>
          <xsd:documentation>This (return) datatype is used as a return-value when exporting a single mailing.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="1" name="id" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The database id of the mailing.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="name">
            <xsd:annotation>
              <xsd:documentation>The name of the mailing.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="80" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="subject">
            <xsd:annotation>
              <xsd:documentation>The subject of the mailing.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="255" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="kind">
            <xsd:annotation>
              <xsd:documentation>The kind of mailing. Either 'multipart' or 'plaintext'.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:enumeration value="multipart" />
                <xsd:enumeration value="plaintext" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="lang">
            <xsd:annotation>
              <xsd:documentation>The language of the mailing. Two digit ISO code (nl, en, de etc).</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:length value="2" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="priority">
            <xsd:annotation>
              <xsd:documentation>The mailing's priority (1-5, 3 = normal).</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:int">
                <xsd:minInclusive value="1" />
                <xsd:maxInclusive value="5" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="from_name">
            <xsd:annotation>
              <xsd:documentation>The mailing's from name.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="255" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="sender_id" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The database id of the sender address used.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="plaintext_msg">
            <xsd:annotation>
              <xsd:documentation>The plaintext message.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="16777216" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="0" name="template_id" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The id of the template used. Unavailable if mailing is not based on a template.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="html_msg">
            <xsd:annotation>
              <xsd:documentation>The HTML message.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="16777216" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="attachment">
            <xsd:annotation>
              <xsd:documentation>The name of the attachment.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="80" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="optin_confirm_candidate" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>Whether or not this mailing can be used as a confirmation mail after a new subscriber has signed up. Also determines whether or not this mailing may be shown in the mailing_archive and last_mailing plugins.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="history">
            <xsd:annotation>
              <xsd:documentation>The history of the mailing.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="65536" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="last_mod_date" type="xsd:dateTime">
            <xsd:annotation>
              <xsd:documentation>The date this mailing was last modified.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="last_mod_user">
            <xsd:annotation>
              <xsd:documentation>The user who last modified the mailing.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="80" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="0" name="last_def_sent_date" type="xsd:dateTime">
            <xsd:annotation>
              <xsd:documentation>The date the mailing was last sent definitively. Unavailable if not sent definitively yet.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="weblink">
            <xsd:annotation>
              <xsd:documentation>The url for this mailing.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="255" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SMSMailingType">
        <xsd:annotation>
          <xsd:documentation>This (return) datatype is used as a return-value when exporting a single SMS mailing.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="1" name="id" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The database id of the SMS mailing.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="name">
            <xsd:annotation>
              <xsd:documentation>The name of the SMS mailing.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="80" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="lang">
            <xsd:annotation>
              <xsd:documentation>The language of the SMS mailing. Two digit ISO code (nl, en, de etc).</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:length value="2" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="pers_msg">
            <xsd:annotation>
              <xsd:documentation>The SMS message (possibly containing variables).</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="160" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="unpers_msg">
            <xsd:annotation>
              <xsd:documentation>The SMS message (without variables).</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="160" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="history">
            <xsd:annotation>
              <xsd:documentation>The history of the SMS mailing.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="65536" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="last_mod_date" type="xsd:dateTime">
            <xsd:annotation>
              <xsd:documentation>The date this SMS mailing was last modified.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="last_mod_user">
            <xsd:annotation>
              <xsd:documentation>The user who last modified the SMS mailing.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="80" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="0" name="last_def_sent_date" type="xsd:dateTime">
            <xsd:annotation>
              <xsd:documentation>The date the SMS mailing was last sent definitively. Unavailable if not sent definitively yet.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="MailingArrayType">
        <xsd:annotation>
          <xsd:documentation>This datatype represents a sequence/array of MailingType's.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="mailing" type="typens:MailingType" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SMSMailingArrayType">
        <xsd:annotation>
          <xsd:documentation>This datatype represents a sequence/array of SMSMailingType's.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="mailing" type="typens:SMSMailingType" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="EventType">
        <xsd:annotation>
          <xsd:documentation>This (return) datatype is used as a return-value when returning Event data.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="1" name="id" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The database id of the event.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="campaign_id" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The id of the campaign the event is located in.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="template_id" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The template id used for this event.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="name">
            <xsd:annotation>
              <xsd:documentation>The name of the event.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="80" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="title">
            <xsd:annotation>
              <xsd:documentation>The title of the event.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="80" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="lang">
            <xsd:annotation>
              <xsd:documentation>The language of the mailing. Two digit ISO code (nl, en, de etc).</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:length value="2" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="close_date" type="xsd:dateTime">
            <xsd:annotation>
              <xsd:documentation>The date this event will or has been closed.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="nr_seats" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The number of seats available for this event.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="show_fields">
            <xsd:annotation>
              <xsd:documentation>The recipient fields to show when displaying the event form.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="255" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" maxOccurs="unbounded" name="extras" type="typens:EventExtraType">
            <xsd:annotation>
              <xsd:documentation>Extra fields that may exists for an event attendee.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="show_decline" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The flag which determines if an event decline button will be shown or not.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="max_attendees" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The maximum number of attendees that can attend this event.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" name="accept_mailing_id" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The id of the mailing to send when a recipient confirms they will attend the event.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" name="accept_sms_mailing_id" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The id of the sms mailing to send when a recipient confirms they will attend the event.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="text_open">
            <xsd:annotation>
              <xsd:documentation>The text to display when a recipient opens the event form.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="16777216" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="text_full">
            <xsd:annotation>
              <xsd:documentation>The text to display when a recipient opens the event form and the event is full.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="16777216" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="text_after">
            <xsd:annotation>
              <xsd:documentation>The text to display after an event has been closed.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="16777216" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="text_accept">
            <xsd:annotation>
              <xsd:documentation>The text to display after a recipient has signed up for the event.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="16777216" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="text_decline">
            <xsd:annotation>
              <xsd:documentation>The text to display after a recipient has declined the event.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="16777216" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="0" name="DMDgid_accept" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The id of the DMdelivery group that corresponds to recipients who are attending the event.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" name="DMDgid_decline" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The id of the DMdelivery group that corresponds to recipients who declined the event.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="EventArrayType">
        <xsd:annotation>
          <xsd:documentation>This datatype represents a sequence/array of EventType's.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="eventExtras" type="typens:EventType" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="EventExtraType">
        <xsd:annotation>
          <xsd:documentation>This (return) datatype is used as a return-value when returning Event extras data.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="1" name="name">
            <xsd:annotation>
              <xsd:documentation>The name of the event extra field.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="80" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="explanation">
            <xsd:annotation>
              <xsd:documentation>A brief description of this event extra field.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="80" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="0" name="options">
            <xsd:annotation>
              <xsd:documentation>The options that may be used for this field.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="255" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="inputtype">
            <xsd:annotation>
              <xsd:documentation>The form type of the event extra field.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="20" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="required" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>The flag that determines if this field is required or not.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RecipientCampaignType">
        <xsd:annotation>
          <xsd:documentation>This datatype is used as a return value when retrieving the overall campaigns a recipient is member of.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="1" name="campaign_id" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The database ID of the campaign.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" name="group_ids" type="typens:ArrayOfIntType">
            <xsd:annotation>
              <xsd:documentation>Array of group IDs the recipient is in, within the campaign.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RecipientCampaignArrayType">
        <xsd:annotation>
          <xsd:documentation>This datatype represents a sequence/array of RecipientCampaignType's.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="recipientCampaign" type="typens:RecipientCampaignType" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RecipientFieldType">
        <xsd:annotation>
          <xsd:documentation>This datatype represents a single recipient field.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="1" name="name">
            <xsd:annotation>
              <xsd:documentation>Name of the field.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="200" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="type">
            <xsd:annotation>
              <xsd:documentation>Datatype of the field.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="20" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="maxlength" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Maximum length of the field. -1 if not applicable.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="required" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>Whether or not the field is required.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="default">
            <xsd:annotation>
              <xsd:documentation>Default value of the field.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="0" />
                <xsd:maxLength value="80" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="unq_single" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>Whether or not the field has a single unique index.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="unq_combi" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>Whether or not the field is part of the combined unique index.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="desc">
            <xsd:annotation>
              <xsd:documentation>Description of the field (empty if unavailable).</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="0" />
                <xsd:maxLength value="65536" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="explanation">
            <xsd:annotation>
              <xsd:documentation>Explanation of the field (empty if unavailable).</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="0" />
                <xsd:maxLength value="65536" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RecipientFieldArrayType">
        <xsd:annotation>
          <xsd:documentation>This datatype represents a sequence/array of RecipientFieldType's.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="recipientField" type="typens:RecipientFieldType" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="NewGroupType">
        <xsd:annotation>
          <xsd:documentation>This datatype represents a recipient group. Used when creating a new group.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="1" name="name">
            <xsd:annotation>
              <xsd:documentation>The name of the group.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="80" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="is_test" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>Whether or not the group is a test group.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" name="remarks">
            <xsd:annotation>
              <xsd:documentation>Optional remarks for the group.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="0" />
                <xsd:maxLength value="65536" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="GroupType">
        <xsd:annotation>
          <xsd:documentation>This datatype represents a recipient group. Used when retrieving groups.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="1" name="id" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The database ID of the group.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="name">
            <xsd:annotation>
              <xsd:documentation>The name of the group.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="80" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="is_test" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>Whether or not the group is a test group.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="is_active" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>Whether or not the group is active.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="is_system" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>Whether or not the group is a system group.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="remarks">
            <xsd:annotation>
              <xsd:documentation>The remarks for the group.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="0" />
                <xsd:maxLength value="65536" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="GroupArrayType">
        <xsd:annotation>
          <xsd:documentation>This datatype represents a sequence/array of GroupType's.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="group" type="typens:GroupType" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="MailingStatsSummaryResultType">
        <xsd:annotation>
          <xsd:documentation>This datatype represents a single Summary Statistics record.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="1" name="weblink">
            <xsd:annotation>
              <xsd:documentation>The url (weblink) for this mailing.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="255" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="total_sent" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The number of emails sent.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="total_accepted" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The number of emails sent minus hard- and soft bounces.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="hardbounces" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The number of hard bounces.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="softbounces" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The number of soft bounces.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="unsubscribers" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The number of unsubscribers.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="suspends" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The number of temporary unsubscribers.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="spamcomplaints" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The number of spamcomplaints.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="unique_opens" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The number of unique recipients who opened the mailing.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="total_renders" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The total number of email renders.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="unique_renders" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The unique number of email renders.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="total_clickthroughs" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The total number of click-throughs.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="unique_clickthroughs" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The number of unique recipients who clicked through.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="unique_link_clickthroughs" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The number of different links clicked by unique recipients.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="total_conversion" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The total number of conversion hits.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="unique_conversion" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The number of unique recipients who caused conversion.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="click2open_rate" type="xsd:float">
            <xsd:annotation>
              <xsd:documentation>Number of Unique Click-Throughs divided by Unique Email Opens.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="MailingResponseType">
        <xsd:annotation>
          <xsd:documentation>This datatype represents a single Mailing Response record, for example an open or click.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="1" name="field" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>The database value for the requested field of the recipient.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="type">
            <xsd:annotation>
              <xsd:documentation>The type of response (click or open).</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:enumeration value="open" />
                <xsd:enumeration value="click" />
                <xsd:enumeration value="trigger" />
                <xsd:enumeration value="plugin" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="log_date">
            <xsd:annotation>
              <xsd:documentation>The date/time this response was generated.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="MailingResponseArrayType">
        <xsd:annotation>
          <xsd:documentation>This datatype represents a sequence/array of MailingResponseType's.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="response" type="typens:MailingResponseType" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="MailingBounceType">
        <xsd:annotation>
          <xsd:documentation>This datatype represents a single Mailing Bounce record.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="1" name="field" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>The database value for the requested field of the recipient.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="type">
            <xsd:annotation>
              <xsd:documentation>The type of bounce soft or hard.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:enumeration value="soft" />
                <xsd:enumeration value="hard" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" name="message" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>The database value for the requested field of the recipient.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" name="log_date" type="xsd:dateTime">
            <xsd:annotation>
              <xsd:documentation>The date/time this bounce was generated.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="MailingBounceArrayType">
        <xsd:annotation>
          <xsd:documentation>This datatype represents a sequence/array of MailingBounceType's.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="response" type="typens:MailingBounceType" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RecipientResultType">
        <xsd:annotation>
          <xsd:documentation>This generic datatype is used as a return-value when adding multiple recipients.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="1" maxOccurs="unbounded" name="fields" type="typens:RecipientNameValuePairType" />
          <xsd:element minOccurs="1" maxOccurs="1" name="DMDmessage">
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:minLength value="1" />
                <xsd:maxLength value="255" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RecipientResultArrayType">
        <xsd:annotation>
          <xsd:documentation>This datatype represents a sequence/array of RecipientResultType's.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="recipient" type="typens:RecipientResultType" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="addRecipientsResultType">
        <xsd:annotation>
          <xsd:documentation>This datatype is used as a return value for adding multiple new recipients to DMdelivery.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="1" maxOccurs="1" name="status">
            <xsd:annotation>
              <xsd:documentation>Either 'OK' (*all* recipients added successfully), 'DUPLICATE' (1 or more duplicate recipients) or 'ERROR' (an error occured).</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:enumeration value="OK" />
                <xsd:enumeration value="DUPLICATE" />
                <xsd:enumeration value="ERROR" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="0" maxOccurs="1" name="statusMsg" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Only available when status == 'ERROR'. Contains the error message.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" maxOccurs="1" name="errors" type="typens:RecipientResultArrayType">
            <xsd:annotation>
              <xsd:documentation>Only available when adding one or more recipients failed. Contains the recipient-records that failed.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" maxOccurs="1" name="duplicates" type="typens:RecipientResultArrayType">
            <xsd:annotation>
              <xsd:documentation>Only available when adding one or more recipients caused a duplicate. Contains the recipient-records that are duplicate.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" maxOccurs="1" name="successful" type="typens:RecipientArrayType">
            <xsd:annotation>
              <xsd:documentation>Contains the successfully inserted recipient-records, including the ID that DMdelivery assigned to them.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
    </xsd:schema>
  </wsdl:types>
  <wsdl:message name="checkHealth_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
  </wsdl:message>
  <wsdl:message name="checkHealth_out">
    <wsdl:part name="checkHealth_result" type="xsd:boolean" />
  </wsdl:message>
  <wsdl:message name="getBrands_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
  </wsdl:message>
  <wsdl:message name="getBrands_out">
    <wsdl:part name="getBrands_result" type="typens:BrandArrayType" />
  </wsdl:message>
  <wsdl:message name="getCampaigns_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
  </wsdl:message>
  <wsdl:message name="getCampaigns_out">
    <wsdl:part name="getCampaigns_result" type="typens:CampaignArrayType" />
  </wsdl:message>
  <wsdl:message name="getSenderAddresses_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
  </wsdl:message>
  <wsdl:message name="getSenderAddresses_out">
    <wsdl:part name="getSenderAddresses_result" type="typens:SenderAddressArrayType" />
  </wsdl:message>
  <wsdl:message name="addOverallRecipient_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignIDs" type="typens:ArrayOfIntType" />
    <wsdl:part name="groupIDs" type="typens:ArrayOfIntType" />
    <wsdl:part name="recipientData" type="typens:NewRecipientType" />
    <wsdl:part name="overwrite" type="xsd:boolean" />
  </wsdl:message>
  <wsdl:message name="addOverallRecipient_out">
    <wsdl:part name="addOverallRecipient_result" type="typens:RecordResultType" />
  </wsdl:message>
  <wsdl:message name="editOverallRecipient_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignIDs" type="typens:ArrayOfIntType" />
    <wsdl:part name="recipientID" type="xsd:int" />
    <wsdl:part name="groupIDs" type="typens:ArrayOfIntType" />
    <wsdl:part name="recipientData" type="typens:NewRecipientType" />
  </wsdl:message>
  <wsdl:message name="editOverallRecipient_out">
    <wsdl:part name="editOverallRecipient_result" type="typens:RecordResultType" />
  </wsdl:message>
  <wsdl:message name="addOverallRecipientToGroups_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignIDs" type="typens:ArrayOfIntType" />
    <wsdl:part name="recipientID" type="xsd:int" />
    <wsdl:part name="groupIDs" type="typens:ArrayOfIntType" />
  </wsdl:message>
  <wsdl:message name="addOverallRecipientToGroups_out">
    <wsdl:part name="addOverallRecipientToGroups_result" type="xsd:boolean" />
  </wsdl:message>
  <wsdl:message name="removeOverallRecipientFromGroups_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignIDs" type="typens:ArrayOfIntType" />
    <wsdl:part name="recipientID" type="xsd:int" />
    <wsdl:part name="groupIDs" type="typens:ArrayOfIntType" />
  </wsdl:message>
  <wsdl:message name="removeOverallRecipientFromGroups_out">
    <wsdl:part name="removeOverallRecipientFromGroups_result" type="xsd:boolean" />
  </wsdl:message>
  <wsdl:message name="editRecipient_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="recipientID" type="xsd:int" />
    <wsdl:part name="recipientData" type="typens:NewRecipientType" />
  </wsdl:message>
  <wsdl:message name="editRecipient_out">
    <wsdl:part name="editRecipient_result" type="typens:RecordResultType" />
  </wsdl:message>
  <wsdl:message name="getOverallRecipientCampaigns_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="recipientID" type="xsd:int" />
  </wsdl:message>
  <wsdl:message name="getOverallRecipientCampaigns_out">
    <wsdl:part name="getOverallRecipientCampaigns_result" type="typens:RecipientCampaignArrayType" />
  </wsdl:message>
  <wsdl:message name="getRecipientsByMatch_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="recipientData" type="typens:NewRecipientType" />
  </wsdl:message>
  <wsdl:message name="getRecipientsByMatch_out">
    <wsdl:part name="getRecipientsByMatch_result" type="typens:RecipientArrayType" />
  </wsdl:message>
  <wsdl:message name="getRecipientFields_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="lang" type="xsd:string" />
  </wsdl:message>
  <wsdl:message name="getRecipientFields_out">
    <wsdl:part name="getRecipientFields_result" type="typens:RecipientFieldArrayType" />
  </wsdl:message>
  <wsdl:message name="sendSingleMailing_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="mailingID" type="xsd:int" />
    <wsdl:part name="recipientID" type="xsd:int" />
  </wsdl:message>
  <wsdl:message name="sendSingleMailing_out">
    <wsdl:part name="sendSingleMailing_result" type="xsd:boolean" />
  </wsdl:message>
  <wsdl:message name="sendMailing_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="mailingID" type="xsd:int" />
    <wsdl:part name="isTest" type="xsd:boolean" />
    <wsdl:part name="resultsEmail" type="xsd:string" />
    <wsdl:part name="groupIDs" type="typens:ArrayOfIntType" />
    <wsdl:part name="filterID" type="xsd:int" />
    <wsdl:part name="langs" type="typens:ArrayOfStringType" />
    <wsdl:part name="ADprefixDomains" type="xsd:string" />
    <wsdl:part name="callbackUrl" type="xsd:string" />
  </wsdl:message>
  <wsdl:message name="sendMailing_out">
    <wsdl:part name="sendMailing_result" type="typens:RecordResultType" />
  </wsdl:message>
  <wsdl:message name="sendSystemMail_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="mailingID" type="xsd:int" />
    <wsdl:part name="recipientID" type="xsd:int" />
    <wsdl:part name="attachments" type="xsd:string" />
    <wsdl:part name="extraRecipientData" type="typens:AdditionRecipientFields" />
  </wsdl:message>
  <wsdl:message name="sendSystemMail_out">
    <wsdl:part name="sendSystemMail_result" type="xsd:boolean" />
  </wsdl:message>
  <wsdl:message name="sendMailingScheduled_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="mailingID" type="xsd:int" />
    <wsdl:part name="sendDate" type="xsd:string" />
    <wsdl:part name="isTest" type="xsd:boolean" />
    <wsdl:part name="resultsEmail" type="xsd:string" />
    <wsdl:part name="groupIDs" type="typens:ArrayOfIntType" />
    <wsdl:part name="filterID" type="xsd:int" />
    <wsdl:part name="langs" type="typens:ArrayOfStringType" />
    <wsdl:part name="ADprefixDomains" type="xsd:string" />
    <wsdl:part name="callbackUrl" type="xsd:string" />
    <wsdl:part name="approvalGroupID" type="xsd:int" />
    <wsdl:part name="approvalPeriod" type="xsd:float" />
    <wsdl:part name="approvalAck" type="xsd:int" />
    <wsdl:part name="approvalNack" type="xsd:int" />
  </wsdl:message>
  <wsdl:message name="sendMailingScheduled_out">
    <wsdl:part name="sendMailing_result" type="typens:RecordResultType" />
  </wsdl:message>
  <wsdl:message name="createMailing_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="mailingName" type="xsd:string" />
    <wsdl:part name="lang" type="xsd:string" />
    <wsdl:part name="subject" type="xsd:string" />
    <wsdl:part name="fromName" type="xsd:string" />
    <wsdl:part name="senderID" type="xsd:int" />
    <wsdl:part name="html" type="xsd:string" />
  </wsdl:message>
  <wsdl:message name="createMailing_out">
    <wsdl:part name="createMailing_result" type="typens:RecordResultType" />
  </wsdl:message>
  <wsdl:message name="slurpMailing_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="mailingName" type="xsd:string" />
    <wsdl:part name="lang" type="xsd:string" />
    <wsdl:part name="subject" type="xsd:string" />
    <wsdl:part name="fromName" type="xsd:string" />
    <wsdl:part name="senderID" type="xsd:int" />
    <wsdl:part name="url" type="xsd:string" />
    <wsdl:part name="checkTimestamp" type="xsd:boolean" />
  </wsdl:message>
  <wsdl:message name="slurpMailing_out">
    <wsdl:part name="slurpMailing_result" type="typens:RecordResultType" />
  </wsdl:message>
  <wsdl:message name="removeRecipientFromGroups_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="recipientID" type="xsd:int" />
    <wsdl:part name="groupIDs" type="typens:ArrayOfIntType" />
  </wsdl:message>
  <wsdl:message name="removeRecipientFromGroups_out">
    <wsdl:part name="removeRecipientFromGroups_result" type="typens:ArrayOfIntType" />
  </wsdl:message>
  <wsdl:message name="addRecipientToGroups_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="recipientID" type="xsd:int" />
    <wsdl:part name="groupIDs" type="typens:ArrayOfIntType" />
  </wsdl:message>
  <wsdl:message name="addRecipientToGroups_out">
    <wsdl:part name="addRecipientToGroups_result" type="typens:ArrayOfIntType" />
  </wsdl:message>
  <wsdl:message name="moveRecipientsToGroup_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="fromGroupID" type="xsd:int" />
    <wsdl:part name="toGroupID" type="xsd:int" />
  </wsdl:message>
  <wsdl:message name="moveRecipientsToGroup_out">
    <wsdl:part name="moveRecipientsToGroup_result" type="xsd:int" />
  </wsdl:message>
  <wsdl:message name="getMailings_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="limit" type="xsd:int" />
    <wsdl:part name="definitiveOnly" type="xsd:boolean" />
  </wsdl:message>
  <wsdl:message name="getMailings_out">
    <wsdl:part name="getMailings_result" type="typens:MailingArrayType" />
  </wsdl:message>
  <wsdl:message name="getSMSMailings_out">
    <wsdl:part name="getSMSMailings_result" type="typens:SMSMailingArrayType" />
  </wsdl:message>
  <wsdl:message name="getRecipientsFromGroup_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="fields" type="typens:ArrayOfStringType" />
    <wsdl:part name="inGroupID" type="xsd:int" />
    <wsdl:part name="fromDate" type="xsd:date" />
    <wsdl:part name="mailingIDs" type="typens:ArrayOfIntType" />
    <wsdl:part name="filterID" type="xsd:int" />
  </wsdl:message>
  <wsdl:message name="getRecipientsFromGroup_out">
    <wsdl:part name="getRecipientsFromGroup_result" type="typens:RecipientArrayType" />
  </wsdl:message>
  <wsdl:message name="getRecipients_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="fields" type="typens:ArrayOfStringType" />
    <wsdl:part name="inGroupIDs" type="typens:ArrayOfIntType" />
    <wsdl:part name="notInGroupIDs" type="typens:ArrayOfIntType" />
    <wsdl:part name="mailingIDs" type="typens:ArrayOfIntType" />
    <wsdl:part name="filterID" type="xsd:int" />
  </wsdl:message>
  <wsdl:message name="getRecipients_out">
    <wsdl:part name="getRecipients_result" type="typens:RecipientArrayType" />
  </wsdl:message>
  <wsdl:message name="getRecipientGroups_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="recipientID" type="xsd:int" />
  </wsdl:message>
  <wsdl:message name="getRecipientGroups_out">
    <wsdl:part name="getRecipientGroups_result" type="typens:ArrayOfIntType" />
  </wsdl:message>
  <wsdl:message name="getMailingStatsSummary_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="mailing" type="xsd:int" />
  </wsdl:message>
  <wsdl:message name="getMailingStatsSummary_out">
    <wsdl:part name="getMailingStatsSummary_result" type="typens:MailingStatsSummaryResultType" />
  </wsdl:message>
  <wsdl:message name="getGroups_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
  </wsdl:message>
  <wsdl:message name="getGroups_out">
    <wsdl:part name="getGroups_result" type="typens:GroupArrayType" />
  </wsdl:message>
  <wsdl:message name="getMailingResponse_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="mailingID" type="xsd:int" />
    <wsdl:part name="types" type="xsd:string" />
    <wsdl:part name="field" type="xsd:string" />
  </wsdl:message>
  <wsdl:message name="getMailingResponse_out">
    <wsdl:part name="getMailingResponse_result" type="typens:MailingResponseArrayType" />
  </wsdl:message>
  <wsdl:message name="getMailingBounce_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="mailingID" type="xsd:int" />
    <wsdl:part name="types" type="xsd:string" />
    <wsdl:part name="field" type="xsd:string" />
    <wsdl:part name="date" type="xsd:date" />
  </wsdl:message>
  <wsdl:message name="getMailingBounce_out">
    <wsdl:part name="getMailingBounce_result" type="typens:MailingBounceArrayType" />
  </wsdl:message>
  <wsdl:message name="deleteMailing_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="mailingID" type="xsd:int" />
  </wsdl:message>
  <wsdl:message name="deleteMailing_out">
    <wsdl:part name="deleteMailing_result" type="typens:RecordResultType" />
  </wsdl:message>
  <wsdl:message name="addGroup_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="group" type="typens:NewGroupType" />
  </wsdl:message>
  <wsdl:message name="addGroup_out">
    <wsdl:part name="addGroup_result" type="typens:RecordResultType" />
  </wsdl:message>
  <wsdl:message name="flushGroup_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="groupID" type="xsd:int" />
  </wsdl:message>
  <wsdl:message name="flushGroup_out">
    <wsdl:part name="flushGroup_result" type="xsd:int" />
  </wsdl:message>
  <wsdl:message name="deleteGroup_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="groupID" type="xsd:int" />
  </wsdl:message>
  <wsdl:message name="deleteGroup_out">
    <wsdl:part name="deleteGroup_result" type="xsd:int" />
  </wsdl:message>
  <wsdl:message name="addRecipient_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="groupIDs" type="typens:ArrayOfIntType" />
    <wsdl:part name="recipientData" type="typens:NewRecipientType" />
    <wsdl:part name="addDuplisToGroups" type="xsd:boolean" />
    <wsdl:part name="overwrite" type="xsd:boolean" />
  </wsdl:message>
  <wsdl:message name="addRecipient_out">
    <wsdl:part name="addRecipient_result" type="typens:RecordResultType" />
  </wsdl:message>
  <wsdl:message name="addRecipientAttachment_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="mailingID" type="xsd:int" />
    <wsdl:part name="recipientID" type="xsd:int" />
    <wsdl:part name="fileName" type="xsd:string" />
    <wsdl:part name="fileMD5" type="xsd:string" />
    <wsdl:part name="fileData" type="xsd:string" />
  </wsdl:message>
  <wsdl:message name="addRecipientAttachment_out">
    <wsdl:part name="addRecipientAttachment_result" type="xsd:string" />
  </wsdl:message>
  <wsdl:message name="addMailingAttachment_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="mailingID" type="xsd:int" />
    <wsdl:part name="fileName" type="xsd:string" />
    <wsdl:part name="fileMD5" type="xsd:string" />
    <wsdl:part name="fileData" type="xsd:string" />
  </wsdl:message>
  <wsdl:message name="addMailingAttachment_out">
    <wsdl:part name="addMailingAttachment_result" type="xsd:string" />
  </wsdl:message>
  <wsdl:message name="addNotification_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="title" type="xsd:string" />
    <wsdl:part name="body" type="xsd:string" />
    <wsdl:part name="severity" type="xsd:int" />
    <wsdl:part name="source" type="xsd:string" />
    <wsdl:part name="expireDate" type="xsd:dateTime" />
  </wsdl:message>
  <wsdl:message name="addNotification_out">
    <wsdl:part name="addNotification_result" type="xsd:int" />
  </wsdl:message>
  <wsdl:message name="deleteMailingAttachments_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="mailingID" type="xsd:int" />
    <wsdl:part name="attachmentIDs" type="xsd:string" />
  </wsdl:message>
  <wsdl:message name="deleteMailingAttachments_out">
    <wsdl:part name="deleteMailingAttachments_result" type="typens:RecordResultType" />
  </wsdl:message>
  <wsdl:message name="getMailingAttachmentIDs_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="mailingID" type="xsd:int" />
  </wsdl:message>
  <wsdl:message name="getMailingAttachmentIDs_out">
    <wsdl:part name="getMailingAttachmentIDs_result" type="xsd:string" />
  </wsdl:message>
  <wsdl:message name="addRecipients_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="groupIDs" type="typens:ArrayOfIntType" />
    <wsdl:part name="recipientDatas" type="typens:NewRecipientArrayType" />
    <wsdl:part name="addDuplisToGroups" type="xsd:boolean" />
    <wsdl:part name="overwrite" type="xsd:boolean" />
  </wsdl:message>
  <wsdl:message name="addRecipients_out">
    <wsdl:part name="addRecipients_result" type="typens:addRecipientsResultType" />
  </wsdl:message>
  <wsdl:message name="addRecipientsSendMailing_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="mailingID" type="xsd:int" />
    <wsdl:part name="groupIDs" type="typens:ArrayOfIntType" />
    <wsdl:part name="recipientDatas" type="typens:NewRecipientArrayType" />
    <wsdl:part name="addDuplisToGroups" type="xsd:boolean" />
    <wsdl:part name="overwrite" type="xsd:boolean" />
  </wsdl:message>
  <wsdl:message name="addRecipientsSendMailing_out">
    <wsdl:part name="addRecipientsSendMailing_result" type="typens:addRecipientsResultType" />
  </wsdl:message>
  <wsdl:message name="addRecipientsSendSMS_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="SMSmailingID" type="xsd:int" />
    <wsdl:part name="groupIDs" type="typens:ArrayOfIntType" />
    <wsdl:part name="recipientDatas" type="typens:NewRecipientArrayType" />
    <wsdl:part name="addDuplisToGroups" type="xsd:boolean" />
    <wsdl:part name="overwrite" type="xsd:boolean" />
  </wsdl:message>
  <wsdl:message name="addRecipientsSendSMS_out">
    <wsdl:part name="addRecipientsSendSMS_result" type="typens:addRecipientsResultType" />
  </wsdl:message>
  <wsdl:message name="importRemoteCSV_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="groupID" type="xsd:int" />
    <wsdl:part name="csvURL" type="xsd:string" />
    <wsdl:part name="csvCharset" type="xsd:string" />
    <wsdl:part name="csvFieldSep" type="xsd:string" />
    <wsdl:part name="csvEnclosure" type="xsd:string" />
    <wsdl:part name="addDuplisToGroups" type="xsd:boolean" />
    <wsdl:part name="overwrite" type="xsd:boolean" />
    <wsdl:part name="callbackUrl" type="xsd:string" />
  </wsdl:message>
  <wsdl:message name="importRemoteCSV_out">
    <wsdl:part name="importRemoteCSV_result" type="typens:RecordResultType" />
  </wsdl:message>
  <wsdl:message name="importRemoteCSVSendMailing_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="groupID" type="xsd:int" />
    <wsdl:part name="csvURL" type="xsd:string" />
    <wsdl:part name="csvCharset" type="xsd:string" />
    <wsdl:part name="csvFieldSep" type="xsd:string" />
    <wsdl:part name="csvEnclosure" type="xsd:string" />
    <wsdl:part name="addDuplisToGroups" type="xsd:boolean" />
    <wsdl:part name="overwrite" type="xsd:boolean" />
    <wsdl:part name="mailingID" type="xsd:int" />
    <wsdl:part name="resultsEmail" type="xsd:string" />
    <wsdl:part name="filterID" type="xsd:int" />
    <wsdl:part name="langs" type="typens:ArrayOfStringType" />
    <wsdl:part name="ADprefixDomains" type="xsd:string" />
    <wsdl:part name="callbackUrl" type="xsd:string" />
  </wsdl:message>
  <wsdl:message name="importRemoteCSVSendMailing_out">
    <wsdl:part name="importRemoteCSVSendMailing_result" type="typens:RecordResultType" />
  </wsdl:message>
  <wsdl:message name="getEvents_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="eventID" type="xsd:int" />
  </wsdl:message>
  <wsdl:message name="getEvents_out">
    <wsdl:part name="getEvents_result" type="typens:EventArrayType" />
  </wsdl:message>
  <wsdl:message name="addEventAttendee_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="eventID" type="xsd:int" />
    <wsdl:part name="recipientData" type="typens:NewRecipientType" />
    <wsdl:part name="status" type="xsd:boolean" />
  </wsdl:message>
  <wsdl:message name="addEventAttendee_out">
    <wsdl:part name="addEventAttendee_result" type="typens:NewRecipientType" />
  </wsdl:message>
  <wsdl:message name="getEventAttendees_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="eventID" type="xsd:int" />
  </wsdl:message>
  <wsdl:message name="getEventAttendees_out">
    <wsdl:part name="getEventAttendees_result" type="typens:NewRecipientArrayType" />
  </wsdl:message>
  <wsdl:message name="getFilters_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
  </wsdl:message>
  <wsdl:message name="getFilters_out">
    <wsdl:part name="getFilters_result" type="typens:FilterArrayType" />
  </wsdl:message>
  <wsdl:message name="createSenderAddress_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="fromEmail" type="xsd:string" />
  </wsdl:message>
  <wsdl:message name="createSenderAddress_out">
    <wsdl:part name="createSenderAddress_result" type="typens:RecordResultType" />
  </wsdl:message>
  <wsdl:message name="createCampaign_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="brandID" type="xsd:int" />
    <wsdl:part name="name" type="xsd:string" />
    <wsdl:part name="defaultSenderName" type="xsd:string" />
    <wsdl:part name="defaultSenderAddress" type="xsd:int" />
    <wsdl:part name="defaultReplyAddress" type="xsd:int" />
    <wsdl:part name="langs" type="xsd:string" />
    <wsdl:part name="isOverall" type="xsd:boolean" />
    <wsdl:part name="conversionPoints" type="xsd:string" />
    <wsdl:part name="localDomain" type="xsd:string" />
    <wsdl:part name="excludeLists" type="xsd:string" />
  </wsdl:message>
  <wsdl:message name="createCampaign_out">
    <wsdl:part name="createCampaign_result" type="typens:RecordResultType" />
  </wsdl:message>
  <wsdl:message name="copyFieldDefinition_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="srcCampaignID" type="xsd:int" />
    <wsdl:part name="dstCampaignID" type="xsd:int" />
  </wsdl:message>
  <wsdl:message name="copyFieldDefinition_out">
    <wsdl:part name="copyFieldDefinition_result" type="typens:RecordResultType" />
  </wsdl:message>
  <wsdl:message name="sendSinglePush_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="mailingID" type="xsd:int" />
    <wsdl:part name="recipientID" type="xsd:int" />
    <wsdl:part name="resultsEmail" type="xsd:string" />
  </wsdl:message>
  <wsdl:message name="sendSinglePush_out">
    <wsdl:part name="sendSinglePush_result" type="typens:RecordResultType" />
  </wsdl:message>
  <wsdl:message name="sendPushMailing_in">
    <wsdl:part name="login" type="typens:DMdeliveryLoginType" />
    <wsdl:part name="campaignID" type="xsd:int" />
    <wsdl:part name="mailingID" type="xsd:int" />
    <wsdl:part name="groupIDs" type="typens:ArrayOfIntType" />
    <wsdl:part name="excludeGroupIDs" type="typens:ArrayOfIntType" />
    <wsdl:part name="resultsEmail" type="xsd:string" />
  </wsdl:message>
  <wsdl:message name="sendPushMailing_out">
    <wsdl:part name="sendPushMailing_result" type="typens:RecordResultType" />
  </wsdl:message>
  <wsdl:portType name="DMdeliverySoapAPIPort">
    <wsdl:operation name="checkHealth">
      <wsdl:documentation>
		Check the health of DMdelivery's webservice.
		Specifically: check whether the webservice is available (http(s) access), and the database is up and responsive.
		Required credentials: none
		@param login: DMdelivery login object.
		@returns: true, when health is okay.
		</wsdl:documentation>
      <wsdl:input message="typens:checkHealth_in" />
      <wsdl:output message="typens:checkHealth_out" />
    </wsdl:operation>
    <wsdl:operation name="addOverallRecipient">
      <wsdl:documentation>
		Add a new recipient to the overall DMdelivery database.
		Required credentials: 'insert' privilege for area 'Overall recipients'
		@param login: DMdelivery login object.
		@param campaignIDs: An array of overall campaigns (database IDs) to make the recipients a member of. Provide at least one campaign.
		@param groupIDs: An array of groups (database IDs) to make the recipient a member of. The groups here need to be present in all campaigns the recipient becomes a member of! Provide at least one group. If this array *only* contains the ID of the Opt-in group (60), the opt-in confirmation email will be sent to the recipient.
		@param recipientData: An associative array (key: name of field, value: value of field) containing recipient data.
		@param overwrite: In case the recipient already exists, whether or not to overwrite the known recipient data with the new data provided. If set to 'false', and the recipient to be added turns out to be duplicate, then the recipient will not be added to the given campaigns and groups!
		@returns: The database ID of the newly created recipient.
		</wsdl:documentation>
      <wsdl:input message="typens:addOverallRecipient_in" />
      <wsdl:output message="typens:addOverallRecipient_out" />
    </wsdl:operation>
    <wsdl:operation name="editOverallRecipient">
      <wsdl:documentation>
		Edit the data of an existing overall recipient, enabling modifying campaign and/or group memberships.
		Required credentials: 'update' privilege for area 'Overall recipients'
		@param login: DMdelivery login object.
		@param campaignIDs: An array of overall campaigns (database IDs) to make the recipients a member of. For campaigns this recipient was a member of but that are not included in $campaignIDs, the recipient will be put in the Unsubscribers group. For all 'campaignIDs' given, the recipient will be put in the 'groupIDs', while removing that recipient from the Unsubscribe, Bounce and Spamcomplaint groups in these campaigns. If this argument is an empty list, the recipient will be unsubscribed from all campaigns he is a member of.
		@param recipientID: The database ID of the recipient to edit. Can be found via getRecipientsByMatch.
		@param groupIDs: An array of groups (database IDs) to make the recipient a member of. The groups here need to be present in all campaigns the recipient becomes a member of! Provide at least one group.
		@param recipientData: An associative array (key: name of field, value: value of field) containing updated recipient data.
		@returns: The database ID of the updated recipient.
		</wsdl:documentation>
      <wsdl:input message="typens:editOverallRecipient_in" />
      <wsdl:output message="typens:editOverallRecipient_out" />
    </wsdl:operation>
    <wsdl:operation name="addOverallRecipientToGroups">
      <wsdl:documentation>
		Make an overall recipient a member of one or more groups in one or more overall campaigns.
		Required credentials: 'update' privilege for area 'Overall recipients'
		@param login: DMdelivery login object.
		@param campaignIDs: An array of overall campaigns (database IDs).
		@param recipientID: The database ID of the recipient.
		@param groupIDs: An array of groups (database IDs) to make the recipient a member of. Provide at least one group.
		@returns: true
		</wsdl:documentation>
      <wsdl:input message="typens:addOverallRecipientToGroups_in" />
      <wsdl:output message="typens:addOverallRecipientToGroups_out" />
    </wsdl:operation>
    <wsdl:operation name="removeOverallRecipientFromGroups">
      <wsdl:documentation>
		Remove an overall recipient from one or more groups in one or more overall campaigns.
		Required credentials: 'delete' privilege for area 'Overall recipients'
		@param login: DMdelivery login object.
		@param campaignIDs: An array of overall campaigns (database IDs).
		@param recipientID: The database ID of the recipient.
		@param groupIDs: An array of groups (database IDs) to remove the recipient from. Provide at least one group.
		@returns: true
		</wsdl:documentation>
      <wsdl:input message="typens:removeOverallRecipientFromGroups_in" />
      <wsdl:output message="typens:removeOverallRecipientFromGroups_out" />
    </wsdl:operation>
    <wsdl:operation name="editRecipient">
      <wsdl:documentation>
		Edit the data of an existing recipient.
		Required credentials: 'update' privilege for area 'Recipients'
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with. Use 0 to edit an overall recipient, regardless of campain.
		@param recipientID: The database ID of the recipient to edit. Can be found via getRecipientsByMatch.
		@param recipientData: An array of name/value pairs, representing updated recipient data.
		@returns: The database ID of the updated recipient.
		</wsdl:documentation>
      <wsdl:input message="typens:editRecipient_in" />
      <wsdl:output message="typens:editRecipient_out" />
    </wsdl:operation>
    <wsdl:operation name="getBrands">
      <wsdl:documentation>
		Retrieve all brands from DMdelivery.
		Required credentials: 'export' privilege for area 'Brands'
		@param login: DMdelivery login object.
		@returns: An array of all brands in the DMdelivery environment.
		</wsdl:documentation>
      <wsdl:input message="typens:getBrands_in" />
      <wsdl:output message="typens:getBrands_out" />
    </wsdl:operation>
    <wsdl:operation name="getCampaigns">
      <wsdl:documentation>
		Retrieve all campaigns from DMdelivery.
		Required credentials: 'export' privilege for area 'Campaigns'
		@param login: DMdelivery login object.
		@returns: An array of all campaigns in the DMdelivery environment.
		</wsdl:documentation>
      <wsdl:input message="typens:getCampaigns_in" />
      <wsdl:output message="typens:getCampaigns_out" />
    </wsdl:operation>
    <wsdl:operation name="getSenderAddresses">
      <wsdl:documentation>
		Retrieve all sender addresses from DMdelivery.
		Required credentials: 'export' privilege for area 'Sender addresses'
		@param login: DMdelivery login object.
		@returns: An array of all sender addresses in the DMdelivery environment.
		</wsdl:documentation>
      <wsdl:input message="typens:getSenderAddresses_in" />
      <wsdl:output message="typens:getSenderAddresses_out" />
    </wsdl:operation>
    <wsdl:operation name="getOverallRecipientCampaigns">
      <wsdl:documentation>
		Retrieve all campaigns an overall recipient is member of, and the groups they're member of within those campaigns.
		Required credentials: access to area 'Overall recipients'
		@param login: DMdelivery login object.
		@param recipientID: The database ID of the overall recipient. Can be found via getRecipientsByMatch.
		@returns: An array of campaigns (and groups) the recipient is member of.
		</wsdl:documentation>
      <wsdl:input message="typens:getOverallRecipientCampaigns_in" />
      <wsdl:output message="typens:getOverallRecipientCampaigns_out" />
    </wsdl:operation>
    <wsdl:operation name="getRecipientsByMatch">
      <wsdl:documentation>
		Retrieve recipients that match certain criteria, including their database ID.
		Required credentials: 'export' privilege for area 'Recipients'
		@param login: DMdelivery login object.
		@param recipientMatchData: An array of name/value pairs that represent criteria to match recipients by. Ex: (('name'=&gt;'email', 'value'=&gt;'user@example.com'),('name'=&gt;'firstname', 'value'=&gt;'John')). Wildcards '*' and '?' can be used as well.
		@returns: An array of recipients that match the criteria.
		</wsdl:documentation>
      <wsdl:input message="typens:getRecipientsByMatch_in" />
      <wsdl:output message="typens:getRecipientsByMatch_out" />
    </wsdl:operation>
    <wsdl:operation name="getRecipientFields">
      <wsdl:documentation>
		Retrieve recipient fields for a DMdelivery campaign.
		Required credentials: access to area 'Define fields'
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with. Use 0 to retrieve fields in the overall database.
		@param lang: The language to retrieve fields in.
		@returns: An array of all recipient fields defined for the campaign.
		</wsdl:documentation>
      <wsdl:input message="typens:getRecipientFields_in" />
      <wsdl:output message="typens:getRecipientFields_out" />
    </wsdl:operation>
    <wsdl:operation name="sendSingleMailing">
      <wsdl:documentation>
		Send a mailing to a single recipient. Mainly used for (un)subscribe confirmations etc.
		Of emails sent through this function, no statistics will be registered.
		Do not use this function to send many emails to many different recipients!
		Required credentials: access to area 'Send mailing'
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param mailingID: The database ID of the mailing to send.
		@param recipientID: The database ID of the recipient to send to. Can be found via getRecipientsByMatch.
		@returns: true
		</wsdl:documentation>
      <wsdl:input message="typens:sendSingleMailing_in" />
      <wsdl:output message="typens:sendSingleMailing_out" />
    </wsdl:operation>
    <wsdl:operation name="sendSingleSMS">
      <wsdl:documentation>
		Send an SMS message to a single recipient.
		Required credentials: access to area 'Send SMS mailing'
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param mailingID: The database ID of the SMS mailing to send.
		@param recipientID: The database ID of the recipient to send to. Can be found via getRecipientsByMatch.
		@returns: true
		</wsdl:documentation>
      <wsdl:input message="typens:sendSingleMailing_in" />
      <wsdl:output message="typens:sendSingleMailing_out" />
    </wsdl:operation>
    <wsdl:operation name="sendMailing">
      <wsdl:documentation>
		Bulk-send a mailing.
		Required credentials: access to area 'Send mailing'
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param mailingID: The database ID of the mailing to send.
		@param isTest: Use true for test batch, false for definitive batch.
		@param resultsEmail: The email address of the person who should receive logfile.
		@param groupIDs: Array of (database IDs of) groups to send the mailing to. Provide at least one group.
		@param filterID: The database ID of the filter to use for matching recipients. Use 0 for no filter.
		@param langs: An array of languages to send the mailing to. Ex: ('en', 'nl').
		@param ADprefixDomains: Optional and for China only: A comma-separated string of domains that need an (AD) prefix. For example: *163.com,*126.com,yeah.net,188.com.
		@param callbackUrl: An (optional) url DMdelivery will call after the mailing has been sent.
		       You can use the following variables in this URL, which DMdelivery will replace:
				 - {$DMDcid} The campaign id
				 - {$DMDmid} The mailing id
				 - {$nrRecipients} The number of recipients in the batch
				 - {$nrSent} The number of emails actually sent
		@returns: status 'OK'
		</wsdl:documentation>
      <wsdl:input message="typens:sendMailing_in" />
      <wsdl:output message="typens:sendMailing_out" />
    </wsdl:operation>
    <wsdl:operation name="sendSystemMail">
      <wsdl:documentation>
		Send a system mail to a single recipient, optionally attaching files.
		The filesize of all attachments is limited to 10MB.
		Required credentials: access to area 'Send mailing'
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param mailingID: The database ID of the mailing to send.
		@param recipientID: The database ID of the recipient to send to.
		@param attachments: Comma-separated string of attachment-id's to attach to the email. May be empty.
		@param extraRecipientData: Extra recipient data that can be used in the mailing. This data is not stored in the DMdelivery database.
		@returns: status 'OK'
		</wsdl:documentation>
      <wsdl:input message="typens:sendSystemMail_in" />
      <wsdl:output message="typens:sendSystemMail_out" />
    </wsdl:operation>
    <wsdl:operation name="sendSingleMail">
      <wsdl:documentation>
            Send a bulk mailing to a single recipient, optionally attaching files.
            The filesize of all attachments is limited to 10MB.
            Required credentials: access to area 'Send mailing'
            @param login: DMdelivery login object.
            @param campaignID: The database ID of the campaign to work with.
            @param mailingID: The database ID of the mailing to send.
            @param recipientID: The database ID of the recipient to send to.
            @param attachments: Comma-separated string of attachment-id's to attach to the email. May be empty.
            @param extraRecipientData: Extra recipient data that can be used in the mailing. This data is not stored in the DMdelivery database.
            @returns: status 'OK'
        </wsdl:documentation>
      <wsdl:input message="typens:sendSystemMail_in" />
      <wsdl:output message="typens:sendSystemMail_out" />
    </wsdl:operation>
    <wsdl:operation name="sendMailingScheduled">
      <wsdl:documentation>
		Bulk-send a mailing at a later date/time, optionally using approval procedure.
		Required credentials: access to area 'Send mailing'
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param mailingID: The database ID of the mailing to send.
		@param sendDate: The date/time to send the mailing at, in ISO format. You can only schedule @ :03, :18, :33, :48. Example: '2012-03-29 09:03:00'
		@param isTest: Use true for test batch, false for definitive batch.
		@param resultsEmail: The email address of the person who should receive logfile.
		@param groupIDs: Array of (database IDs of) groups to send the mailing to. Provide at least one group.
		@param filterID: The database ID of the filter to use for matching recipients. Use 0 for no filter.
		@param langs: An array of languages to send the mailing to. Ex: ('en', 'nl').
		@param ADprefixDomains: Optional and for China only: A comma-separated string of domains that need an (AD) prefix. For example: *163.com,*126.com,yeah.net,188.com.
		@param callbackUrl: An (optional) url DMdelivery will call after the mailing has been sent.
		       You can use the following variables in this URL, which DMdelivery will replace:
				 - {$DMDcid} The campaign id
				 - {$DMDmid} The mailing id
				 - {$nrRecipients} The number of recipients in the batch
				 - {$nrSent} The number of emails actually sent
		@param approvalDMDgid: Approval group id. Provide this argument to use approval module.
		@param approvalPeriod: How many hours to wait between approval sendout and definitive sendout.
		@param approvalAck: At least X people must approve the mailing.
		@param $approvalNack: At most X people may disapprove the mailing.
		@returns: status 'OK'
		</wsdl:documentation>
      <wsdl:input message="typens:sendMailingScheduled_in" />
      <wsdl:output message="typens:sendMailingScheduled_out" />
    </wsdl:operation>
    <wsdl:operation name="sendSMS">
      <wsdl:documentation>
		Bulk-send an SMS.
		Required credentials: access to area 'Send SMS mailing'
		When messages, after personalizing, exceed a length of 160 characters, multiple SMS's are sent.
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param mailingID: The database ID of the SMS mailing to send.
		@param isTest: Use true for test batch, false for definitive batch.
		@param resultsEmail: The email address of the person who should receive logfile.
		@param groupIDs: Array of (database IDs of) groups to send the mailing to. Provide at least one group.
		@param filterID: The database ID of the filter to use for matching recipients. Use 0 for no filter.
		@param lang: An array of languages to send the mailing to. Ex: ('en', 'nl').
		@param callbackUrl: An (optional) url DMdelivery will call after the SMS mailing has been sent.
		       You can use the following variables in this URL, which DMdelivery will replace:
				 - {$DMDcid} The campaign id
				 - {$DMDmid} The SMS mailing id
				 - {$nrRecipients} The number of recipients in the batch
				 - {$nrSent} The number of SMS messages actually sent
		@returns: status 'OK'
		</wsdl:documentation>
      <wsdl:input message="typens:sendMailing_in" />
      <wsdl:output message="typens:sendMailing_out" />
    </wsdl:operation>
    <wsdl:operation name="createMailing">
      <wsdl:documentation>
		Create a mailing from scratch, providing raw HTML.
		The plaintext-message is inherited from the campaign's default plaintext message.
		Required credentials: 'insert' privilege for area 'Mailings'
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param mailingName: The name to store the mailing as (must be unique!).
		@param lang: The ISO-lang code for the mailing. Ex: 'nl', 'en', etc.
		@param subject: The default subject of the mailing. Can be overwritten in the HTML to fetch.
		@param fromName: The from name.
		@param senderID: The database ID of the sender address. Use 0 for campaign's default sender address.
		@param html: The mailing's HTML.
		@returns: The database ID of the mailing that was created.
		</wsdl:documentation>
      <wsdl:input message="typens:createMailing_in" />
      <wsdl:output message="typens:createMailing_out" />
    </wsdl:operation>
    <wsdl:operation name="slurpMailing">
      <wsdl:documentation>
		Create a mailing from a URL.
		Required credentials: 'insert' privilege for area 'Mailings'
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param mailingName: The name to store the mailing as (must be unique!).
		@param lang: The ISO-lang code for the mailing. Ex: 'nl', 'en', etc.
		@param subject: The default subject of the mailing. Can be overwritten in the HTML to fetch.
		@param fromName: The from name.
		@param senderID: The database ID of the sender address. Use 0 for campaign's default sender address.
		@param url: The url where the mailing HTML (or a ZIP file) can be fetched from.
		@param checkTimestamp: Whether or not to check the HTML for a &lt;!--DMdeliveryTimestamp--&gt; tag. Ignored for ZIP files.
		@returns: The database ID of the mailing that was created.
		</wsdl:documentation>
      <wsdl:input message="typens:slurpMailing_in" />
      <wsdl:output message="typens:slurpMailing_out" />
    </wsdl:operation>
    <wsdl:operation name="removeRecipientFromGroups">
      <wsdl:documentation>
		Remove a recipient from one or more groups.
		Required credentials: 'update' privilege for area 'Recipients'
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param recipientID: The database ID of the recipient. Can be found via getRecipientsByMatch.
		@param groupIDs: The (database ID of) the groups to remove the recipient from. Provide at least one group.
		@returns: An array of groups (database IDs) the recipient is now a member of.
		</wsdl:documentation>
      <wsdl:input message="typens:removeRecipientFromGroups_in" />
      <wsdl:output message="typens:removeRecipientFromGroups_out" />
    </wsdl:operation>
    <wsdl:operation name="addRecipientToGroups">
      <wsdl:documentation>
		Make a recipient a member of one or more groups.
		Required credentials: 'update' privilege for area 'Recipients'
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param recipientID: The database ID of the recipient.
		@param groupIDs: An array of groups (database IDs) to make the recipients a member of. Provide at least one group.
		@returns: An array of groups (database IDs) the recipient is now a member of.
		</wsdl:documentation>
      <wsdl:input message="typens:addRecipientToGroups_in" />
      <wsdl:output message="typens:addRecipientToGroups_out" />
    </wsdl:operation>
    <wsdl:operation name="moveRecipientsToGroup">
      <wsdl:documentation>
		Move all recipients from one group to another group.
		Required credentials: access to area 'Groups'
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param fromGroupID: The database ID of the source group.
		@param toGroupID: The database ID of the target group.
		@returns: The number of recipients that were moved to the target group.
		</wsdl:documentation>
      <wsdl:input message="typens:moveRecipientsToGroup_in" />
      <wsdl:output message="typens:moveRecipientsToGroup_out" />
    </wsdl:operation>
    <wsdl:operation name="getMailings">
      <wsdl:documentation>
		Retrieve all mailings from a DMdelivery campaign. Mailings are returned from new to old (newest on top).
		Required credentials: 'export' privilege for area 'Mailings'
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param limit: indicates the number of mailings to retrieve. Use 0 to retrieve *all* mailings.
		@param definitiveOnly: Whether or not to only return definitively sent mailings.
		@returns: An array of all mailings in the campaign.
		</wsdl:documentation>
      <wsdl:input message="typens:getMailings_in" />
      <wsdl:output message="typens:getMailings_out" />
    </wsdl:operation>
    <wsdl:operation name="getSMSMailings">
      <wsdl:documentation>
		Retrieve all SMS mailings from a DMdelivery campaign. Mailings are returned from new to old (newest on top).
		Required credentials: 'export' privilege for area 'SMS mailings'
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param limit: indicates the number of SMS mailings to retrieve. Use 0 to retrieve *all* mailings.
		@param definitiveOnly: Whether or not to only return definitively sent SMS mailings.
		@returns: An array of all SMS mailings in the campaign.
		</wsdl:documentation>
      <wsdl:input message="typens:getMailings_in" />
      <wsdl:output message="typens:getSMSMailings_out" />
    </wsdl:operation>
    <wsdl:operation name="getRecipientsFromGroup">
      <wsdl:documentation>
		Retrieve recipients from a specific DMdelivery group.
		Required credentials: 'export' privilege for area 'Recipients'
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param fields: Array of fields to retrieve. Ex: ('email', 'firstname', 'lastname'). Provide at least one field.
		@param inGroupID: Database ID of group the recipients should be member of.
		@param fromDate: Date since when recipient became a member of 'inGroupID'. Leave empty if it doesn't matter, otherwise use 'YYYY-MM-DD' format.
		@param mailingIDs: Array of (database IDs of) mailings the recipients must have been sent. May be empty.
		@param filterID: The database ID of the filter to use for matching recipients. Use 0 for no filter.
		@returns: An array of recipients.
		</wsdl:documentation>
      <wsdl:input message="typens:getRecipientsFromGroup_in" />
      <wsdl:output message="typens:getRecipientsFromGroup_out" />
    </wsdl:operation>
    <wsdl:operation name="getRecipients">
      <wsdl:documentation>
		Retrieve recipients from a DMdelivery campaign.
		Required credentials: 'export' privilege for area 'Recipients'
		Provide at least one inGroupID or mailingID (inGroupIDs and mailingIDs can't both be empty).
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param fields: Array of fields to retrieve. Ex: ('email', 'firstname', 'lastname'). Provide at least one field.
		@param inGroupIDs: Array of (database IDs of) groups the recipients should be member of. May be empty.
		@param notInGroupIDs: Array of (database IDs of) groups the recipients should *not* be member of. May be empty.
		@param mailingIDs: Array of (database IDs of) mailings the recipients must have been sent. May be empty.
		@param filterID: The database ID of the filter to use for matching recipients. Use 0 for no filter.
		@returns: An array of recipients.
		</wsdl:documentation>
      <wsdl:input message="typens:getRecipients_in" />
      <wsdl:output message="typens:getRecipients_out" />
    </wsdl:operation>
    <wsdl:operation name="getRecipientGroups">
      <wsdl:documentation>
		Retrieve the groups a recipient is member of.
		Required credentials: 'export' privilege for area 'Groups'
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param recipientID: The database ID of the recipient. Can be found via getRecipientsByMatch.
		@returns: An array with all (database IDs of) groups the recipient is now a member of.
		</wsdl:documentation>
      <wsdl:input message="typens:getRecipientGroups_in" />
      <wsdl:output message="typens:getRecipientGroups_out" />
    </wsdl:operation>
    <wsdl:operation name="getMailingStatsSummary">
      <wsdl:documentation>
		Retrieve summarized statistics for a mailing sent. Mailing must be sent in order to be able to do this.
		Required credentials: access to area 'Statistics'
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param mailingID: The database ID of the mailing to fetch the summary for.
		@returns: An array containing summary stats info (sent, bounces, unsubscribers, opens, clicks, conversion etc).
		</wsdl:documentation>
      <wsdl:input message="typens:getMailingStatsSummary_in" />
      <wsdl:output message="typens:getMailingStatsSummary_out" />
    </wsdl:operation>
    <wsdl:operation name="getGroups">
      <wsdl:documentation>
		Retrieve all groups from a DMdelivery campaign.
		Required credentials: 'export' privilege for area 'Groups'
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@returns: An array of all groups in the campaign.
		</wsdl:documentation>
      <wsdl:input message="typens:getGroups_in" />
      <wsdl:output message="typens:getGroups_out" />
    </wsdl:operation>
    <wsdl:operation name="getMailingResponse">
      <wsdl:documentation>
		Retrieve the response (what recipients opened/clicked) for a mailing.
		Required credentials: access to area 'Statistics'
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param mailingID: The database ID of the mailing to fetch the response for.
		@param types: Either 'click', 'open', 'trigger' or a combination (comma separated), for example 'click,open' or 'click,trigger'.
		@param field: The name of the recipient field to retrieve, for example 'id' or 'email'.
		@returns: An array containing response info (recipient_id, type [open,click,trigger] and log_date).
		</wsdl:documentation>
      <wsdl:input message="typens:getMailingResponse_in" />
      <wsdl:output message="typens:getMailingResponse_out" />
    </wsdl:operation>
    <wsdl:operation name="getMailingBounce">
      <wsdl:documentation>
		Retrieve the response (what recipients opened/clicked) for a mailing.
		Required credentials: access to area 'Statistics'
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param mailingID: The database ID of the mailing to fetch the response for.
		@param types: Either 'hard', 'soft' or a combination (comma separated), for example 'hard,soft'.
		@param field: The name of the recipient field to retrieve, for example 'id' or 'email'.
        @param date: The date in the past you wish to retrieve bounces for.
		@returns: An array containing response info (recipient_id, type [hard,soft] and log_date).
		</wsdl:documentation>
      <wsdl:input message="typens:getMailingBounce_in" />
      <wsdl:output message="typens:getMailingBounce_out" />
    </wsdl:operation>
    <wsdl:operation name="deleteMailing">
      <wsdl:documentation>
		Delete a mailing from a campaign.
		Required credentials: 'delete' privilege for area 'Mailings'
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param mailingID: The database ID of the mailing to delete.
		@returns: 'OK' or 'ERROR'
		</wsdl:documentation>
      <wsdl:input message="typens:deleteMailing_in" />
      <wsdl:output message="typens:deleteMailing_out" />
    </wsdl:operation>
    <wsdl:operation name="addGroup">
      <wsdl:documentation>
		Add a new group to this DMdelivery campaign.
		Required credentials: 'insert' privilege for area 'Groups'
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param group: The characteristics of the group to add.
		@returns: The database ID of the newly created group.
		</wsdl:documentation>
      <wsdl:input message="typens:addGroup_in" />
      <wsdl:output message="typens:addGroup_out" />
    </wsdl:operation>
    <wsdl:operation name="flushGroup">
      <wsdl:documentation>
		Flush all recipients from a recipient group, keep the group.
		The recipients are 'disconnected' from the group, not physically deleted.
		Afterwards, the group will still exist, but contains no recipients anymore.
		Required credentials: 'delete' privilege for area 'Groups'
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param groupID: The database ID of the group to delete.
		@returns: Number of recipients actually flushed.
		</wsdl:documentation>
      <wsdl:input message="typens:flushGroup_in" />
      <wsdl:output message="typens:flushGroup_out" />
    </wsdl:operation>
    <wsdl:operation name="deleteGroup">
      <wsdl:documentation>
		Flush all recipients from a recipient group, then delete the group.
		The recipients are 'disconnected' from the group, not physically deleted.
		Afterwards, the group will no longer exist.
		Required credentials: 'delete' privilege for area 'Groups'
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param groupID: The database ID of the group to delete.
		@returns: Number of groups (0 or 1) actually deleted.
		</wsdl:documentation>
      <wsdl:input message="typens:deleteGroup_in" />
      <wsdl:output message="typens:deleteGroup_out" />
    </wsdl:operation>
    <wsdl:operation name="addRecipient">
      <wsdl:documentation>
		Add a new recipient to a DMdelivery campaign.
		Required credentials: 'insert' privilege for area 'Recipients'
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param groupIDs: An array of groups (database IDs) to make the recipient a member of. Provide at least one group. If this array *only* contains the ID of the Opt-in group (60), *and* this is a non-existing recipient, the opt-in confirmation email will be sent to the recipient.
		@param recipientData: An associative array (key: name of field, value: value of field) containing recipient data.
		@param addDuplisToGroup: Whether or not to add this recipient to the groups, when the recipient is in the database already.
		@param overwrite: In case the recipient already exists, whether or not to overwrite the known recipient data with the new data provided.
		@returns: The database ID of the newly created recipient.
		</wsdl:documentation>
      <wsdl:input message="typens:addRecipient_in" />
      <wsdl:output message="typens:addRecipient_out" />
    </wsdl:operation>
    <wsdl:operation name="addRecipientAttachment">
      <wsdl:documentation>
		Upload a recipient-specific attachment to DMdelivery.
		The file will be scanned for viruses, and may not be larger than 5MB.
		Required credentials: 'insert' privilege for area 'Mailings',
							  'insert' privilege for area 'Recipients'.
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param mailingID: The database ID of the mailing to attach this file to.
		@param recipientID: The database ID of the recipient to send this file to.
		@param fileName: The name of the file.
		@param fileMD5: The md5 hash of the file.
		@param fileData: The actual file, base64 encoded.
		@returns: A unique ID (a 14-character string) for this attachment.
		</wsdl:documentation>
      <wsdl:input message="typens:addRecipientAttachment_in" />
      <wsdl:output message="typens:addRecipientAttachment_out" />
    </wsdl:operation>
    <wsdl:operation name="addMailingAttachment">
      <wsdl:documentation>
		Upload a mailing-specific attachment to DMdelivery.
		The file will be scanned for viruses, and may not be larger than 5MB.
		Required credentials: 'insert' privilege for area 'Mailings',
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param mailingID: The database ID of the mailing to attach this file to.
		@param fileName: The name of the file.
		@param fileMD5: The md5 hash of the file.
		@param fileData: The actual file, base64 encoded.
		@returns: A unique ID (a 14-character string) for this attachment.
		</wsdl:documentation>
      <wsdl:input message="typens:addMailingAttachment_in" />
      <wsdl:output message="typens:addMailingAttachment_out" />
    </wsdl:operation>
    <wsdl:operation name="addNotification">
      <wsdl:documentation>
            Add a notification to the dashboard of DMdelivery.
            Required credentials: a valid user, no special privileges are required.
            @param login: DMdelivery login object.
            @param title: A string with the title of the notification.
            @param body: A string with the body of the notification.
            @param severity: An integer from 0 to 7, where:
                0 = Emergency
                1 = Alert
                2 = Critical
                3 = Error
                4 = Warning
                5 = Notice
                6 = Informational
                7 = Debug
            @param source: A string identifier of the notification source.
            @param expireDate: A datetime string on which the notification expires.
            @returns: A unique ID (integer) for the new notification.
        </wsdl:documentation>
      <wsdl:input message="typens:addNotification_in" />
      <wsdl:output message="typens:addNotification_out" />
    </wsdl:operation>
    <wsdl:operation name="deleteMailingAttachments">
      <wsdl:documentation>
		Delete mailing-specific attachments, by ID.
		Required credentials: 'delete' privilege for area 'Mailings',
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param mailingID: The database ID of the mailing to attach this file to.
		@param attachmentIDs: The IDs (comma separated string) of the attachments to delete.
		@returns: 'OK'
		</wsdl:documentation>
      <wsdl:input message="typens:deleteMailingAttachments_in" />
      <wsdl:output message="typens:deleteMailingAttachments_out" />
    </wsdl:operation>
    <wsdl:operation name="getMailingAttachmentIDs">
      <wsdl:documentation>
		Retrieve the ID's of all attachments available for a mailing (uploaded via addMailingAttachment).
		Required credentials: access to area 'Mailings'
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param mailingID: The database ID of the mailing to attach this file to.
		@returns: A comma-separated list of attachment-ID's (of type string).
		</wsdl:documentation>
      <wsdl:input message="typens:getMailingAttachmentIDs_in" />
      <wsdl:output message="typens:getMailingAttachmentIDs_out" />
    </wsdl:operation>
    <wsdl:operation name="addRecipients">
      <wsdl:documentation>
		Add multiple new recipients to DMdelivery (max 1000 at once).
		Required credentials: 'insert' privilege for area 'Recipients'
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param groupIDs: An array of groups (database IDs) to make the recipients a member of. Provide at least one group.
		@param recipientDatas: An array of associative arrays (key: name of field, value: value of field) containing recipient data.
		@param addDuplisToGroup: Whether or not to add this recipient to the groups, when the recipient is in the database already.
		@param overwrite: In case a recipient already exists, whether or not to overwrite the known recipient data with the new data provided.
		@returns: Complex datatype, containing all successfully inserted records (including the ID assigned by DMdelivery), duplicates and/or errors.
		</wsdl:documentation>
      <wsdl:input message="typens:addRecipients_in" />
      <wsdl:output message="typens:addRecipients_out" />
    </wsdl:operation>
    <wsdl:operation name="addRecipientsSendMailing">
      <wsdl:documentation>
		Import recipients (max 1000 at once), while sending a (definitive) mailing to them.
		Required credentials: 'insert' privilege for area 'Recipients' AND access to area 'Send mailing'
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param mailingID: The database ID of the mailing to send.
		@param groupIDs: An array of groups (database IDs) to make the recipients a member of. Provide at least one group.
		@param recipientDatas: An array of associative arrays (key: name of field, value: value of field) containing recipient data.
		@param addDuplisToGroup: Whether or not to add this recipient to the groups, when the recipient is in the database already.
		@param overwrite: In case a recipient already exists, whether or not to overwrite the known recipient data with the new data provided.
		@returns: Complex datatype, containing all duplicates and/or errors.
		</wsdl:documentation>
      <wsdl:input message="typens:addRecipientsSendMailing_in" />
      <wsdl:output message="typens:addRecipientsSendMailing_out" />
    </wsdl:operation>
    <wsdl:operation name="addRecipientsSendSMS">
      <wsdl:documentation>
		Import recipients (max 1000 at once), while sending a (definitive) SMS to them.
		Required credentials: 'insert' privilege for area 'Recipients' AND access to area 'Send mailing'
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param SMSmailingID: The database ID of the SMS mailing to send.
		@param groupIDs: An array of groups (database IDs) to make the recipients a member of. Provide at least one group.
		@param recipientDatas: An array of associative arrays (key: name of field, value: value of field) containing recipient data.
		@param addDuplisToGroup: Whether or not to add this recipient to the groups, when the recipient is in the database already.
		@param overwrite: In case a recipient already exists, whether or not to overwrite the known recipient data with the new data provided.
		@returns: Complex datatype, containing all duplicates and/or errors.
		</wsdl:documentation>
      <wsdl:input message="typens:addRecipientsSendSMS_in" />
      <wsdl:output message="typens:addRecipientsSendSMS_out" />
    </wsdl:operation>
    <wsdl:operation name="importRemoteCSV">
      <wsdl:documentation>
		Import a remotely located CSV file, containing recipient info, into DMdelivery.
		Supports http, https, ftp, sftp, ftps and scp protocols.
		Required credentials: 'import' privilege for area 'Recipients'
		Errors and Duplicates are uploaded back to the same location the CSV was downloaded from.
		For example, if this is the CSV file:
		- ftp://username:password@somewhere.server.com:80/incoming/recipients.csv
		Then errors and duplicates will be available here when the import has finished:
		- ftp://username:password@somewhere.server.com:80/incoming/recipients.csv.errors
		- ftp://username:password@somewhere.server.com:80/incoming/recipients.csv.duplis
		The 'callbackUrl' argument is used to let you know when the import is finished.
		This can be an email address: An email is sent to this address when import is finished.
		This can be a URL: The URL is fetched when import is finished. The URL may contain the following
		   placeholders: {$DMDcid}, {$nrLines}, {$nrDuplicates} and {$nrErrors}

		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param groupID: The ID of the group to import the recipients into.
		@param csvURL: The URL of the CSV file. Examples:
		- http://username:password@somewhere.server.com:80/recipients.csv
		- ftp://username:password@somewhere.server.com/incoming/recipients.csv
		- sftp://username:password@somewhere.server.com/root/csvs/recipients.csv
		@param csvCharset: The character set of the CSV file. For example: utf-8, iso-8859-1, gb18030
		@param csvFieldSep: The field separator character used in the CSV file.
		@param csvEnclosure: The enclosure character used in the CSV file.
		@param addDuplisToGroup: Whether or not to add this recipient to the groups, when the recipient is in the database already.
		@param overwrite: In case a recipient already exists, whether or not to overwrite the known recipient data with the new data provided.
		@param callbackUrl: Either an email address or a URL. Will be emailed/called when import is done.
		@returns: 'OK', when remote file could be found or 'ERROR' if not.
		</wsdl:documentation>
      <wsdl:input message="typens:importRemoteCSV_in" />
      <wsdl:output message="typens:importRemoteCSV_out" />
    </wsdl:operation>
    <wsdl:operation name="importRemoteCSVSendMailing">
      <wsdl:documentation>
		Import a remotely located CSV file, containing recipient info, into DMdelivery.
		Send a mailing to this group (optionally applying filter/language) when import is finished.
		Supports http, https, ftp, sftp, ftps and scp protocols.
		Required credentials: 'import' privilege for area 'Recipients' and access to area 'Send mailing'
		Errors and Duplicates are uploaded back to the same location the CSV was downloaded from.
		For example, if this is the CSV file:
		- ftp://username:password@somewhere.server.com:80/incoming/recipients.csv
		Then errors and duplicates will be available here when the import has finished:
		- ftp://username:password@somewhere.server.com:80/incoming/recipients.csv.errors
		- ftp://username:password@somewhere.server.com:80/incoming/recipients.csv.duplis

		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param groupID: The ID of the group to import the recipients into.
		@param csvURL: The URL of the CSV file. Examples:
		- http://username:password@somewhere.server.com:80/recipients.csv
		- ftp://username:password@somewhere.server.com/incoming/recipients.csv
		- sftp://username:password@somewhere.server.com/root/csvs/recipients.csv
		@param csvCharset: The character set of the CSV file. For example: utf-8, iso-8859-1, gb18030
		@param csvFieldSep: The field separator character used in the CSV file.
		@param csvEnclosure: The enclosure character used in the CSV file.
		@param addDuplisToGroup: Whether or not to add this recipient to the groups, when the recipient is in the database already.
		@param overwrite: In case a recipient already exists, whether or not to overwrite the known recipient data with the new data provided.
		@param mailingID: The database ID of the mailing to send.
		@param resultsEmail: The email address of the person who should receive logfile.
		@param filterID: The database ID of the filter to use for matching recipients. Use 0 for no filter.
		@param langs: An array of languages to send the mailing to. Ex: ('en', 'nl').
		@param ADprefixDomains: Optional and for China only: A comma-separated string of domains that need an (AD) prefix. For example: *163.com,*126.com,yeah.net,188.com.
		@param callbackUrl: An (optional) url DMdelivery will call after the mailing has been sent.
		       You can use the following variables in this URL, which DMdelivery will replace:
				 - {$DMDcid} The campaign id
				 - {$DMDmid} The mailing id
				 - {$nrRecipients} The number of recipients in the batch
				 - {$nrSent} The number of emails actually sent
		@returns: status 'OK'
		</wsdl:documentation>
      <wsdl:input message="typens:importRemoteCSVSendMailing_in" />
      <wsdl:output message="typens:importRemoteCSVSendMailing_out" />
    </wsdl:operation>
    <wsdl:operation name="getEvents">
      <wsdl:documentation>
		Get all events for a specified campaign
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param eventID: Optional eventID parameter
		@returns: Complex datatype, containing all duplicates and/or errors.
		</wsdl:documentation>
      <wsdl:input message="typens:getEvents_in" />
      <wsdl:output message="typens:getEvents_out" />
    </wsdl:operation>
    <wsdl:operation name="addEventAttendee">
      <wsdl:documentation>
		Add or update an attendee for a specified event
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param eventID: The eventID of the event the attendee should be added to.
		@param recipientData: An array of name/value pairs, representing recipient data.
		@param status: Boolean flag to set weather the given attendee is attending the event.
		@returns: Returns original attendee data with extra fields eventResponse and eventMessage.
		</wsdl:documentation>
      <wsdl:input message="typens:addEventAttendee_in" />
      <wsdl:output message="typens:addEventAttendee_out" />
    </wsdl:operation>
    <wsdl:operation name="getEventAttendees">
      <wsdl:documentation>
		Get all attendees for an event
		@param login: DMdelivery login object.
		@param campaignID: The database ID of the campaign to work with.
		@param eventID: The eventID of the event the attendee should be added to.
		@returns: Multidimensional array with recipient data formatted as name/value pairs.
		</wsdl:documentation>
      <wsdl:input message="typens:getEventAttendees_in" />
      <wsdl:output message="typens:getEventAttendees_out" />
    </wsdl:operation>
    <wsdl:operation name="getFilters">
      <wsdl:documentation>
            Get the filters available in a campaign.
            @param login: DMdelivery login object
            @param campaignID: The database ID of the campaign to work with.
            @returns: Multidimensional array with filter data containing ID and name.
        </wsdl:documentation>
      <wsdl:input message="typens:getFilters_in" />
      <wsdl:output message="typens:getFilters_out" />
    </wsdl:operation>
    <wsdl:operation name="createSenderAddress">
      <wsdl:documentation>
		Create a sender address, according to the "My own sender address" scenario.
		CAUTION: This function is disabled by default. Please contact Web Power to enable it.
		@param login: DMdelivery login object.
		@param fromEmail: The 'from' email address.
		@returns: The database ID of the newly created recipient.
		</wsdl:documentation>
      <wsdl:input message="typens:createSenderAddress_in" />
      <wsdl:output message="typens:createSenderAddress_out" />
    </wsdl:operation>
    <wsdl:operation name="createCampaign">
      <wsdl:documentation>
		Create a new campaign.
		CAUTION: This function is disabled by default. Please contact Web Power to enable it.
		@param login: DMdelivery login object.
		@param brandID: The ID of the brand to link the new campaign to. Set to 0 to don't use a brand.
		@param name: The name of the new campaign.
		@param defaultSenderName: The default sender name of mailings sent from this campaign.
		@param defaultSenderAddress: The ID of the default sender address for this campaign.
		@param defaultReplyAddress: The ID of the default reply address for this campaign. Set to 0 to use the sender address.
		@param langs: The languages for this campaign, as a comma separated list (en,cn,nl).
		@param isOverall: Whether or not this is an overall campaign.
		@param conversionPoints: Comma-separated list of conversion points to define.
		@param localDomain: What local domain to use. Use '' (empty string) for default.
		@param excludeLists: What exclude lists to apply. Options: 'license spamcomplaint', 'license hardbounce'. Provide a comma-separated list.
		@returns: The database ID of the newly created campaign.
		</wsdl:documentation>
      <wsdl:input message="typens:createCampaign_in" />
      <wsdl:output message="typens:createCampaign_out" />
    </wsdl:operation>
    <wsdl:operation name="copyFieldDefinition">
      <wsdl:documentation>
		Copy the recipient fields definition from one (template) campaign into another (empty) campaign.
		The target campaign must not be overall, and may not contain any recipients yet.
		CAUTION: This function is disabled by default. Please contact Web Power to enable it.
		@param login: DMdelivery login object.
		@param srcCampaignID: The ID of the source campaign, to copy field definition from.
		@param dstCampaignID: The ID of the destination campaign, to copy the field definition to.
		@returns: The database ID of the destination campaign.
		</wsdl:documentation>
      <wsdl:input message="typens:copyFieldDefinition_in" />
      <wsdl:output message="typens:copyFieldDefinition_out" />
    </wsdl:operation>
    <wsdl:operation name="sendSinglePush">
      <wsdl:documentation>
            Send a push message to the mobile devices running android or iOS of a single recipient.
            CAUTION: This function is only available if push notifications is enabled in DMdelivery.
            @param login: DMdelivery login object.
            @param campaignID: The database ID of the campaign.
            @param mailingID: The database ID of the mailing.
            @param recipientID: The database ID of the recipient.
            @param resultsEmail: The email address of the person who should receive logfile.
            @returns: status OK or Error
        </wsdl:documentation>
      <wsdl:input message="typens:sendSinglePush_in" />
      <wsdl:output message="typens:sendSinglePush_out" />
    </wsdl:operation>
    <wsdl:operation name="sendPushMailing">
      <wsdl:documentation>
            Send messages to mobile devices running android or iOS.
            CAUTION: This function is only available if push notifications is enabled in DMdelivery.
            @param login: DMdelivery login object.
            @param campaignID: The database ID of the campaign.
            @param mailingID: The database ID of the mailing.
            @param groupIDs: The database IDs of groups to send the push mailing to. Provide at least one group.
            @param excludeGroupIDs: The database IDs of groups not to send the push mailing to.
            @param resultsEmail: The email address of the person who should receive logfile.
            @returns: status OK or Error
        </wsdl:documentation>
      <wsdl:input message="typens:sendPushMailing_in" />
      <wsdl:output message="typens:sendPushMailing_out" />
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="DMdeliverySoapAPIBinding" type="typens:DMdeliverySoapAPIPort">
    <soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="rpc" />
    <wsdl:operation name="checkHealth">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addOverallRecipient">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="editOverallRecipient">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="editRecipient">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addOverallRecipientToGroups">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="removeOverallRecipientFromGroups">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getBrands">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getCampaigns">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSenderAddresses">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getOverallRecipientCampaigns">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getRecipientsByMatch">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getRecipientFields">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="sendSingleMailing">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="sendSingleSMS">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="sendMailing">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="sendSystemMail">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="sendSingleMail">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="sendMailingScheduled">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="sendSMS">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="createMailing">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="slurpMailing">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="removeRecipientFromGroups">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addRecipientToGroups">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="moveRecipientsToGroup">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getMailings">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSMSMailings">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getRecipientsFromGroup">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getRecipients">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getRecipientGroups">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getMailingStatsSummary">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getGroups">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getMailingResponse">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getMailingBounce">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="deleteMailing">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addGroup">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="flushGroup">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="deleteGroup">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addRecipient">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addRecipientAttachment">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addMailingAttachment">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addNotification">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="deleteMailingAttachments">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getMailingAttachmentIDs">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addRecipients">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addRecipientsSendMailing">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addRecipientsSendSMS">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="importRemoteCSV">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="importRemoteCSVSendMailing">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getEvents">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addEventAttendee">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getEventAttendees">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getFilters">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="createSenderAddress">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="createCampaign">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="copyFieldDefinition">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="sendSinglePush">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="sendPushMailing">
      <soap:operation soapAction="urn:DMdeliveryAction" />
      <wsdl:input>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://dmdelivery.com/webservice/" />
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="DMdeliverySoapAPI">
    <wsdl:documentation>
	This is the webpower SOAP webservice.

	In order to be able to use this webservice, you need to have a login for webpower. A login consists of a username and a password. Each SOAP call in the webservice needs this username and password for access! Please inquire with the webpower administrator for a login.

        Note: This version of the SOAP webservice is deprecated and will eventually be removed.
        It is recommended to use the latest version of the SOAP webservice.
	</wsdl:documentation>
    <wsdl:port name="DMdeliverySoapAPIPort" binding="typens:DMdeliverySoapAPIBinding">
      <soap:address location="https://advantech-smtp.webpower.asia/x/soap-v4.1/server.php" />
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>