'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace EQWS
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="quoteExitSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class quoteExit
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private isPhaseOutOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InitApprovalFlowOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isApprovedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isRejectedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isInApprovedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getLevelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private toQuotationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TESTOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getQuotationListByCompanyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getQuotationDetailByIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isQuoteExpiredOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getLevelandAppoverListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LogSSOIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isValidSSOOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ApprovalProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getITPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private setITPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isCanRepeatOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateAccountContactQuotationFromSPROperationCompleted As System.Threading.SendOrPostCallback
        
        Private getQuotePageStrCustomerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getOptyIdByQuoteIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsPTDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.SyncStatusOProducts.My.MySettings.Default.SyncStatusOProducts_EQWS_quoteExit
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event isPhaseOutCompleted As isPhaseOutCompletedEventHandler
        
        '''<remarks/>
        Public Event InitApprovalFlowCompleted As InitApprovalFlowCompletedEventHandler
        
        '''<remarks/>
        Public Event isApprovedCompleted As isApprovedCompletedEventHandler
        
        '''<remarks/>
        Public Event isRejectedCompleted As isRejectedCompletedEventHandler
        
        '''<remarks/>
        Public Event isInApprovedCompleted As isInApprovedCompletedEventHandler
        
        '''<remarks/>
        Public Event getLevelCompleted As getLevelCompletedEventHandler
        
        '''<remarks/>
        Public Event toQuotationCompleted As toQuotationCompletedEventHandler
        
        '''<remarks/>
        Public Event TESTCompleted As TESTCompletedEventHandler
        
        '''<remarks/>
        Public Event getQuotationListByCompanyCompleted As getQuotationListByCompanyCompletedEventHandler
        
        '''<remarks/>
        Public Event getQuotationDetailByIdCompleted As getQuotationDetailByIdCompletedEventHandler
        
        '''<remarks/>
        Public Event isQuoteExpiredCompleted As isQuoteExpiredCompletedEventHandler
        
        '''<remarks/>
        Public Event getLevelandAppoverListCompleted As getLevelandAppoverListCompletedEventHandler
        
        '''<remarks/>
        Public Event LogSSOIdCompleted As LogSSOIdCompletedEventHandler
        
        '''<remarks/>
        Public Event isValidSSOCompleted As isValidSSOCompletedEventHandler
        
        '''<remarks/>
        Public Event ApprovalProcessCompleted As ApprovalProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event getITPCompleted As getITPCompletedEventHandler
        
        '''<remarks/>
        Public Event setITPCompleted As setITPCompletedEventHandler
        
        '''<remarks/>
        Public Event isCanRepeatOrderCompleted As isCanRepeatOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateAccountContactQuotationFromSPRCompleted As CreateAccountContactQuotationFromSPRCompletedEventHandler
        
        '''<remarks/>
        Public Event getQuotePageStrCustomerCompleted As getQuotePageStrCustomerCompletedEventHandler
        
        '''<remarks/>
        Public Event getOptyIdByQuoteIdCompleted As getOptyIdByQuoteIdCompletedEventHandler
        
        '''<remarks/>
        Public Event IsPTDCompleted As IsPTDCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isPhaseOut", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isPhaseOut(ByVal pn As String, ByVal org As String) As Boolean
            Dim results() As Object = Me.Invoke("isPhaseOut", New Object() {pn, org})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isPhaseOutAsync(ByVal pn As String, ByVal org As String)
            Me.isPhaseOutAsync(pn, org, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isPhaseOutAsync(ByVal pn As String, ByVal org As String, ByVal userState As Object)
            If (Me.isPhaseOutOperationCompleted Is Nothing) Then
                Me.isPhaseOutOperationCompleted = AddressOf Me.OnisPhaseOutOperationCompleted
            End If
            Me.InvokeAsync("isPhaseOut", New Object() {pn, org}, Me.isPhaseOutOperationCompleted, userState)
        End Sub
        
        Private Sub OnisPhaseOutOperationCompleted(ByVal arg As Object)
            If (Not (Me.isPhaseOutCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isPhaseOutCompleted(Me, New isPhaseOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InitApprovalFlow", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub InitApprovalFlow(ByVal UID As String, ByVal ROWID As String, ByVal ERPID As String, <System.Xml.Serialization.XmlArrayItemAttribute(IsNullable:=false)> ByVal Detail() As struct_GP_Detail)
            Me.Invoke("InitApprovalFlow", New Object() {UID, ROWID, ERPID, Detail})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InitApprovalFlowAsync(ByVal UID As String, ByVal ROWID As String, ByVal ERPID As String, ByVal Detail() As struct_GP_Detail)
            Me.InitApprovalFlowAsync(UID, ROWID, ERPID, Detail, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InitApprovalFlowAsync(ByVal UID As String, ByVal ROWID As String, ByVal ERPID As String, ByVal Detail() As struct_GP_Detail, ByVal userState As Object)
            If (Me.InitApprovalFlowOperationCompleted Is Nothing) Then
                Me.InitApprovalFlowOperationCompleted = AddressOf Me.OnInitApprovalFlowOperationCompleted
            End If
            Me.InvokeAsync("InitApprovalFlow", New Object() {UID, ROWID, ERPID, Detail}, Me.InitApprovalFlowOperationCompleted, userState)
        End Sub
        
        Private Sub OnInitApprovalFlowOperationCompleted(ByVal arg As Object)
            If (Not (Me.InitApprovalFlowCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InitApprovalFlowCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isApproved", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isApproved(ByVal id As String) As Boolean
            Dim results() As Object = Me.Invoke("isApproved", New Object() {id})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isApprovedAsync(ByVal id As String)
            Me.isApprovedAsync(id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isApprovedAsync(ByVal id As String, ByVal userState As Object)
            If (Me.isApprovedOperationCompleted Is Nothing) Then
                Me.isApprovedOperationCompleted = AddressOf Me.OnisApprovedOperationCompleted
            End If
            Me.InvokeAsync("isApproved", New Object() {id}, Me.isApprovedOperationCompleted, userState)
        End Sub
        
        Private Sub OnisApprovedOperationCompleted(ByVal arg As Object)
            If (Not (Me.isApprovedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isApprovedCompleted(Me, New isApprovedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isRejected", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isRejected(ByVal id As String) As Boolean
            Dim results() As Object = Me.Invoke("isRejected", New Object() {id})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isRejectedAsync(ByVal id As String)
            Me.isRejectedAsync(id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isRejectedAsync(ByVal id As String, ByVal userState As Object)
            If (Me.isRejectedOperationCompleted Is Nothing) Then
                Me.isRejectedOperationCompleted = AddressOf Me.OnisRejectedOperationCompleted
            End If
            Me.InvokeAsync("isRejected", New Object() {id}, Me.isRejectedOperationCompleted, userState)
        End Sub
        
        Private Sub OnisRejectedOperationCompleted(ByVal arg As Object)
            If (Not (Me.isRejectedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isRejectedCompleted(Me, New isRejectedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isInApproved", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isInApproved(ByVal id As String) As Boolean
            Dim results() As Object = Me.Invoke("isInApproved", New Object() {id})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isInApprovedAsync(ByVal id As String)
            Me.isInApprovedAsync(id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isInApprovedAsync(ByVal id As String, ByVal userState As Object)
            If (Me.isInApprovedOperationCompleted Is Nothing) Then
                Me.isInApprovedOperationCompleted = AddressOf Me.OnisInApprovedOperationCompleted
            End If
            Me.InvokeAsync("isInApproved", New Object() {id}, Me.isInApprovedOperationCompleted, userState)
        End Sub
        
        Private Sub OnisInApprovedOperationCompleted(ByVal arg As Object)
            If (Not (Me.isInApprovedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isInApprovedCompleted(Me, New isInApprovedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getLevel", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getLevel(ByVal rowid As String, ByVal erpid As String, <System.Xml.Serialization.XmlArrayItemAttribute(IsNullable:=false)> ByVal Detail() As struct_GP_Detail) As Integer
            Dim results() As Object = Me.Invoke("getLevel", New Object() {rowid, erpid, Detail})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getLevelAsync(ByVal rowid As String, ByVal erpid As String, ByVal Detail() As struct_GP_Detail)
            Me.getLevelAsync(rowid, erpid, Detail, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getLevelAsync(ByVal rowid As String, ByVal erpid As String, ByVal Detail() As struct_GP_Detail, ByVal userState As Object)
            If (Me.getLevelOperationCompleted Is Nothing) Then
                Me.getLevelOperationCompleted = AddressOf Me.OngetLevelOperationCompleted
            End If
            Me.InvokeAsync("getLevel", New Object() {rowid, erpid, Detail}, Me.getLevelOperationCompleted, userState)
        End Sub
        
        Private Sub OngetLevelOperationCompleted(ByVal arg As Object)
            If (Not (Me.getLevelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getLevelCompleted(Me, New getLevelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/toQuotation", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function toQuotation(ByVal erpid As String, ByVal createdBy As String, ByVal Desc As String, ByVal comment As String, ByVal isRepeatedOrder As Integer, ByVal org As String, <System.Xml.Serialization.XmlArrayItemAttribute(IsNullable:=false)> ByVal Detail() As struct_Quote_Detail) As String
            Dim results() As Object = Me.Invoke("toQuotation", New Object() {erpid, createdBy, Desc, comment, isRepeatedOrder, org, Detail})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub toQuotationAsync(ByVal erpid As String, ByVal createdBy As String, ByVal Desc As String, ByVal comment As String, ByVal isRepeatedOrder As Integer, ByVal org As String, ByVal Detail() As struct_Quote_Detail)
            Me.toQuotationAsync(erpid, createdBy, Desc, comment, isRepeatedOrder, org, Detail, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub toQuotationAsync(ByVal erpid As String, ByVal createdBy As String, ByVal Desc As String, ByVal comment As String, ByVal isRepeatedOrder As Integer, ByVal org As String, ByVal Detail() As struct_Quote_Detail, ByVal userState As Object)
            If (Me.toQuotationOperationCompleted Is Nothing) Then
                Me.toQuotationOperationCompleted = AddressOf Me.OntoQuotationOperationCompleted
            End If
            Me.InvokeAsync("toQuotation", New Object() {erpid, createdBy, Desc, comment, isRepeatedOrder, org, Detail}, Me.toQuotationOperationCompleted, userState)
        End Sub
        
        Private Sub OntoQuotationOperationCompleted(ByVal arg As Object)
            If (Not (Me.toQuotationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent toQuotationCompleted(Me, New toQuotationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TEST", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TEST() As String
            Dim results() As Object = Me.Invoke("TEST", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TESTAsync()
            Me.TESTAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TESTAsync(ByVal userState As Object)
            If (Me.TESTOperationCompleted Is Nothing) Then
                Me.TESTOperationCompleted = AddressOf Me.OnTESTOperationCompleted
            End If
            Me.InvokeAsync("TEST", New Object(-1) {}, Me.TESTOperationCompleted, userState)
        End Sub
        
        Private Sub OnTESTOperationCompleted(ByVal arg As Object)
            If (Not (Me.TESTCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TESTCompleted(Me, New TESTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getQuotationListByCompany", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub getQuotationListByCompany(ByVal ERPID As String, ByRef ds As System.Data.DataSet)
            Dim results() As Object = Me.Invoke("getQuotationListByCompany", New Object() {ERPID, ds})
            ds = CType(results(0),System.Data.DataSet)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getQuotationListByCompanyAsync(ByVal ERPID As String, ByVal ds As System.Data.DataSet)
            Me.getQuotationListByCompanyAsync(ERPID, ds, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getQuotationListByCompanyAsync(ByVal ERPID As String, ByVal ds As System.Data.DataSet, ByVal userState As Object)
            If (Me.getQuotationListByCompanyOperationCompleted Is Nothing) Then
                Me.getQuotationListByCompanyOperationCompleted = AddressOf Me.OngetQuotationListByCompanyOperationCompleted
            End If
            Me.InvokeAsync("getQuotationListByCompany", New Object() {ERPID, ds}, Me.getQuotationListByCompanyOperationCompleted, userState)
        End Sub
        
        Private Sub OngetQuotationListByCompanyOperationCompleted(ByVal arg As Object)
            If (Not (Me.getQuotationListByCompanyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getQuotationListByCompanyCompleted(Me, New getQuotationListByCompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getQuotationDetailById", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub getQuotationDetailById(ByVal quoteId As String, ByRef ds As System.Data.DataSet)
            Dim results() As Object = Me.Invoke("getQuotationDetailById", New Object() {quoteId, ds})
            ds = CType(results(0),System.Data.DataSet)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getQuotationDetailByIdAsync(ByVal quoteId As String, ByVal ds As System.Data.DataSet)
            Me.getQuotationDetailByIdAsync(quoteId, ds, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getQuotationDetailByIdAsync(ByVal quoteId As String, ByVal ds As System.Data.DataSet, ByVal userState As Object)
            If (Me.getQuotationDetailByIdOperationCompleted Is Nothing) Then
                Me.getQuotationDetailByIdOperationCompleted = AddressOf Me.OngetQuotationDetailByIdOperationCompleted
            End If
            Me.InvokeAsync("getQuotationDetailById", New Object() {quoteId, ds}, Me.getQuotationDetailByIdOperationCompleted, userState)
        End Sub
        
        Private Sub OngetQuotationDetailByIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.getQuotationDetailByIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getQuotationDetailByIdCompleted(Me, New getQuotationDetailByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isQuoteExpired", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isQuoteExpired(ByVal quoteId As String) As Boolean
            Dim results() As Object = Me.Invoke("isQuoteExpired", New Object() {quoteId})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isQuoteExpiredAsync(ByVal quoteId As String)
            Me.isQuoteExpiredAsync(quoteId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isQuoteExpiredAsync(ByVal quoteId As String, ByVal userState As Object)
            If (Me.isQuoteExpiredOperationCompleted Is Nothing) Then
                Me.isQuoteExpiredOperationCompleted = AddressOf Me.OnisQuoteExpiredOperationCompleted
            End If
            Me.InvokeAsync("isQuoteExpired", New Object() {quoteId}, Me.isQuoteExpiredOperationCompleted, userState)
        End Sub
        
        Private Sub OnisQuoteExpiredOperationCompleted(ByVal arg As Object)
            If (Not (Me.isQuoteExpiredCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isQuoteExpiredCompleted(Me, New isQuoteExpiredCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getLevelandAppoverList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getLevelandAppoverList(ByVal rowId As String, ByVal erpid As String, ByRef GPLevel_and_Approver As System.Data.DataTable) As String
            Dim results() As Object = Me.Invoke("getLevelandAppoverList", New Object() {rowId, erpid, GPLevel_and_Approver})
            GPLevel_and_Approver = CType(results(1),System.Data.DataTable)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getLevelandAppoverListAsync(ByVal rowId As String, ByVal erpid As String, ByVal GPLevel_and_Approver As System.Data.DataTable)
            Me.getLevelandAppoverListAsync(rowId, erpid, GPLevel_and_Approver, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getLevelandAppoverListAsync(ByVal rowId As String, ByVal erpid As String, ByVal GPLevel_and_Approver As System.Data.DataTable, ByVal userState As Object)
            If (Me.getLevelandAppoverListOperationCompleted Is Nothing) Then
                Me.getLevelandAppoverListOperationCompleted = AddressOf Me.OngetLevelandAppoverListOperationCompleted
            End If
            Me.InvokeAsync("getLevelandAppoverList", New Object() {rowId, erpid, GPLevel_and_Approver}, Me.getLevelandAppoverListOperationCompleted, userState)
        End Sub
        
        Private Sub OngetLevelandAppoverListOperationCompleted(ByVal arg As Object)
            If (Not (Me.getLevelandAppoverListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getLevelandAppoverListCompleted(Me, New getLevelandAppoverListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LogSSOId", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub LogSSOId(ByVal tempId As String, ByVal userId As String, ByVal PW As String, ByVal IP As String)
            Me.Invoke("LogSSOId", New Object() {tempId, userId, PW, IP})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LogSSOIdAsync(ByVal tempId As String, ByVal userId As String, ByVal PW As String, ByVal IP As String)
            Me.LogSSOIdAsync(tempId, userId, PW, IP, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LogSSOIdAsync(ByVal tempId As String, ByVal userId As String, ByVal PW As String, ByVal IP As String, ByVal userState As Object)
            If (Me.LogSSOIdOperationCompleted Is Nothing) Then
                Me.LogSSOIdOperationCompleted = AddressOf Me.OnLogSSOIdOperationCompleted
            End If
            Me.InvokeAsync("LogSSOId", New Object() {tempId, userId, PW, IP}, Me.LogSSOIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnLogSSOIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.LogSSOIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LogSSOIdCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isValidSSO", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isValidSSO(ByVal tempId As String, ByVal userId As String) As Boolean
            Dim results() As Object = Me.Invoke("isValidSSO", New Object() {tempId, userId})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isValidSSOAsync(ByVal tempId As String, ByVal userId As String)
            Me.isValidSSOAsync(tempId, userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isValidSSOAsync(ByVal tempId As String, ByVal userId As String, ByVal userState As Object)
            If (Me.isValidSSOOperationCompleted Is Nothing) Then
                Me.isValidSSOOperationCompleted = AddressOf Me.OnisValidSSOOperationCompleted
            End If
            Me.InvokeAsync("isValidSSO", New Object() {tempId, userId}, Me.isValidSSOOperationCompleted, userState)
        End Sub
        
        Private Sub OnisValidSSOOperationCompleted(ByVal arg As Object)
            If (Not (Me.isValidSSOCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isValidSSOCompleted(Me, New isValidSSOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ApprovalProcess", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ApprovalProcess(ByVal UId As String, ByVal ACId As String)
            Me.Invoke("ApprovalProcess", New Object() {UId, ACId})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ApprovalProcessAsync(ByVal UId As String, ByVal ACId As String)
            Me.ApprovalProcessAsync(UId, ACId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ApprovalProcessAsync(ByVal UId As String, ByVal ACId As String, ByVal userState As Object)
            If (Me.ApprovalProcessOperationCompleted Is Nothing) Then
                Me.ApprovalProcessOperationCompleted = AddressOf Me.OnApprovalProcessOperationCompleted
            End If
            Me.InvokeAsync("ApprovalProcess", New Object() {UId, ACId}, Me.ApprovalProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnApprovalProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.ApprovalProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ApprovalProcessCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getITP", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getITP(ByVal ORGId As String, ByVal PARTNO As String, ByVal CURR As String, ByVal companyId As String) As Decimal
            Dim results() As Object = Me.Invoke("getITP", New Object() {ORGId, PARTNO, CURR, companyId})
            Return CType(results(0),Decimal)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getITPAsync(ByVal ORGId As String, ByVal PARTNO As String, ByVal CURR As String, ByVal companyId As String)
            Me.getITPAsync(ORGId, PARTNO, CURR, companyId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getITPAsync(ByVal ORGId As String, ByVal PARTNO As String, ByVal CURR As String, ByVal companyId As String, ByVal userState As Object)
            If (Me.getITPOperationCompleted Is Nothing) Then
                Me.getITPOperationCompleted = AddressOf Me.OngetITPOperationCompleted
            End If
            Me.InvokeAsync("getITP", New Object() {ORGId, PARTNO, CURR, companyId}, Me.getITPOperationCompleted, userState)
        End Sub
        
        Private Sub OngetITPOperationCompleted(ByVal arg As Object)
            If (Not (Me.getITPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getITPCompleted(Me, New getITPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/setITP", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub setITP(ByVal ORGId As String, ByVal PARTNO As String, ByVal CURR As String, ByVal ITP As Decimal)
            Me.Invoke("setITP", New Object() {ORGId, PARTNO, CURR, ITP})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub setITPAsync(ByVal ORGId As String, ByVal PARTNO As String, ByVal CURR As String, ByVal ITP As Decimal)
            Me.setITPAsync(ORGId, PARTNO, CURR, ITP, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub setITPAsync(ByVal ORGId As String, ByVal PARTNO As String, ByVal CURR As String, ByVal ITP As Decimal, ByVal userState As Object)
            If (Me.setITPOperationCompleted Is Nothing) Then
                Me.setITPOperationCompleted = AddressOf Me.OnsetITPOperationCompleted
            End If
            Me.InvokeAsync("setITP", New Object() {ORGId, PARTNO, CURR, ITP}, Me.setITPOperationCompleted, userState)
        End Sub
        
        Private Sub OnsetITPOperationCompleted(ByVal arg As Object)
            If (Not (Me.setITPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent setITPCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isCanRepeatOrder", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isCanRepeatOrder(ByVal rowID As String) As Boolean
            Dim results() As Object = Me.Invoke("isCanRepeatOrder", New Object() {rowID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isCanRepeatOrderAsync(ByVal rowID As String)
            Me.isCanRepeatOrderAsync(rowID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isCanRepeatOrderAsync(ByVal rowID As String, ByVal userState As Object)
            If (Me.isCanRepeatOrderOperationCompleted Is Nothing) Then
                Me.isCanRepeatOrderOperationCompleted = AddressOf Me.OnisCanRepeatOrderOperationCompleted
            End If
            Me.InvokeAsync("isCanRepeatOrder", New Object() {rowID}, Me.isCanRepeatOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnisCanRepeatOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.isCanRepeatOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isCanRepeatOrderCompleted(Me, New isCanRepeatOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateAccountContactQuotationFromSPR", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CreateAccountContactQuotationFromSPR()
            Me.Invoke("CreateAccountContactQuotationFromSPR", New Object(-1) {})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateAccountContactQuotationFromSPRAsync()
            Me.CreateAccountContactQuotationFromSPRAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateAccountContactQuotationFromSPRAsync(ByVal userState As Object)
            If (Me.CreateAccountContactQuotationFromSPROperationCompleted Is Nothing) Then
                Me.CreateAccountContactQuotationFromSPROperationCompleted = AddressOf Me.OnCreateAccountContactQuotationFromSPROperationCompleted
            End If
            Me.InvokeAsync("CreateAccountContactQuotationFromSPR", New Object(-1) {}, Me.CreateAccountContactQuotationFromSPROperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateAccountContactQuotationFromSPROperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateAccountContactQuotationFromSPRCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateAccountContactQuotationFromSPRCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getQuotePageStrCustomer", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getQuotePageStrCustomer(ByVal UID As String) As String
            Dim results() As Object = Me.Invoke("getQuotePageStrCustomer", New Object() {UID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getQuotePageStrCustomerAsync(ByVal UID As String)
            Me.getQuotePageStrCustomerAsync(UID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getQuotePageStrCustomerAsync(ByVal UID As String, ByVal userState As Object)
            If (Me.getQuotePageStrCustomerOperationCompleted Is Nothing) Then
                Me.getQuotePageStrCustomerOperationCompleted = AddressOf Me.OngetQuotePageStrCustomerOperationCompleted
            End If
            Me.InvokeAsync("getQuotePageStrCustomer", New Object() {UID}, Me.getQuotePageStrCustomerOperationCompleted, userState)
        End Sub
        
        Private Sub OngetQuotePageStrCustomerOperationCompleted(ByVal arg As Object)
            If (Not (Me.getQuotePageStrCustomerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getQuotePageStrCustomerCompleted(Me, New getQuotePageStrCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getOptyIdByQuoteId", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getOptyIdByQuoteId(ByVal quoteId As String) As String
            Dim results() As Object = Me.Invoke("getOptyIdByQuoteId", New Object() {quoteId})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getOptyIdByQuoteIdAsync(ByVal quoteId As String)
            Me.getOptyIdByQuoteIdAsync(quoteId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getOptyIdByQuoteIdAsync(ByVal quoteId As String, ByVal userState As Object)
            If (Me.getOptyIdByQuoteIdOperationCompleted Is Nothing) Then
                Me.getOptyIdByQuoteIdOperationCompleted = AddressOf Me.OngetOptyIdByQuoteIdOperationCompleted
            End If
            Me.InvokeAsync("getOptyIdByQuoteId", New Object() {quoteId}, Me.getOptyIdByQuoteIdOperationCompleted, userState)
        End Sub
        
        Private Sub OngetOptyIdByQuoteIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.getOptyIdByQuoteIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getOptyIdByQuoteIdCompleted(Me, New getOptyIdByQuoteIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsPTD", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsPTD(ByVal PartNo As String) As Boolean
            Dim results() As Object = Me.Invoke("IsPTD", New Object() {PartNo})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsPTDAsync(ByVal PartNo As String)
            Me.IsPTDAsync(PartNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsPTDAsync(ByVal PartNo As String, ByVal userState As Object)
            If (Me.IsPTDOperationCompleted Is Nothing) Then
                Me.IsPTDOperationCompleted = AddressOf Me.OnIsPTDOperationCompleted
            End If
            Me.InvokeAsync("IsPTD", New Object() {PartNo}, Me.IsPTDOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsPTDOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsPTDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsPTDCompleted(Me, New IsPTDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class struct_GP_Detail
        
        Private lineNoField As Integer
        
        Private partNoField As String
        
        Private priceField As Decimal
        
        Private itpField As Decimal
        
        Private qTYField As Integer
        
        '''<remarks/>
        Public Property lineNo() As Integer
            Get
                Return Me.lineNoField
            End Get
            Set
                Me.lineNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PartNo() As String
            Get
                Return Me.partNoField
            End Get
            Set
                Me.partNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Price() As Decimal
            Get
                Return Me.priceField
            End Get
            Set
                Me.priceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Itp() As Decimal
            Get
                Return Me.itpField
            End Get
            Set
                Me.itpField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property QTY() As Integer
            Get
                Return Me.qTYField
            End Get
            Set
                Me.qTYField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class struct_Quote_Detail
        
        Private quoteIdField As String
        
        Private lineNoField As Integer
        
        Private partNoField As String
        
        Private descriptionField As String
        
        Private qtyField As Integer
        
        Private listPriceField As Decimal
        
        Private unitPriceField As Decimal
        
        Private newUnitPriceField As Decimal
        
        Private itpField As Decimal
        
        Private newItpField As Decimal
        
        Private deliveryPlantField As String
        
        Private categoryField As String
        
        Private classABCField As String
        
        Private rohsField As Integer
        
        Private ewFlagField As Integer
        
        Private reqDateField As Date
        
        Private dueDateField As Date
        
        Private satisfyFlagField As Integer
        
        Private canBeConfirmedField As Integer
        
        Private custMaterialField As String
        
        Private inventoryField As Integer
        
        Private oTypeField As Integer
        
        Private modelNoField As String
        
        Private sPRNOField As String
        
        '''<remarks/>
        Public Property quoteId() As String
            Get
                Return Me.quoteIdField
            End Get
            Set
                Me.quoteIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property lineNo() As Integer
            Get
                Return Me.lineNoField
            End Get
            Set
                Me.lineNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property partNo() As String
            Get
                Return Me.partNoField
            End Get
            Set
                Me.partNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property description() As String
            Get
                Return Me.descriptionField
            End Get
            Set
                Me.descriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property qty() As Integer
            Get
                Return Me.qtyField
            End Get
            Set
                Me.qtyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property listPrice() As Decimal
            Get
                Return Me.listPriceField
            End Get
            Set
                Me.listPriceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property unitPrice() As Decimal
            Get
                Return Me.unitPriceField
            End Get
            Set
                Me.unitPriceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property newUnitPrice() As Decimal
            Get
                Return Me.newUnitPriceField
            End Get
            Set
                Me.newUnitPriceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property itp() As Decimal
            Get
                Return Me.itpField
            End Get
            Set
                Me.itpField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property newItp() As Decimal
            Get
                Return Me.newItpField
            End Get
            Set
                Me.newItpField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property deliveryPlant() As String
            Get
                Return Me.deliveryPlantField
            End Get
            Set
                Me.deliveryPlantField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property category() As String
            Get
                Return Me.categoryField
            End Get
            Set
                Me.categoryField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property classABC() As String
            Get
                Return Me.classABCField
            End Get
            Set
                Me.classABCField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property rohs() As Integer
            Get
                Return Me.rohsField
            End Get
            Set
                Me.rohsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ewFlag() As Integer
            Get
                Return Me.ewFlagField
            End Get
            Set
                Me.ewFlagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property reqDate() As Date
            Get
                Return Me.reqDateField
            End Get
            Set
                Me.reqDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property dueDate() As Date
            Get
                Return Me.dueDateField
            End Get
            Set
                Me.dueDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property satisfyFlag() As Integer
            Get
                Return Me.satisfyFlagField
            End Get
            Set
                Me.satisfyFlagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property canBeConfirmed() As Integer
            Get
                Return Me.canBeConfirmedField
            End Get
            Set
                Me.canBeConfirmedField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property custMaterial() As String
            Get
                Return Me.custMaterialField
            End Get
            Set
                Me.custMaterialField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property inventory() As Integer
            Get
                Return Me.inventoryField
            End Get
            Set
                Me.inventoryField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property oType() As Integer
            Get
                Return Me.oTypeField
            End Get
            Set
                Me.oTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property modelNo() As String
            Get
                Return Me.modelNoField
            End Get
            Set
                Me.modelNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SPRNO() As String
            Get
                Return Me.sPRNOField
            End Get
            Set
                Me.sPRNOField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub isPhaseOutCompletedEventHandler(ByVal sender As Object, ByVal e As isPhaseOutCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isPhaseOutCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub InitApprovalFlowCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub isApprovedCompletedEventHandler(ByVal sender As Object, ByVal e As isApprovedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isApprovedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub isRejectedCompletedEventHandler(ByVal sender As Object, ByVal e As isRejectedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isRejectedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub isInApprovedCompletedEventHandler(ByVal sender As Object, ByVal e As isInApprovedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isInApprovedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub getLevelCompletedEventHandler(ByVal sender As Object, ByVal e As getLevelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getLevelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub toQuotationCompletedEventHandler(ByVal sender As Object, ByVal e As toQuotationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class toQuotationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub TESTCompletedEventHandler(ByVal sender As Object, ByVal e As TESTCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TESTCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub getQuotationListByCompanyCompletedEventHandler(ByVal sender As Object, ByVal e As getQuotationListByCompanyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getQuotationListByCompanyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub getQuotationDetailByIdCompletedEventHandler(ByVal sender As Object, ByVal e As getQuotationDetailByIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getQuotationDetailByIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub isQuoteExpiredCompletedEventHandler(ByVal sender As Object, ByVal e As isQuoteExpiredCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isQuoteExpiredCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub getLevelandAppoverListCompletedEventHandler(ByVal sender As Object, ByVal e As getLevelandAppoverListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getLevelandAppoverListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property GPLevel_and_Approver() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub LogSSOIdCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub isValidSSOCompletedEventHandler(ByVal sender As Object, ByVal e As isValidSSOCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isValidSSOCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub ApprovalProcessCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub getITPCompletedEventHandler(ByVal sender As Object, ByVal e As getITPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getITPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Decimal
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Decimal)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub setITPCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub isCanRepeatOrderCompletedEventHandler(ByVal sender As Object, ByVal e As isCanRepeatOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isCanRepeatOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub CreateAccountContactQuotationFromSPRCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub getQuotePageStrCustomerCompletedEventHandler(ByVal sender As Object, ByVal e As getQuotePageStrCustomerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getQuotePageStrCustomerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub getOptyIdByQuoteIdCompletedEventHandler(ByVal sender As Object, ByVal e As getOptyIdByQuoteIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getOptyIdByQuoteIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub IsPTDCompletedEventHandler(ByVal sender As Object, ByVal e As IsPTDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsPTDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
End Namespace
