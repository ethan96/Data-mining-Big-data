'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace CurationWS
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="IntApiSoap", [Namespace]:="AdvProspectDb")>  _
    Partial Public Class IntApi
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private HelloKittyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllModelStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMatchedModelsFromTextOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CalculateEngagementPointOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ImportLeadOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.GetModelNo_For_UNICA_Activity.My.MySettings.Default.GetModelNo_For_UNICA_Activity_CurationWS_IntApi
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event HelloKittyCompleted As HelloKittyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllModelStringCompleted As GetAllModelStringCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMatchedModelsFromTextCompleted As GetMatchedModelsFromTextCompletedEventHandler
        
        '''<remarks/>
        Public Event CalculateEngagementPointCompleted As CalculateEngagementPointCompletedEventHandler
        
        '''<remarks/>
        Public Event ImportLeadCompleted As ImportLeadCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/HelloKitty", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HelloKitty() As String
            Dim results() As Object = Me.Invoke("HelloKitty", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HelloKittyAsync()
            Me.HelloKittyAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HelloKittyAsync(ByVal userState As Object)
            If (Me.HelloKittyOperationCompleted Is Nothing) Then
                Me.HelloKittyOperationCompleted = AddressOf Me.OnHelloKittyOperationCompleted
            End If
            Me.InvokeAsync("HelloKitty", New Object(-1) {}, Me.HelloKittyOperationCompleted, userState)
        End Sub
        
        Private Sub OnHelloKittyOperationCompleted(ByVal arg As Object)
            If (Not (Me.HelloKittyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HelloKittyCompleted(Me, New HelloKittyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/GetAllModelString", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllModelString() As String
            Dim results() As Object = Me.Invoke("GetAllModelString", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllModelStringAsync()
            Me.GetAllModelStringAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllModelStringAsync(ByVal userState As Object)
            If (Me.GetAllModelStringOperationCompleted Is Nothing) Then
                Me.GetAllModelStringOperationCompleted = AddressOf Me.OnGetAllModelStringOperationCompleted
            End If
            Me.InvokeAsync("GetAllModelString", New Object(-1) {}, Me.GetAllModelStringOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllModelStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllModelStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllModelStringCompleted(Me, New GetAllModelStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/GetMatchedModelsFromText", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMatchedModelsFromText(ByVal strText As String, ByVal strModels As String) As String()
            Dim results() As Object = Me.Invoke("GetMatchedModelsFromText", New Object() {strText, strModels})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMatchedModelsFromTextAsync(ByVal strText As String, ByVal strModels As String)
            Me.GetMatchedModelsFromTextAsync(strText, strModels, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMatchedModelsFromTextAsync(ByVal strText As String, ByVal strModels As String, ByVal userState As Object)
            If (Me.GetMatchedModelsFromTextOperationCompleted Is Nothing) Then
                Me.GetMatchedModelsFromTextOperationCompleted = AddressOf Me.OnGetMatchedModelsFromTextOperationCompleted
            End If
            Me.InvokeAsync("GetMatchedModelsFromText", New Object() {strText, strModels}, Me.GetMatchedModelsFromTextOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMatchedModelsFromTextOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMatchedModelsFromTextCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMatchedModelsFromTextCompleted(Me, New GetMatchedModelsFromTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/CalculateEngagementPoint", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CalculateEngagementPoint(ByVal email As String) As Integer
            Dim results() As Object = Me.Invoke("CalculateEngagementPoint", New Object() {email})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CalculateEngagementPointAsync(ByVal email As String)
            Me.CalculateEngagementPointAsync(email, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CalculateEngagementPointAsync(ByVal email As String, ByVal userState As Object)
            If (Me.CalculateEngagementPointOperationCompleted Is Nothing) Then
                Me.CalculateEngagementPointOperationCompleted = AddressOf Me.OnCalculateEngagementPointOperationCompleted
            End If
            Me.InvokeAsync("CalculateEngagementPoint", New Object() {email}, Me.CalculateEngagementPointOperationCompleted, userState)
        End Sub
        
        Private Sub OnCalculateEngagementPointOperationCompleted(ByVal arg As Object)
            If (Not (Me.CalculateEngagementPointCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CalculateEngagementPointCompleted(Me, New CalculateEngagementPointCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/ImportLead", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ImportLead(ByVal Email As String) As Boolean
            Dim results() As Object = Me.Invoke("ImportLead", New Object() {Email})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ImportLeadAsync(ByVal Email As String)
            Me.ImportLeadAsync(Email, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ImportLeadAsync(ByVal Email As String, ByVal userState As Object)
            If (Me.ImportLeadOperationCompleted Is Nothing) Then
                Me.ImportLeadOperationCompleted = AddressOf Me.OnImportLeadOperationCompleted
            End If
            Me.InvokeAsync("ImportLead", New Object() {Email}, Me.ImportLeadOperationCompleted, userState)
        End Sub
        
        Private Sub OnImportLeadOperationCompleted(ByVal arg As Object)
            If (Not (Me.ImportLeadCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ImportLeadCompleted(Me, New ImportLeadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub HelloKittyCompletedEventHandler(ByVal sender As Object, ByVal e As HelloKittyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HelloKittyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub GetAllModelStringCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllModelStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllModelStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub GetMatchedModelsFromTextCompletedEventHandler(ByVal sender As Object, ByVal e As GetMatchedModelsFromTextCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMatchedModelsFromTextCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub CalculateEngagementPointCompletedEventHandler(ByVal sender As Object, ByVal e As CalculateEngagementPointCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CalculateEngagementPointCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ImportLeadCompletedEventHandler(ByVal sender As Object, ByVal e As ImportLeadCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ImportLeadCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
End Namespace
