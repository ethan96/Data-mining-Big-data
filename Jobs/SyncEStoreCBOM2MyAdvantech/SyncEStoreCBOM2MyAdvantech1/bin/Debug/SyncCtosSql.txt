WITH T1 AS
(
    SELECT     

              case  
                    WHEN CTOSComponent.ComponentParentID IS NULL then  CTOSComponent.ComponentName    + ' for ' + Product.DisplayPartno
                    when CTOSComponent.Componenttype='list' then
                       case CTOSComponent.ComponentName 
                           when 'None' then 'None' 
                           else  isnull(CTOSComponentDetailpart.parts ,'No Need')  
                       end
                    else 'No Need' 
              end as CATEGORY_ID,
              
              CTOSComponent.ComponentName as CATEGORY_NAME,    

              case when  CTOSComponent.ComponentType='list' then 'Component' else CTOSComponent.ComponentType end as CATEGORY_TYPE ,  

              CASE WHEN CTOSComponent.ComponentParentID IS NULL  THEN Product.DisplayPartno ELSE CTOSComponent_1.ComponentName   + ' for ' + Product.DisplayPartno  END AS PARENT_CATEGORY_ID,  

              '' as  CATALOG_ID,CTOSComponent.ComponentDesc as  CATEGORY_DESC,  

              '' AS DISPLAY_NAME ,'created_by_ming' as IMAGE_ID, CTOSBOM.Message AS EXTENDED_DESC ,getdate()as CREATED, 'EZ' AS created_by, getdate()as LAST_UPDATED ,'EZ' as last_updated_by,  

              CTOSBOM.Seq as SEQ_NO ,'' as publish_status, (Case CTOSBOM.Defaults when 'true' then 1 else 0 end) as DEFAULT_FLAG, 

              CASE  
              WHEN CTOSBOM.Defaults = 1 

              THEN 'DEFAULT'

              ELSE ''

              END as CONFIGURATION_RULE,
              
              '' as  NOT_EXPAND_CATEGORY,  

              (Case CTOSBOM.Show when 'true' then 1 else 0 end) AS show_hide,'2' AS EZ_FLAG,NEWID() as  UID , SUBSTRING ( Product_Ctos.StoreID , 2 , 2 ) AS  ORG  

              FROM Parts INNER JOIN  

              Product ON Parts.StoreID = Product.StoreID AND Parts.SProductID = Product.SProductID INNER JOIN  

              Product_Ctos ON Product.StoreID = Product_Ctos.StoreID AND Product.SProductID = Product_Ctos.SProductID INNER JOIN  

              CTOSBOM ON Product_Ctos.StoreID = CTOSBOM.StoreID AND Product_Ctos.SProductID = CTOSBOM.SProductID INNER JOIN  

              CTOSComponent ON CTOSBOM.ComponentID = CTOSComponent.ComponentID and CTOSBOM.StoreID  = CTOSComponent.StoreID left join 
              (SELECT t1.StoreID,t1.ComponentID 
, parts=STUFF((SELECT '|'+ + dbo.[f_DuplicateSProductID](SProductID ,Qty) 
 FROM CTOSComponentDetail  t WHERE StoreID=t1.StoreID
 and ComponentID=t1.ComponentID  FOR XML PATH('')), 1, 1, '')
FROM CTOSComponentDetail t1

GROUP BY t1.StoreID,t1.ComponentID 
) as CTOSComponentDetailpart on CTOSComponentDetailpart.StoreID=CTOSComponent.StoreID and CTOSComponentDetailpart.ComponentID=CTOSComponent.ComponentID  left JOIN  

              CTOSComponent AS CTOSComponent_1 ON CTOSComponent.ComponentParentID = CTOSComponent_1.ComponentID  and  CTOSComponent_1.StoreID  = CTOSComponent.StoreID

              WHERE     (Parts.StoreID = 'AUS' or Parts.StoreID ='AAU' or Parts.StoreID ='AJP' OR Parts.StoreID = 'ATW' OR Parts.StoreID = 'AKR') AND (Product.Status <> 'INACTIVE_AUTO')   

              AND (Product.[Status] not in ('PHASED_OUT','INACTIVE','INACTIVE_AUTO','DELETED','SOLUTION_ONLY','TOBEREVIEW')   AND Product.PublishStatus = 1 )
              and (CTOSBOM.Show = 1)  
			  and (Product_Ctos.Assembly is null or Product_Ctos.Assembly=1)
			  --and ((Product_Ctos.Assembly is null or Product_Ctos.Assembly=1) or (Product.SProductID='21431' and Parts.StoreID='aus'))
              --and CTOSComponent.ComponentType like '%extendedcategory%' 
              --and CTOSBOM.storeid='aus' and CTOSBOM.SProductID='21780'
),T2 AS

-------Following statement will select the productids in cbom component  //modify by Alex 20160802
(
    SELECT     
			  ProductCategroyMapping.sproductid as CATEGORY_ID,
              
              ProductCategroyMapping.sproductid as CATEGORY_NAME,    

              --'extendedComponent' as CATEGORY_TYPE ,  
              case when  CTOSComponent.ComponentType='extendedcategory' then 'extendedComponent' else CTOSComponent.ComponentType end as CATEGORY_TYPE , 

              CTOSComponent.ComponentName + ' for ' + p2.DisplayPartno  AS PARENT_CATEGORY_ID,  

              '' as  CATALOG_ID, product.productdesc as  CATEGORY_DESC,  

              '' AS DISPLAY_NAME ,'created_by_ming' as IMAGE_ID, '' AS EXTENDED_DESC ,getdate()as CREATED, 'EZ' AS created_by, getdate()as LAST_UPDATED ,'EZ' as last_updated_by,  

              '' as SEQ_NO ,'' as publish_status, 0 as DEFAULT_FLAG, 

              '' as CONFIGURATION_RULE,
              
              '' as  NOT_EXPAND_CATEGORY,  1 AS show_hide,'2' AS EZ_FLAG,NEWID() as  UID , SUBSTRING ( parts.StoreID , 2 , 2 ) AS  ORG  

              FROM 
              CTOSBOM inner join
              CTOSComponent ON CTOSBOM.ComponentID = CTOSComponent.ComponentID and CTOSBOM.StoreID  = CTOSComponent.StoreID  inner join         
              ProductCategory on ProductCategory.categorypath=CTOSComponent.sproductid and ProductCategory.storeid = CTOSComponent.storeid  inner join
              ProductCategroyMapping on ProductCategory.storeid=ProductCategroyMapping.storeid and ProductCategory.categoryid=ProductCategroyMapping.categoryid inner join
              Product ON Product.storeid=ProductCategroyMapping.storeid and Product.sproductid=ProductCategroyMapping.sproductid inner join
              Parts ON Parts.StoreID = Product.StoreID AND Parts.SProductID = Product.SProductID inner join
              product p2 on p2.storeid=ctosbom.storeid and p2.sproductid = ctosbom.sproductid
              
              WHERE     (Parts.StoreID = 'AUS') AND (Product.Status <> 'INACTIVE_AUTO')   --only org us need get all child item from extendedcategory
              AND (Product.[Status] not in ('PHASED_OUT','INACTIVE','INACTIVE_AUTO','DELETED','SOLUTION_ONLY','TOBEREVIEW')   AND Product.PublishStatus = 1 ) 
              and CTOSComponent.ComponentType like '%extendedcategory%'  --and CTOSBOM.storeid='aus'
              --and CTOSBOM.SProductID='21780' ---- <<need use first select sproduct id list
)

--Beside Selecting T1, also select T2 When T1 component type = extendedcategory and org ='AUS'  //modify by Alex 20160802
SELECT * FROM T1
UNION ALL
SELECT * FROM T2 WHERE PARENT_CATEGORY_ID IN (SELECT T1.CATEGORY_ID FROM T1 WHERE CATEGORY_TYPE = 'extendedcategory' AND ORG='US')




