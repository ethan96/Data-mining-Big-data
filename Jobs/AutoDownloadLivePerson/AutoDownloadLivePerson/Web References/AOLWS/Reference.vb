'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace AOLWS
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="IntApiSoap", [Namespace]:="AdvProspectDb")>  _
    Partial Public Class IntApi
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private HelloKittyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetContactOwnerByEmailAndUserBehaviorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRBUbyCountryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLeadFlashRBUbyCountryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsProcessedAlibabaEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessTracepartEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessTracepartsExcelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessGlobalspecEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessGlobalspecExcelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessDirectIndustrySalesInquiryEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessMedicalExpoSalesInquiryEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessIENSalesInquiryEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessAlibabaEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessAsianProductsEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendRegularEDMReportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchProductInfoFromURLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateResourceContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllModelStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMatchedModelsFromTextOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CalculateEngagementPointOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ImportCuratedActivityFromLetterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ImportSalesLeadOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ImportLeadFromUnicaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ImportLeadDailyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ImportLeadFromMarketingLeadOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ImportLeadFromUploadedListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateContact_NewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateActivityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateActivity_NewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAdminEmailByCountryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSiebelActivityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateContactNeverEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InferAccountNameByEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecuteACLECAMPJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateUNICAOffer_TestServerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SyncSimpleFormInterestedProductContactToSiebelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsValidSiebelOwnerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckPositionNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBoughtUSBContactListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendELetterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckMetaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckJobTitleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateAndExecuteListJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ImportLiveChatByDatasetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ImportLiveChatByExcelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ImportLiveChatOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.AutoDownloadLivePerson.My.MySettings.Default.AutoDownloadLivePerson_AOLWS_IntApi
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event HelloKittyCompleted As HelloKittyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetContactOwnerByEmailAndUserBehaviorCompleted As GetContactOwnerByEmailAndUserBehaviorCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRBUbyCountryCompleted As GetRBUbyCountryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLeadFlashRBUbyCountryCompleted As GetLeadFlashRBUbyCountryCompletedEventHandler
        
        '''<remarks/>
        Public Event IsProcessedAlibabaEmailCompleted As IsProcessedAlibabaEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessTracepartEmailCompleted As ProcessTracepartEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessTracepartsExcelCompleted As ProcessTracepartsExcelCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessGlobalspecEmailCompleted As ProcessGlobalspecEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessGlobalspecExcelCompleted As ProcessGlobalspecExcelCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessDirectIndustrySalesInquiryEmailCompleted As ProcessDirectIndustrySalesInquiryEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessMedicalExpoSalesInquiryEmailCompleted As ProcessMedicalExpoSalesInquiryEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessIENSalesInquiryEmailCompleted As ProcessIENSalesInquiryEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessAlibabaEmailCompleted As ProcessAlibabaEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessAsianProductsEmailCompleted As ProcessAsianProductsEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event SendRegularEDMReportCompleted As SendRegularEDMReportCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchProductInfoFromURLCompleted As FetchProductInfoFromURLCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateResourceContactCompleted As CreateResourceContactCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllModelStringCompleted As GetAllModelStringCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMatchedModelsFromTextCompleted As GetMatchedModelsFromTextCompletedEventHandler
        
        '''<remarks/>
        Public Event CalculateEngagementPointCompleted As CalculateEngagementPointCompletedEventHandler
        
        '''<remarks/>
        Public Event ImportCuratedActivityFromLetterCompleted As ImportCuratedActivityFromLetterCompletedEventHandler
        
        '''<remarks/>
        Public Event ImportSalesLeadCompleted As ImportSalesLeadCompletedEventHandler
        
        '''<remarks/>
        Public Event ImportLeadFromUnicaCompleted As ImportLeadFromUnicaCompletedEventHandler
        
        '''<remarks/>
        Public Event ImportLeadDailyCompleted As ImportLeadDailyCompletedEventHandler
        
        '''<remarks/>
        Public Event ImportLeadFromMarketingLeadCompleted As ImportLeadFromMarketingLeadCompletedEventHandler
        
        '''<remarks/>
        Public Event ImportLeadFromUploadedListCompleted As ImportLeadFromUploadedListCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateContactCompleted As CreateContactCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateContact_NewCompleted As CreateContact_NewCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateActivityCompleted As CreateActivityCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateActivity_NewCompleted As CreateActivity_NewCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAdminEmailByCountryCompleted As GetAdminEmailByCountryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSiebelActivityCompleted As GetSiebelActivityCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateContactCompleted As UpdateContactCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateContactNeverEmailCompleted As UpdateContactNeverEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event InferAccountNameByEmailCompleted As InferAccountNameByEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event ExecuteACLECAMPJobCompleted As ExecuteACLECAMPJobCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateUNICAOffer_TestServerCompleted As CreateUNICAOffer_TestServerCompletedEventHandler
        
        '''<remarks/>
        Public Event SyncSimpleFormInterestedProductContactToSiebelCompleted As SyncSimpleFormInterestedProductContactToSiebelCompletedEventHandler
        
        '''<remarks/>
        Public Event IsValidSiebelOwnerCompleted As IsValidSiebelOwnerCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckPositionNameCompleted As CheckPositionNameCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBoughtUSBContactListCompleted As GetBoughtUSBContactListCompletedEventHandler
        
        '''<remarks/>
        Public Event SendELetterCompleted As SendELetterCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckMetaCompleted As CheckMetaCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckJobTitleCompleted As CheckJobTitleCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateAndExecuteListJobCompleted As CreateAndExecuteListJobCompletedEventHandler
        
        '''<remarks/>
        Public Event ImportLiveChatByDatasetCompleted As ImportLiveChatByDatasetCompletedEventHandler
        
        '''<remarks/>
        Public Event ImportLiveChatByExcelCompleted As ImportLiveChatByExcelCompletedEventHandler
        
        '''<remarks/>
        Public Event ImportLiveChatCompleted As ImportLiveChatCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/HelloKitty", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HelloKitty() As String
            Dim results() As Object = Me.Invoke("HelloKitty", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HelloKittyAsync()
            Me.HelloKittyAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HelloKittyAsync(ByVal userState As Object)
            If (Me.HelloKittyOperationCompleted Is Nothing) Then
                Me.HelloKittyOperationCompleted = AddressOf Me.OnHelloKittyOperationCompleted
            End If
            Me.InvokeAsync("HelloKitty", New Object(-1) {}, Me.HelloKittyOperationCompleted, userState)
        End Sub
        
        Private Sub OnHelloKittyOperationCompleted(ByVal arg As Object)
            If (Not (Me.HelloKittyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HelloKittyCompleted(Me, New HelloKittyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/GetContactOwnerByEmailAndUserBehavior", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetContactOwnerByEmailAndUserBehavior(ByVal objImportedAc As ObjImportedActivity) As String()
            Dim results() As Object = Me.Invoke("GetContactOwnerByEmailAndUserBehavior", New Object() {objImportedAc})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetContactOwnerByEmailAndUserBehaviorAsync(ByVal objImportedAc As ObjImportedActivity)
            Me.GetContactOwnerByEmailAndUserBehaviorAsync(objImportedAc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetContactOwnerByEmailAndUserBehaviorAsync(ByVal objImportedAc As ObjImportedActivity, ByVal userState As Object)
            If (Me.GetContactOwnerByEmailAndUserBehaviorOperationCompleted Is Nothing) Then
                Me.GetContactOwnerByEmailAndUserBehaviorOperationCompleted = AddressOf Me.OnGetContactOwnerByEmailAndUserBehaviorOperationCompleted
            End If
            Me.InvokeAsync("GetContactOwnerByEmailAndUserBehavior", New Object() {objImportedAc}, Me.GetContactOwnerByEmailAndUserBehaviorOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetContactOwnerByEmailAndUserBehaviorOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetContactOwnerByEmailAndUserBehaviorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetContactOwnerByEmailAndUserBehaviorCompleted(Me, New GetContactOwnerByEmailAndUserBehaviorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/GetRBUbyCountry", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRBUbyCountry(ByVal Country As String) As String
            Dim results() As Object = Me.Invoke("GetRBUbyCountry", New Object() {Country})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRBUbyCountryAsync(ByVal Country As String)
            Me.GetRBUbyCountryAsync(Country, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRBUbyCountryAsync(ByVal Country As String, ByVal userState As Object)
            If (Me.GetRBUbyCountryOperationCompleted Is Nothing) Then
                Me.GetRBUbyCountryOperationCompleted = AddressOf Me.OnGetRBUbyCountryOperationCompleted
            End If
            Me.InvokeAsync("GetRBUbyCountry", New Object() {Country}, Me.GetRBUbyCountryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRBUbyCountryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRBUbyCountryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRBUbyCountryCompleted(Me, New GetRBUbyCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/GetLeadFlashRBUbyCountry", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLeadFlashRBUbyCountry(ByVal Country As String) As String
            Dim results() As Object = Me.Invoke("GetLeadFlashRBUbyCountry", New Object() {Country})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLeadFlashRBUbyCountryAsync(ByVal Country As String)
            Me.GetLeadFlashRBUbyCountryAsync(Country, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLeadFlashRBUbyCountryAsync(ByVal Country As String, ByVal userState As Object)
            If (Me.GetLeadFlashRBUbyCountryOperationCompleted Is Nothing) Then
                Me.GetLeadFlashRBUbyCountryOperationCompleted = AddressOf Me.OnGetLeadFlashRBUbyCountryOperationCompleted
            End If
            Me.InvokeAsync("GetLeadFlashRBUbyCountry", New Object() {Country}, Me.GetLeadFlashRBUbyCountryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLeadFlashRBUbyCountryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLeadFlashRBUbyCountryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLeadFlashRBUbyCountryCompleted(Me, New GetLeadFlashRBUbyCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/IsProcessedAlibabaEmail", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsProcessedAlibabaEmail(ByVal strEmailID As String) As Boolean
            Dim results() As Object = Me.Invoke("IsProcessedAlibabaEmail", New Object() {strEmailID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsProcessedAlibabaEmailAsync(ByVal strEmailID As String)
            Me.IsProcessedAlibabaEmailAsync(strEmailID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsProcessedAlibabaEmailAsync(ByVal strEmailID As String, ByVal userState As Object)
            If (Me.IsProcessedAlibabaEmailOperationCompleted Is Nothing) Then
                Me.IsProcessedAlibabaEmailOperationCompleted = AddressOf Me.OnIsProcessedAlibabaEmailOperationCompleted
            End If
            Me.InvokeAsync("IsProcessedAlibabaEmail", New Object() {strEmailID}, Me.IsProcessedAlibabaEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsProcessedAlibabaEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsProcessedAlibabaEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsProcessedAlibabaEmailCompleted(Me, New IsProcessedAlibabaEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/ProcessTracepartEmail", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessTracepartEmail(ByVal strTracePartMailBody As String, ByVal strEmailID As String, ByRef ErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("ProcessTracepartEmail", New Object() {strTracePartMailBody, strEmailID, ErrMsg})
            ErrMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessTracepartEmailAsync(ByVal strTracePartMailBody As String, ByVal strEmailID As String, ByVal ErrMsg As String)
            Me.ProcessTracepartEmailAsync(strTracePartMailBody, strEmailID, ErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessTracepartEmailAsync(ByVal strTracePartMailBody As String, ByVal strEmailID As String, ByVal ErrMsg As String, ByVal userState As Object)
            If (Me.ProcessTracepartEmailOperationCompleted Is Nothing) Then
                Me.ProcessTracepartEmailOperationCompleted = AddressOf Me.OnProcessTracepartEmailOperationCompleted
            End If
            Me.InvokeAsync("ProcessTracepartEmail", New Object() {strTracePartMailBody, strEmailID, ErrMsg}, Me.ProcessTracepartEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessTracepartEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessTracepartEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessTracepartEmailCompleted(Me, New ProcessTracepartEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/ProcessTracepartsExcel", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessTracepartsExcel(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal ExcelInBytes() As Byte, ByVal strEmailID As String, ByRef ErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("ProcessTracepartsExcel", New Object() {ExcelInBytes, strEmailID, ErrMsg})
            ErrMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessTracepartsExcelAsync(ByVal ExcelInBytes() As Byte, ByVal strEmailID As String, ByVal ErrMsg As String)
            Me.ProcessTracepartsExcelAsync(ExcelInBytes, strEmailID, ErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessTracepartsExcelAsync(ByVal ExcelInBytes() As Byte, ByVal strEmailID As String, ByVal ErrMsg As String, ByVal userState As Object)
            If (Me.ProcessTracepartsExcelOperationCompleted Is Nothing) Then
                Me.ProcessTracepartsExcelOperationCompleted = AddressOf Me.OnProcessTracepartsExcelOperationCompleted
            End If
            Me.InvokeAsync("ProcessTracepartsExcel", New Object() {ExcelInBytes, strEmailID, ErrMsg}, Me.ProcessTracepartsExcelOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessTracepartsExcelOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessTracepartsExcelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessTracepartsExcelCompleted(Me, New ProcessTracepartsExcelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/ProcessGlobalspecEmail", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessGlobalspecEmail(ByVal strGlobalspecMailBody As String, ByVal strEmailID As String, ByRef ErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("ProcessGlobalspecEmail", New Object() {strGlobalspecMailBody, strEmailID, ErrMsg})
            ErrMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessGlobalspecEmailAsync(ByVal strGlobalspecMailBody As String, ByVal strEmailID As String, ByVal ErrMsg As String)
            Me.ProcessGlobalspecEmailAsync(strGlobalspecMailBody, strEmailID, ErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessGlobalspecEmailAsync(ByVal strGlobalspecMailBody As String, ByVal strEmailID As String, ByVal ErrMsg As String, ByVal userState As Object)
            If (Me.ProcessGlobalspecEmailOperationCompleted Is Nothing) Then
                Me.ProcessGlobalspecEmailOperationCompleted = AddressOf Me.OnProcessGlobalspecEmailOperationCompleted
            End If
            Me.InvokeAsync("ProcessGlobalspecEmail", New Object() {strGlobalspecMailBody, strEmailID, ErrMsg}, Me.ProcessGlobalspecEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessGlobalspecEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessGlobalspecEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessGlobalspecEmailCompleted(Me, New ProcessGlobalspecEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/ProcessGlobalspecExcel", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessGlobalspecExcel(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal ExcelInBytes() As Byte, ByVal strEmailID As String, ByRef ErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("ProcessGlobalspecExcel", New Object() {ExcelInBytes, strEmailID, ErrMsg})
            ErrMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessGlobalspecExcelAsync(ByVal ExcelInBytes() As Byte, ByVal strEmailID As String, ByVal ErrMsg As String)
            Me.ProcessGlobalspecExcelAsync(ExcelInBytes, strEmailID, ErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessGlobalspecExcelAsync(ByVal ExcelInBytes() As Byte, ByVal strEmailID As String, ByVal ErrMsg As String, ByVal userState As Object)
            If (Me.ProcessGlobalspecExcelOperationCompleted Is Nothing) Then
                Me.ProcessGlobalspecExcelOperationCompleted = AddressOf Me.OnProcessGlobalspecExcelOperationCompleted
            End If
            Me.InvokeAsync("ProcessGlobalspecExcel", New Object() {ExcelInBytes, strEmailID, ErrMsg}, Me.ProcessGlobalspecExcelOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessGlobalspecExcelOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessGlobalspecExcelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessGlobalspecExcelCompleted(Me, New ProcessGlobalspecExcelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/ProcessDirectIndustrySalesInquiryEmail", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessDirectIndustrySalesInquiryEmail(ByVal strDirectIndustryMailBody As String, ByVal strEmailID As String, ByRef ErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("ProcessDirectIndustrySalesInquiryEmail", New Object() {strDirectIndustryMailBody, strEmailID, ErrMsg})
            ErrMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessDirectIndustrySalesInquiryEmailAsync(ByVal strDirectIndustryMailBody As String, ByVal strEmailID As String, ByVal ErrMsg As String)
            Me.ProcessDirectIndustrySalesInquiryEmailAsync(strDirectIndustryMailBody, strEmailID, ErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessDirectIndustrySalesInquiryEmailAsync(ByVal strDirectIndustryMailBody As String, ByVal strEmailID As String, ByVal ErrMsg As String, ByVal userState As Object)
            If (Me.ProcessDirectIndustrySalesInquiryEmailOperationCompleted Is Nothing) Then
                Me.ProcessDirectIndustrySalesInquiryEmailOperationCompleted = AddressOf Me.OnProcessDirectIndustrySalesInquiryEmailOperationCompleted
            End If
            Me.InvokeAsync("ProcessDirectIndustrySalesInquiryEmail", New Object() {strDirectIndustryMailBody, strEmailID, ErrMsg}, Me.ProcessDirectIndustrySalesInquiryEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessDirectIndustrySalesInquiryEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessDirectIndustrySalesInquiryEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessDirectIndustrySalesInquiryEmailCompleted(Me, New ProcessDirectIndustrySalesInquiryEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/ProcessMedicalExpoSalesInquiryEmail", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessMedicalExpoSalesInquiryEmail(ByVal strMedicalExpoMailBody As String, ByVal strEmailID As String, ByRef ErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("ProcessMedicalExpoSalesInquiryEmail", New Object() {strMedicalExpoMailBody, strEmailID, ErrMsg})
            ErrMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessMedicalExpoSalesInquiryEmailAsync(ByVal strMedicalExpoMailBody As String, ByVal strEmailID As String, ByVal ErrMsg As String)
            Me.ProcessMedicalExpoSalesInquiryEmailAsync(strMedicalExpoMailBody, strEmailID, ErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessMedicalExpoSalesInquiryEmailAsync(ByVal strMedicalExpoMailBody As String, ByVal strEmailID As String, ByVal ErrMsg As String, ByVal userState As Object)
            If (Me.ProcessMedicalExpoSalesInquiryEmailOperationCompleted Is Nothing) Then
                Me.ProcessMedicalExpoSalesInquiryEmailOperationCompleted = AddressOf Me.OnProcessMedicalExpoSalesInquiryEmailOperationCompleted
            End If
            Me.InvokeAsync("ProcessMedicalExpoSalesInquiryEmail", New Object() {strMedicalExpoMailBody, strEmailID, ErrMsg}, Me.ProcessMedicalExpoSalesInquiryEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessMedicalExpoSalesInquiryEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessMedicalExpoSalesInquiryEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessMedicalExpoSalesInquiryEmailCompleted(Me, New ProcessMedicalExpoSalesInquiryEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/ProcessIENSalesInquiryEmail", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessIENSalesInquiryEmail(ByVal Exceldt As System.Data.DataTable, ByVal strEmailID As String, ByRef ErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("ProcessIENSalesInquiryEmail", New Object() {Exceldt, strEmailID, ErrMsg})
            ErrMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessIENSalesInquiryEmailAsync(ByVal Exceldt As System.Data.DataTable, ByVal strEmailID As String, ByVal ErrMsg As String)
            Me.ProcessIENSalesInquiryEmailAsync(Exceldt, strEmailID, ErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessIENSalesInquiryEmailAsync(ByVal Exceldt As System.Data.DataTable, ByVal strEmailID As String, ByVal ErrMsg As String, ByVal userState As Object)
            If (Me.ProcessIENSalesInquiryEmailOperationCompleted Is Nothing) Then
                Me.ProcessIENSalesInquiryEmailOperationCompleted = AddressOf Me.OnProcessIENSalesInquiryEmailOperationCompleted
            End If
            Me.InvokeAsync("ProcessIENSalesInquiryEmail", New Object() {Exceldt, strEmailID, ErrMsg}, Me.ProcessIENSalesInquiryEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessIENSalesInquiryEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessIENSalesInquiryEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessIENSalesInquiryEmailCompleted(Me, New ProcessIENSalesInquiryEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/ProcessAlibabaEmail", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessAlibabaEmail(ByVal strAlibaMail As String, ByVal strEmailID As String) As Boolean
            Dim results() As Object = Me.Invoke("ProcessAlibabaEmail", New Object() {strAlibaMail, strEmailID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessAlibabaEmailAsync(ByVal strAlibaMail As String, ByVal strEmailID As String)
            Me.ProcessAlibabaEmailAsync(strAlibaMail, strEmailID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessAlibabaEmailAsync(ByVal strAlibaMail As String, ByVal strEmailID As String, ByVal userState As Object)
            If (Me.ProcessAlibabaEmailOperationCompleted Is Nothing) Then
                Me.ProcessAlibabaEmailOperationCompleted = AddressOf Me.OnProcessAlibabaEmailOperationCompleted
            End If
            Me.InvokeAsync("ProcessAlibabaEmail", New Object() {strAlibaMail, strEmailID}, Me.ProcessAlibabaEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessAlibabaEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessAlibabaEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessAlibabaEmailCompleted(Me, New ProcessAlibabaEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/ProcessAsianProductsEmail", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessAsianProductsEmail(ByVal strEmailBody As String, ByVal strEmailID As String) As Boolean
            Dim results() As Object = Me.Invoke("ProcessAsianProductsEmail", New Object() {strEmailBody, strEmailID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessAsianProductsEmailAsync(ByVal strEmailBody As String, ByVal strEmailID As String)
            Me.ProcessAsianProductsEmailAsync(strEmailBody, strEmailID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessAsianProductsEmailAsync(ByVal strEmailBody As String, ByVal strEmailID As String, ByVal userState As Object)
            If (Me.ProcessAsianProductsEmailOperationCompleted Is Nothing) Then
                Me.ProcessAsianProductsEmailOperationCompleted = AddressOf Me.OnProcessAsianProductsEmailOperationCompleted
            End If
            Me.InvokeAsync("ProcessAsianProductsEmail", New Object() {strEmailBody, strEmailID}, Me.ProcessAsianProductsEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessAsianProductsEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessAsianProductsEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessAsianProductsEmailCompleted(Me, New ProcessAsianProductsEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/SendRegularEDMReport", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SendRegularEDMReport(ByVal DateFrom As String, ByVal DateTo As String)
            Me.Invoke("SendRegularEDMReport", New Object() {DateFrom, DateTo})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendRegularEDMReportAsync(ByVal DateFrom As String, ByVal DateTo As String)
            Me.SendRegularEDMReportAsync(DateFrom, DateTo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendRegularEDMReportAsync(ByVal DateFrom As String, ByVal DateTo As String, ByVal userState As Object)
            If (Me.SendRegularEDMReportOperationCompleted Is Nothing) Then
                Me.SendRegularEDMReportOperationCompleted = AddressOf Me.OnSendRegularEDMReportOperationCompleted
            End If
            Me.InvokeAsync("SendRegularEDMReport", New Object() {DateFrom, DateTo}, Me.SendRegularEDMReportOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendRegularEDMReportOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendRegularEDMReportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendRegularEDMReportCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/FetchProductInfoFromURL", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FetchProductInfoFromURL(ByVal URLs() As String) As URL_Product()
            Dim results() As Object = Me.Invoke("FetchProductInfoFromURL", New Object() {URLs})
            Return CType(results(0),URL_Product())
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchProductInfoFromURLAsync(ByVal URLs() As String)
            Me.FetchProductInfoFromURLAsync(URLs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchProductInfoFromURLAsync(ByVal URLs() As String, ByVal userState As Object)
            If (Me.FetchProductInfoFromURLOperationCompleted Is Nothing) Then
                Me.FetchProductInfoFromURLOperationCompleted = AddressOf Me.OnFetchProductInfoFromURLOperationCompleted
            End If
            Me.InvokeAsync("FetchProductInfoFromURL", New Object() {URLs}, Me.FetchProductInfoFromURLOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchProductInfoFromURLOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchProductInfoFromURLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchProductInfoFromURLCompleted(Me, New FetchProductInfoFromURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/CreateResourceContact", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CreateResourceContact(ByVal RowId As String, ByVal CreateCurationActivity As Boolean, ByVal CreateLead As Boolean)
            Me.Invoke("CreateResourceContact", New Object() {RowId, CreateCurationActivity, CreateLead})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateResourceContactAsync(ByVal RowId As String, ByVal CreateCurationActivity As Boolean, ByVal CreateLead As Boolean)
            Me.CreateResourceContactAsync(RowId, CreateCurationActivity, CreateLead, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateResourceContactAsync(ByVal RowId As String, ByVal CreateCurationActivity As Boolean, ByVal CreateLead As Boolean, ByVal userState As Object)
            If (Me.CreateResourceContactOperationCompleted Is Nothing) Then
                Me.CreateResourceContactOperationCompleted = AddressOf Me.OnCreateResourceContactOperationCompleted
            End If
            Me.InvokeAsync("CreateResourceContact", New Object() {RowId, CreateCurationActivity, CreateLead}, Me.CreateResourceContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateResourceContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateResourceContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateResourceContactCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/GetAllModelString", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllModelString() As String
            Dim results() As Object = Me.Invoke("GetAllModelString", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllModelStringAsync()
            Me.GetAllModelStringAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllModelStringAsync(ByVal userState As Object)
            If (Me.GetAllModelStringOperationCompleted Is Nothing) Then
                Me.GetAllModelStringOperationCompleted = AddressOf Me.OnGetAllModelStringOperationCompleted
            End If
            Me.InvokeAsync("GetAllModelString", New Object(-1) {}, Me.GetAllModelStringOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllModelStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllModelStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllModelStringCompleted(Me, New GetAllModelStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/GetMatchedModelsFromText", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMatchedModelsFromText(ByVal strText As String, ByVal strModels As String) As String()
            Dim results() As Object = Me.Invoke("GetMatchedModelsFromText", New Object() {strText, strModels})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMatchedModelsFromTextAsync(ByVal strText As String, ByVal strModels As String)
            Me.GetMatchedModelsFromTextAsync(strText, strModels, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMatchedModelsFromTextAsync(ByVal strText As String, ByVal strModels As String, ByVal userState As Object)
            If (Me.GetMatchedModelsFromTextOperationCompleted Is Nothing) Then
                Me.GetMatchedModelsFromTextOperationCompleted = AddressOf Me.OnGetMatchedModelsFromTextOperationCompleted
            End If
            Me.InvokeAsync("GetMatchedModelsFromText", New Object() {strText, strModels}, Me.GetMatchedModelsFromTextOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMatchedModelsFromTextOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMatchedModelsFromTextCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMatchedModelsFromTextCompleted(Me, New GetMatchedModelsFromTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/CalculateEngagementPoint", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CalculateEngagementPoint(ByVal email As String, ByVal From_CreateDate As String, ByVal To_CreateDate As String, ByVal IncludeOptyFiltration As Boolean, ByVal IncludeEStoreOrderFiltration As Boolean) As Integer
            Dim results() As Object = Me.Invoke("CalculateEngagementPoint", New Object() {email, From_CreateDate, To_CreateDate, IncludeOptyFiltration, IncludeEStoreOrderFiltration})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CalculateEngagementPointAsync(ByVal email As String, ByVal From_CreateDate As String, ByVal To_CreateDate As String, ByVal IncludeOptyFiltration As Boolean, ByVal IncludeEStoreOrderFiltration As Boolean)
            Me.CalculateEngagementPointAsync(email, From_CreateDate, To_CreateDate, IncludeOptyFiltration, IncludeEStoreOrderFiltration, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CalculateEngagementPointAsync(ByVal email As String, ByVal From_CreateDate As String, ByVal To_CreateDate As String, ByVal IncludeOptyFiltration As Boolean, ByVal IncludeEStoreOrderFiltration As Boolean, ByVal userState As Object)
            If (Me.CalculateEngagementPointOperationCompleted Is Nothing) Then
                Me.CalculateEngagementPointOperationCompleted = AddressOf Me.OnCalculateEngagementPointOperationCompleted
            End If
            Me.InvokeAsync("CalculateEngagementPoint", New Object() {email, From_CreateDate, To_CreateDate, IncludeOptyFiltration, IncludeEStoreOrderFiltration}, Me.CalculateEngagementPointOperationCompleted, userState)
        End Sub
        
        Private Sub OnCalculateEngagementPointOperationCompleted(ByVal arg As Object)
            If (Not (Me.CalculateEngagementPointCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CalculateEngagementPointCompleted(Me, New CalculateEngagementPointCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/ImportCuratedActivityFromLetter", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ImportCuratedActivityFromLetter(ByVal LetterId As String, ByVal ActionType As String, ByVal Email As String, ByVal URL As String, ByVal WebUserType As WebUserTypeEnum, ByVal ActivityType As ActivityType, ByVal InterestedProduct() As ProductLevelAndValue, ByVal SiebelSourceId As String, ByRef ErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("ImportCuratedActivityFromLetter", New Object() {LetterId, ActionType, Email, URL, WebUserType, ActivityType, InterestedProduct, SiebelSourceId, ErrMsg})
            ErrMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ImportCuratedActivityFromLetterAsync(ByVal LetterId As String, ByVal ActionType As String, ByVal Email As String, ByVal URL As String, ByVal WebUserType As WebUserTypeEnum, ByVal ActivityType As ActivityType, ByVal InterestedProduct() As ProductLevelAndValue, ByVal SiebelSourceId As String, ByVal ErrMsg As String)
            Me.ImportCuratedActivityFromLetterAsync(LetterId, ActionType, Email, URL, WebUserType, ActivityType, InterestedProduct, SiebelSourceId, ErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ImportCuratedActivityFromLetterAsync(ByVal LetterId As String, ByVal ActionType As String, ByVal Email As String, ByVal URL As String, ByVal WebUserType As WebUserTypeEnum, ByVal ActivityType As ActivityType, ByVal InterestedProduct() As ProductLevelAndValue, ByVal SiebelSourceId As String, ByVal ErrMsg As String, ByVal userState As Object)
            If (Me.ImportCuratedActivityFromLetterOperationCompleted Is Nothing) Then
                Me.ImportCuratedActivityFromLetterOperationCompleted = AddressOf Me.OnImportCuratedActivityFromLetterOperationCompleted
            End If
            Me.InvokeAsync("ImportCuratedActivityFromLetter", New Object() {LetterId, ActionType, Email, URL, WebUserType, ActivityType, InterestedProduct, SiebelSourceId, ErrMsg}, Me.ImportCuratedActivityFromLetterOperationCompleted, userState)
        End Sub
        
        Private Sub OnImportCuratedActivityFromLetterOperationCompleted(ByVal arg As Object)
            If (Not (Me.ImportCuratedActivityFromLetterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ImportCuratedActivityFromLetterCompleted(Me, New ImportCuratedActivityFromLetterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/ImportSalesLead", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ImportSalesLead(ByVal Email As String, ByVal From_CreateDate As String, ByVal To_CreateDate As String, ByVal IncludeOptyFiltration As Boolean, ByVal IncludeEStoreOrderFiltration As Boolean, ByVal TrackAllStage As Boolean, ByRef ErrMsg As String, ByVal Quality As LeadQuality, ByVal SingleAct As Boolean, ByVal SourceId As String, ByVal LeadDesc As String, ByVal LeadUploadFrom As LeadUploadSource) As String
            Dim results() As Object = Me.Invoke("ImportSalesLead", New Object() {Email, From_CreateDate, To_CreateDate, IncludeOptyFiltration, IncludeEStoreOrderFiltration, TrackAllStage, ErrMsg, Quality, SingleAct, SourceId, LeadDesc, LeadUploadFrom})
            ErrMsg = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ImportSalesLeadAsync(ByVal Email As String, ByVal From_CreateDate As String, ByVal To_CreateDate As String, ByVal IncludeOptyFiltration As Boolean, ByVal IncludeEStoreOrderFiltration As Boolean, ByVal TrackAllStage As Boolean, ByVal ErrMsg As String, ByVal Quality As LeadQuality, ByVal SingleAct As Boolean, ByVal SourceId As String, ByVal LeadDesc As String, ByVal LeadUploadFrom As LeadUploadSource)
            Me.ImportSalesLeadAsync(Email, From_CreateDate, To_CreateDate, IncludeOptyFiltration, IncludeEStoreOrderFiltration, TrackAllStage, ErrMsg, Quality, SingleAct, SourceId, LeadDesc, LeadUploadFrom, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ImportSalesLeadAsync(ByVal Email As String, ByVal From_CreateDate As String, ByVal To_CreateDate As String, ByVal IncludeOptyFiltration As Boolean, ByVal IncludeEStoreOrderFiltration As Boolean, ByVal TrackAllStage As Boolean, ByVal ErrMsg As String, ByVal Quality As LeadQuality, ByVal SingleAct As Boolean, ByVal SourceId As String, ByVal LeadDesc As String, ByVal LeadUploadFrom As LeadUploadSource, ByVal userState As Object)
            If (Me.ImportSalesLeadOperationCompleted Is Nothing) Then
                Me.ImportSalesLeadOperationCompleted = AddressOf Me.OnImportSalesLeadOperationCompleted
            End If
            Me.InvokeAsync("ImportSalesLead", New Object() {Email, From_CreateDate, To_CreateDate, IncludeOptyFiltration, IncludeEStoreOrderFiltration, TrackAllStage, ErrMsg, Quality, SingleAct, SourceId, LeadDesc, LeadUploadFrom}, Me.ImportSalesLeadOperationCompleted, userState)
        End Sub
        
        Private Sub OnImportSalesLeadOperationCompleted(ByVal arg As Object)
            If (Not (Me.ImportSalesLeadCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ImportSalesLeadCompleted(Me, New ImportSalesLeadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/ImportLeadFromUnica", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ImportLeadFromUnica(ByVal Email As String, ByVal From_CreateDate As String, ByVal To_CreateDate As String, ByVal IncludeOptyFiltration As Boolean, ByVal IncludeEStoreOrderFiltration As Boolean, ByVal TrackAllStage As Boolean, ByRef ErrMsg As String, ByVal Quality As LeadQuality, ByVal SingleAct As Boolean, ByVal SourceId As String, ByVal LeadDesc As String, ByVal ContactId As String) As String
            Dim results() As Object = Me.Invoke("ImportLeadFromUnica", New Object() {Email, From_CreateDate, To_CreateDate, IncludeOptyFiltration, IncludeEStoreOrderFiltration, TrackAllStage, ErrMsg, Quality, SingleAct, SourceId, LeadDesc, ContactId})
            ErrMsg = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ImportLeadFromUnicaAsync(ByVal Email As String, ByVal From_CreateDate As String, ByVal To_CreateDate As String, ByVal IncludeOptyFiltration As Boolean, ByVal IncludeEStoreOrderFiltration As Boolean, ByVal TrackAllStage As Boolean, ByVal ErrMsg As String, ByVal Quality As LeadQuality, ByVal SingleAct As Boolean, ByVal SourceId As String, ByVal LeadDesc As String, ByVal ContactId As String)
            Me.ImportLeadFromUnicaAsync(Email, From_CreateDate, To_CreateDate, IncludeOptyFiltration, IncludeEStoreOrderFiltration, TrackAllStage, ErrMsg, Quality, SingleAct, SourceId, LeadDesc, ContactId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ImportLeadFromUnicaAsync(ByVal Email As String, ByVal From_CreateDate As String, ByVal To_CreateDate As String, ByVal IncludeOptyFiltration As Boolean, ByVal IncludeEStoreOrderFiltration As Boolean, ByVal TrackAllStage As Boolean, ByVal ErrMsg As String, ByVal Quality As LeadQuality, ByVal SingleAct As Boolean, ByVal SourceId As String, ByVal LeadDesc As String, ByVal ContactId As String, ByVal userState As Object)
            If (Me.ImportLeadFromUnicaOperationCompleted Is Nothing) Then
                Me.ImportLeadFromUnicaOperationCompleted = AddressOf Me.OnImportLeadFromUnicaOperationCompleted
            End If
            Me.InvokeAsync("ImportLeadFromUnica", New Object() {Email, From_CreateDate, To_CreateDate, IncludeOptyFiltration, IncludeEStoreOrderFiltration, TrackAllStage, ErrMsg, Quality, SingleAct, SourceId, LeadDesc, ContactId}, Me.ImportLeadFromUnicaOperationCompleted, userState)
        End Sub
        
        Private Sub OnImportLeadFromUnicaOperationCompleted(ByVal arg As Object)
            If (Not (Me.ImportLeadFromUnicaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ImportLeadFromUnicaCompleted(Me, New ImportLeadFromUnicaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/ImportLeadDaily", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ImportLeadDaily(ByVal Email As String, ByVal From_CreateDate As String, ByVal To_CreateDate As String, ByVal IncludeOptyFiltration As Boolean, ByVal IncludeEStoreOrderFiltration As Boolean, ByVal TrackAllStage As Boolean, ByRef ErrMsg As String, ByVal Quality As LeadQuality, ByVal SingleAct As Boolean, ByVal SourceId As String) As String
            Dim results() As Object = Me.Invoke("ImportLeadDaily", New Object() {Email, From_CreateDate, To_CreateDate, IncludeOptyFiltration, IncludeEStoreOrderFiltration, TrackAllStage, ErrMsg, Quality, SingleAct, SourceId})
            ErrMsg = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ImportLeadDailyAsync(ByVal Email As String, ByVal From_CreateDate As String, ByVal To_CreateDate As String, ByVal IncludeOptyFiltration As Boolean, ByVal IncludeEStoreOrderFiltration As Boolean, ByVal TrackAllStage As Boolean, ByVal ErrMsg As String, ByVal Quality As LeadQuality, ByVal SingleAct As Boolean, ByVal SourceId As String)
            Me.ImportLeadDailyAsync(Email, From_CreateDate, To_CreateDate, IncludeOptyFiltration, IncludeEStoreOrderFiltration, TrackAllStage, ErrMsg, Quality, SingleAct, SourceId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ImportLeadDailyAsync(ByVal Email As String, ByVal From_CreateDate As String, ByVal To_CreateDate As String, ByVal IncludeOptyFiltration As Boolean, ByVal IncludeEStoreOrderFiltration As Boolean, ByVal TrackAllStage As Boolean, ByVal ErrMsg As String, ByVal Quality As LeadQuality, ByVal SingleAct As Boolean, ByVal SourceId As String, ByVal userState As Object)
            If (Me.ImportLeadDailyOperationCompleted Is Nothing) Then
                Me.ImportLeadDailyOperationCompleted = AddressOf Me.OnImportLeadDailyOperationCompleted
            End If
            Me.InvokeAsync("ImportLeadDaily", New Object() {Email, From_CreateDate, To_CreateDate, IncludeOptyFiltration, IncludeEStoreOrderFiltration, TrackAllStage, ErrMsg, Quality, SingleAct, SourceId}, Me.ImportLeadDailyOperationCompleted, userState)
        End Sub
        
        Private Sub OnImportLeadDailyOperationCompleted(ByVal arg As Object)
            If (Not (Me.ImportLeadDailyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ImportLeadDailyCompleted(Me, New ImportLeadDailyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/ImportLeadFromMarketingLead", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ImportLeadFromMarketingLead()
            Me.Invoke("ImportLeadFromMarketingLead", New Object(-1) {})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ImportLeadFromMarketingLeadAsync()
            Me.ImportLeadFromMarketingLeadAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ImportLeadFromMarketingLeadAsync(ByVal userState As Object)
            If (Me.ImportLeadFromMarketingLeadOperationCompleted Is Nothing) Then
                Me.ImportLeadFromMarketingLeadOperationCompleted = AddressOf Me.OnImportLeadFromMarketingLeadOperationCompleted
            End If
            Me.InvokeAsync("ImportLeadFromMarketingLead", New Object(-1) {}, Me.ImportLeadFromMarketingLeadOperationCompleted, userState)
        End Sub
        
        Private Sub OnImportLeadFromMarketingLeadOperationCompleted(ByVal arg As Object)
            If (Not (Me.ImportLeadFromMarketingLeadCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ImportLeadFromMarketingLeadCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/ImportLeadFromUploadedList", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ImportLeadFromUploadedList(ByVal ListId As String, ByVal From_CreateDate As String, ByVal To_CreateDate As String, ByVal IncludeOptyFiltration As Boolean, ByVal IncludeEStoreOrderFiltration As Boolean, ByVal TrackAllStage As Boolean, ByRef ErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("ImportLeadFromUploadedList", New Object() {ListId, From_CreateDate, To_CreateDate, IncludeOptyFiltration, IncludeEStoreOrderFiltration, TrackAllStage, ErrMsg})
            ErrMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ImportLeadFromUploadedListAsync(ByVal ListId As String, ByVal From_CreateDate As String, ByVal To_CreateDate As String, ByVal IncludeOptyFiltration As Boolean, ByVal IncludeEStoreOrderFiltration As Boolean, ByVal TrackAllStage As Boolean, ByVal ErrMsg As String)
            Me.ImportLeadFromUploadedListAsync(ListId, From_CreateDate, To_CreateDate, IncludeOptyFiltration, IncludeEStoreOrderFiltration, TrackAllStage, ErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ImportLeadFromUploadedListAsync(ByVal ListId As String, ByVal From_CreateDate As String, ByVal To_CreateDate As String, ByVal IncludeOptyFiltration As Boolean, ByVal IncludeEStoreOrderFiltration As Boolean, ByVal TrackAllStage As Boolean, ByVal ErrMsg As String, ByVal userState As Object)
            If (Me.ImportLeadFromUploadedListOperationCompleted Is Nothing) Then
                Me.ImportLeadFromUploadedListOperationCompleted = AddressOf Me.OnImportLeadFromUploadedListOperationCompleted
            End If
            Me.InvokeAsync("ImportLeadFromUploadedList", New Object() {ListId, From_CreateDate, To_CreateDate, IncludeOptyFiltration, IncludeEStoreOrderFiltration, TrackAllStage, ErrMsg}, Me.ImportLeadFromUploadedListOperationCompleted, userState)
        End Sub
        
        Private Sub OnImportLeadFromUploadedListOperationCompleted(ByVal arg As Object)
            If (Not (Me.ImportLeadFromUploadedListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ImportLeadFromUploadedListCompleted(Me, New ImportLeadFromUploadedListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/CreateContact", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateContact( _
                    ByVal Email As String,  _
                    ByVal AccountId As String,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal JobTitle As String,  _
                    ByVal JobFunction As String,  _
                    ByVal ContactDept As String,  _
                    ByVal WorkPhone As String,  _
                    ByVal WorkFax As String,  _
                    ByVal OwnerEmail As String,  _
                    ByVal RBU As String,  _
                    ByVal SrcName As String,  _
                    ByVal WebUserType As String,  _
                    ByVal Comments As String,  _
                    ByVal BAA() As String,  _
                    ByVal IntProd() As String,  _
                    ByRef strErrMsg As String,  _
                    ByVal User As String) As String
            Dim results() As Object = Me.Invoke("CreateContact", New Object() {Email, AccountId, FirstName, LastName, JobTitle, JobFunction, ContactDept, WorkPhone, WorkFax, OwnerEmail, RBU, SrcName, WebUserType, Comments, BAA, IntProd, strErrMsg, User})
            strErrMsg = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateContactAsync( _
                    ByVal Email As String,  _
                    ByVal AccountId As String,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal JobTitle As String,  _
                    ByVal JobFunction As String,  _
                    ByVal ContactDept As String,  _
                    ByVal WorkPhone As String,  _
                    ByVal WorkFax As String,  _
                    ByVal OwnerEmail As String,  _
                    ByVal RBU As String,  _
                    ByVal SrcName As String,  _
                    ByVal WebUserType As String,  _
                    ByVal Comments As String,  _
                    ByVal BAA() As String,  _
                    ByVal IntProd() As String,  _
                    ByVal strErrMsg As String,  _
                    ByVal User As String)
            Me.CreateContactAsync(Email, AccountId, FirstName, LastName, JobTitle, JobFunction, ContactDept, WorkPhone, WorkFax, OwnerEmail, RBU, SrcName, WebUserType, Comments, BAA, IntProd, strErrMsg, User, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateContactAsync( _
                    ByVal Email As String,  _
                    ByVal AccountId As String,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal JobTitle As String,  _
                    ByVal JobFunction As String,  _
                    ByVal ContactDept As String,  _
                    ByVal WorkPhone As String,  _
                    ByVal WorkFax As String,  _
                    ByVal OwnerEmail As String,  _
                    ByVal RBU As String,  _
                    ByVal SrcName As String,  _
                    ByVal WebUserType As String,  _
                    ByVal Comments As String,  _
                    ByVal BAA() As String,  _
                    ByVal IntProd() As String,  _
                    ByVal strErrMsg As String,  _
                    ByVal User As String,  _
                    ByVal userState As Object)
            If (Me.CreateContactOperationCompleted Is Nothing) Then
                Me.CreateContactOperationCompleted = AddressOf Me.OnCreateContactOperationCompleted
            End If
            Me.InvokeAsync("CreateContact", New Object() {Email, AccountId, FirstName, LastName, JobTitle, JobFunction, ContactDept, WorkPhone, WorkFax, OwnerEmail, RBU, SrcName, WebUserType, Comments, BAA, IntProd, strErrMsg, User}, Me.CreateContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateContactCompleted(Me, New CreateContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/CreateContact_New", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateContact_New( _
                    ByVal Email As String,  _
                    ByVal AccountId As String,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal JobFunction As String,  _
                    ByVal ContactDept As String,  _
                    ByVal JobTitle As String,  _
                    ByVal WorkPhone As String,  _
                    ByVal WorkFax As String,  _
                    ByVal PrimaryOwnerEmail As String,  _
                    ByVal SecondaryOwnerEmails() As String,  _
                    ByVal PrimaryOrg As String,  _
                    ByVal SecondaryOrgs() As String,  _
                    ByVal SrcName As String,  _
                    ByVal WebUserType As String,  _
                    ByVal Comments As String,  _
                    ByVal BAA() As String,  _
                    ByVal IntProd() As String,  _
                    ByVal PositionName As String,  _
                    ByVal IntENews() As String,  _
                    ByVal Salutation As String,  _
                    ByRef strErrMsg As String,  _
                    ByVal IsNeverEmail As Boolean,  _
                    ByVal Cellular As String,  _
                    ByVal IsNeverMail As Boolean,  _
                    ByVal IsNeverCall As Boolean,  _
                    ByVal IsActive As Boolean,  _
                    ByVal UploadFrom As String) As String
            Dim results() As Object = Me.Invoke("CreateContact_New", New Object() {Email, AccountId, FirstName, LastName, JobFunction, ContactDept, JobTitle, WorkPhone, WorkFax, PrimaryOwnerEmail, SecondaryOwnerEmails, PrimaryOrg, SecondaryOrgs, SrcName, WebUserType, Comments, BAA, IntProd, PositionName, IntENews, Salutation, strErrMsg, IsNeverEmail, Cellular, IsNeverMail, IsNeverCall, IsActive, UploadFrom})
            strErrMsg = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateContact_NewAsync( _
                    ByVal Email As String,  _
                    ByVal AccountId As String,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal JobFunction As String,  _
                    ByVal ContactDept As String,  _
                    ByVal JobTitle As String,  _
                    ByVal WorkPhone As String,  _
                    ByVal WorkFax As String,  _
                    ByVal PrimaryOwnerEmail As String,  _
                    ByVal SecondaryOwnerEmails() As String,  _
                    ByVal PrimaryOrg As String,  _
                    ByVal SecondaryOrgs() As String,  _
                    ByVal SrcName As String,  _
                    ByVal WebUserType As String,  _
                    ByVal Comments As String,  _
                    ByVal BAA() As String,  _
                    ByVal IntProd() As String,  _
                    ByVal PositionName As String,  _
                    ByVal IntENews() As String,  _
                    ByVal Salutation As String,  _
                    ByVal strErrMsg As String,  _
                    ByVal IsNeverEmail As Boolean,  _
                    ByVal Cellular As String,  _
                    ByVal IsNeverMail As Boolean,  _
                    ByVal IsNeverCall As Boolean,  _
                    ByVal IsActive As Boolean,  _
                    ByVal UploadFrom As String)
            Me.CreateContact_NewAsync(Email, AccountId, FirstName, LastName, JobFunction, ContactDept, JobTitle, WorkPhone, WorkFax, PrimaryOwnerEmail, SecondaryOwnerEmails, PrimaryOrg, SecondaryOrgs, SrcName, WebUserType, Comments, BAA, IntProd, PositionName, IntENews, Salutation, strErrMsg, IsNeverEmail, Cellular, IsNeverMail, IsNeverCall, IsActive, UploadFrom, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateContact_NewAsync( _
                    ByVal Email As String,  _
                    ByVal AccountId As String,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal JobFunction As String,  _
                    ByVal ContactDept As String,  _
                    ByVal JobTitle As String,  _
                    ByVal WorkPhone As String,  _
                    ByVal WorkFax As String,  _
                    ByVal PrimaryOwnerEmail As String,  _
                    ByVal SecondaryOwnerEmails() As String,  _
                    ByVal PrimaryOrg As String,  _
                    ByVal SecondaryOrgs() As String,  _
                    ByVal SrcName As String,  _
                    ByVal WebUserType As String,  _
                    ByVal Comments As String,  _
                    ByVal BAA() As String,  _
                    ByVal IntProd() As String,  _
                    ByVal PositionName As String,  _
                    ByVal IntENews() As String,  _
                    ByVal Salutation As String,  _
                    ByVal strErrMsg As String,  _
                    ByVal IsNeverEmail As Boolean,  _
                    ByVal Cellular As String,  _
                    ByVal IsNeverMail As Boolean,  _
                    ByVal IsNeverCall As Boolean,  _
                    ByVal IsActive As Boolean,  _
                    ByVal UploadFrom As String,  _
                    ByVal userState As Object)
            If (Me.CreateContact_NewOperationCompleted Is Nothing) Then
                Me.CreateContact_NewOperationCompleted = AddressOf Me.OnCreateContact_NewOperationCompleted
            End If
            Me.InvokeAsync("CreateContact_New", New Object() {Email, AccountId, FirstName, LastName, JobFunction, ContactDept, JobTitle, WorkPhone, WorkFax, PrimaryOwnerEmail, SecondaryOwnerEmails, PrimaryOrg, SecondaryOrgs, SrcName, WebUserType, Comments, BAA, IntProd, PositionName, IntENews, Salutation, strErrMsg, IsNeverEmail, Cellular, IsNeverMail, IsNeverCall, IsActive, UploadFrom}, Me.CreateContact_NewOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateContact_NewOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateContact_NewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateContact_NewCompleted(Me, New CreateContact_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/CreateActivity", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateActivity(ByVal ActType As String, ByVal ActDesc As String, ByVal ActComment As String, ByVal AccountId As String, ByVal ContactId As String, ByVal SourceId As String, ByVal RBU As String, ByVal OwnerEmail As String, ByVal ActStatus As ActivityStatus, ByRef strErrMsg As String) As String
            Dim results() As Object = Me.Invoke("CreateActivity", New Object() {ActType, ActDesc, ActComment, AccountId, ContactId, SourceId, RBU, OwnerEmail, ActStatus, strErrMsg})
            strErrMsg = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateActivityAsync(ByVal ActType As String, ByVal ActDesc As String, ByVal ActComment As String, ByVal AccountId As String, ByVal ContactId As String, ByVal SourceId As String, ByVal RBU As String, ByVal OwnerEmail As String, ByVal ActStatus As ActivityStatus, ByVal strErrMsg As String)
            Me.CreateActivityAsync(ActType, ActDesc, ActComment, AccountId, ContactId, SourceId, RBU, OwnerEmail, ActStatus, strErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateActivityAsync(ByVal ActType As String, ByVal ActDesc As String, ByVal ActComment As String, ByVal AccountId As String, ByVal ContactId As String, ByVal SourceId As String, ByVal RBU As String, ByVal OwnerEmail As String, ByVal ActStatus As ActivityStatus, ByVal strErrMsg As String, ByVal userState As Object)
            If (Me.CreateActivityOperationCompleted Is Nothing) Then
                Me.CreateActivityOperationCompleted = AddressOf Me.OnCreateActivityOperationCompleted
            End If
            Me.InvokeAsync("CreateActivity", New Object() {ActType, ActDesc, ActComment, AccountId, ContactId, SourceId, RBU, OwnerEmail, ActStatus, strErrMsg}, Me.CreateActivityOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateActivityOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateActivityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateActivityCompleted(Me, New CreateActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/CreateActivity_New", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateActivity_New(ByVal ActType As String, ByVal ActDesc As String, ByVal ActComment As String, ByVal AccountId As String, ByVal ContactId As String, ByVal SourceId As String, ByVal RBU As String, ByVal OwnerEmail As String, ByVal ActStatus As ActivityStatus, ByVal ActSourceFrom As String, ByRef strErrMsg As String) As String
            Dim results() As Object = Me.Invoke("CreateActivity_New", New Object() {ActType, ActDesc, ActComment, AccountId, ContactId, SourceId, RBU, OwnerEmail, ActStatus, ActSourceFrom, strErrMsg})
            strErrMsg = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateActivity_NewAsync(ByVal ActType As String, ByVal ActDesc As String, ByVal ActComment As String, ByVal AccountId As String, ByVal ContactId As String, ByVal SourceId As String, ByVal RBU As String, ByVal OwnerEmail As String, ByVal ActStatus As ActivityStatus, ByVal ActSourceFrom As String, ByVal strErrMsg As String)
            Me.CreateActivity_NewAsync(ActType, ActDesc, ActComment, AccountId, ContactId, SourceId, RBU, OwnerEmail, ActStatus, ActSourceFrom, strErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateActivity_NewAsync(ByVal ActType As String, ByVal ActDesc As String, ByVal ActComment As String, ByVal AccountId As String, ByVal ContactId As String, ByVal SourceId As String, ByVal RBU As String, ByVal OwnerEmail As String, ByVal ActStatus As ActivityStatus, ByVal ActSourceFrom As String, ByVal strErrMsg As String, ByVal userState As Object)
            If (Me.CreateActivity_NewOperationCompleted Is Nothing) Then
                Me.CreateActivity_NewOperationCompleted = AddressOf Me.OnCreateActivity_NewOperationCompleted
            End If
            Me.InvokeAsync("CreateActivity_New", New Object() {ActType, ActDesc, ActComment, AccountId, ContactId, SourceId, RBU, OwnerEmail, ActStatus, ActSourceFrom, strErrMsg}, Me.CreateActivity_NewOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateActivity_NewOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateActivity_NewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateActivity_NewCompleted(Me, New CreateActivity_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/GetAdminEmailByCountry", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAdminEmailByCountry(ByVal Country As String) As String
            Dim results() As Object = Me.Invoke("GetAdminEmailByCountry", New Object() {Country})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAdminEmailByCountryAsync(ByVal Country As String)
            Me.GetAdminEmailByCountryAsync(Country, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAdminEmailByCountryAsync(ByVal Country As String, ByVal userState As Object)
            If (Me.GetAdminEmailByCountryOperationCompleted Is Nothing) Then
                Me.GetAdminEmailByCountryOperationCompleted = AddressOf Me.OnGetAdminEmailByCountryOperationCompleted
            End If
            Me.InvokeAsync("GetAdminEmailByCountry", New Object() {Country}, Me.GetAdminEmailByCountryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAdminEmailByCountryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAdminEmailByCountryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAdminEmailByCountryCompleted(Me, New GetAdminEmailByCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/GetSiebelActivity", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSiebelActivity(ByVal RowId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSiebelActivity", New Object() {RowId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSiebelActivityAsync(ByVal RowId As String)
            Me.GetSiebelActivityAsync(RowId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSiebelActivityAsync(ByVal RowId As String, ByVal userState As Object)
            If (Me.GetSiebelActivityOperationCompleted Is Nothing) Then
                Me.GetSiebelActivityOperationCompleted = AddressOf Me.OnGetSiebelActivityOperationCompleted
            End If
            Me.InvokeAsync("GetSiebelActivity", New Object() {RowId}, Me.GetSiebelActivityOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSiebelActivityOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSiebelActivityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSiebelActivityCompleted(Me, New GetSiebelActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/UpdateContact", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateContact(ByVal RowId As String, ByVal Email As String, ByVal AccountId As String, ByVal FirstName As String, ByVal LastName As String, ByVal JobTitle As String, ByVal WorkPhone As String, ByVal WorkFax As String, ByVal OwnerEmail As String, ByVal RBU As String, ByVal BAA() As String, ByVal IntProd() As String, ByRef ErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateContact", New Object() {RowId, Email, AccountId, FirstName, LastName, JobTitle, WorkPhone, WorkFax, OwnerEmail, RBU, BAA, IntProd, ErrMsg})
            ErrMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateContactAsync(ByVal RowId As String, ByVal Email As String, ByVal AccountId As String, ByVal FirstName As String, ByVal LastName As String, ByVal JobTitle As String, ByVal WorkPhone As String, ByVal WorkFax As String, ByVal OwnerEmail As String, ByVal RBU As String, ByVal BAA() As String, ByVal IntProd() As String, ByVal ErrMsg As String)
            Me.UpdateContactAsync(RowId, Email, AccountId, FirstName, LastName, JobTitle, WorkPhone, WorkFax, OwnerEmail, RBU, BAA, IntProd, ErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateContactAsync(ByVal RowId As String, ByVal Email As String, ByVal AccountId As String, ByVal FirstName As String, ByVal LastName As String, ByVal JobTitle As String, ByVal WorkPhone As String, ByVal WorkFax As String, ByVal OwnerEmail As String, ByVal RBU As String, ByVal BAA() As String, ByVal IntProd() As String, ByVal ErrMsg As String, ByVal userState As Object)
            If (Me.UpdateContactOperationCompleted Is Nothing) Then
                Me.UpdateContactOperationCompleted = AddressOf Me.OnUpdateContactOperationCompleted
            End If
            Me.InvokeAsync("UpdateContact", New Object() {RowId, Email, AccountId, FirstName, LastName, JobTitle, WorkPhone, WorkFax, OwnerEmail, RBU, BAA, IntProd, ErrMsg}, Me.UpdateContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateContactCompleted(Me, New UpdateContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/UpdateContactNeverEmail", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateContactNeverEmail(ByVal Email As String, ByVal IsNeverEmail As Boolean, ByRef ErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateContactNeverEmail", New Object() {Email, IsNeverEmail, ErrMsg})
            ErrMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateContactNeverEmailAsync(ByVal Email As String, ByVal IsNeverEmail As Boolean, ByVal ErrMsg As String)
            Me.UpdateContactNeverEmailAsync(Email, IsNeverEmail, ErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateContactNeverEmailAsync(ByVal Email As String, ByVal IsNeverEmail As Boolean, ByVal ErrMsg As String, ByVal userState As Object)
            If (Me.UpdateContactNeverEmailOperationCompleted Is Nothing) Then
                Me.UpdateContactNeverEmailOperationCompleted = AddressOf Me.OnUpdateContactNeverEmailOperationCompleted
            End If
            Me.InvokeAsync("UpdateContactNeverEmail", New Object() {Email, IsNeverEmail, ErrMsg}, Me.UpdateContactNeverEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateContactNeverEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateContactNeverEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateContactNeverEmailCompleted(Me, New UpdateContactNeverEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/InferAccountNameByEmail", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InferAccountNameByEmail(ByVal strEmail As String, ByRef strAccountName As String, ByRef strAccountCorpURL As String) As Boolean
            Dim results() As Object = Me.Invoke("InferAccountNameByEmail", New Object() {strEmail, strAccountName, strAccountCorpURL})
            strAccountName = CType(results(1),String)
            strAccountCorpURL = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InferAccountNameByEmailAsync(ByVal strEmail As String, ByVal strAccountName As String, ByVal strAccountCorpURL As String)
            Me.InferAccountNameByEmailAsync(strEmail, strAccountName, strAccountCorpURL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InferAccountNameByEmailAsync(ByVal strEmail As String, ByVal strAccountName As String, ByVal strAccountCorpURL As String, ByVal userState As Object)
            If (Me.InferAccountNameByEmailOperationCompleted Is Nothing) Then
                Me.InferAccountNameByEmailOperationCompleted = AddressOf Me.OnInferAccountNameByEmailOperationCompleted
            End If
            Me.InvokeAsync("InferAccountNameByEmail", New Object() {strEmail, strAccountName, strAccountCorpURL}, Me.InferAccountNameByEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnInferAccountNameByEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.InferAccountNameByEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InferAccountNameByEmailCompleted(Me, New InferAccountNameByEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/ExecuteACLECAMPJob", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ExecuteACLECAMPJob(ByVal JobName As String)
            Me.Invoke("ExecuteACLECAMPJob", New Object() {JobName})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteACLECAMPJobAsync(ByVal JobName As String)
            Me.ExecuteACLECAMPJobAsync(JobName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteACLECAMPJobAsync(ByVal JobName As String, ByVal userState As Object)
            If (Me.ExecuteACLECAMPJobOperationCompleted Is Nothing) Then
                Me.ExecuteACLECAMPJobOperationCompleted = AddressOf Me.OnExecuteACLECAMPJobOperationCompleted
            End If
            Me.InvokeAsync("ExecuteACLECAMPJob", New Object() {JobName}, Me.ExecuteACLECAMPJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteACLECAMPJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteACLECAMPJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteACLECAMPJobCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/CreateUNICAOffer_TestServer", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateUNICAOffer_TestServer(ByVal OfferId As String, ByVal OfferName As String, ByVal OfferDesc As String) As Boolean
            Dim results() As Object = Me.Invoke("CreateUNICAOffer_TestServer", New Object() {OfferId, OfferName, OfferDesc})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateUNICAOffer_TestServerAsync(ByVal OfferId As String, ByVal OfferName As String, ByVal OfferDesc As String)
            Me.CreateUNICAOffer_TestServerAsync(OfferId, OfferName, OfferDesc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateUNICAOffer_TestServerAsync(ByVal OfferId As String, ByVal OfferName As String, ByVal OfferDesc As String, ByVal userState As Object)
            If (Me.CreateUNICAOffer_TestServerOperationCompleted Is Nothing) Then
                Me.CreateUNICAOffer_TestServerOperationCompleted = AddressOf Me.OnCreateUNICAOffer_TestServerOperationCompleted
            End If
            Me.InvokeAsync("CreateUNICAOffer_TestServer", New Object() {OfferId, OfferName, OfferDesc}, Me.CreateUNICAOffer_TestServerOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateUNICAOffer_TestServerOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateUNICAOffer_TestServerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateUNICAOffer_TestServerCompleted(Me, New CreateUNICAOffer_TestServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/SyncSimpleFormInterestedProductContactToSiebel", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SyncSimpleFormInterestedProductContactToSiebel() As Boolean
            Dim results() As Object = Me.Invoke("SyncSimpleFormInterestedProductContactToSiebel", New Object(-1) {})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SyncSimpleFormInterestedProductContactToSiebelAsync()
            Me.SyncSimpleFormInterestedProductContactToSiebelAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SyncSimpleFormInterestedProductContactToSiebelAsync(ByVal userState As Object)
            If (Me.SyncSimpleFormInterestedProductContactToSiebelOperationCompleted Is Nothing) Then
                Me.SyncSimpleFormInterestedProductContactToSiebelOperationCompleted = AddressOf Me.OnSyncSimpleFormInterestedProductContactToSiebelOperationCompleted
            End If
            Me.InvokeAsync("SyncSimpleFormInterestedProductContactToSiebel", New Object(-1) {}, Me.SyncSimpleFormInterestedProductContactToSiebelOperationCompleted, userState)
        End Sub
        
        Private Sub OnSyncSimpleFormInterestedProductContactToSiebelOperationCompleted(ByVal arg As Object)
            If (Not (Me.SyncSimpleFormInterestedProductContactToSiebelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SyncSimpleFormInterestedProductContactToSiebelCompleted(Me, New SyncSimpleFormInterestedProductContactToSiebelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/IsValidSiebelOwner", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsValidSiebelOwner(ByVal OwnerEmail As String, ByRef PositionName As String) As Boolean
            Dim results() As Object = Me.Invoke("IsValidSiebelOwner", New Object() {OwnerEmail, PositionName})
            PositionName = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsValidSiebelOwnerAsync(ByVal OwnerEmail As String, ByVal PositionName As String)
            Me.IsValidSiebelOwnerAsync(OwnerEmail, PositionName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsValidSiebelOwnerAsync(ByVal OwnerEmail As String, ByVal PositionName As String, ByVal userState As Object)
            If (Me.IsValidSiebelOwnerOperationCompleted Is Nothing) Then
                Me.IsValidSiebelOwnerOperationCompleted = AddressOf Me.OnIsValidSiebelOwnerOperationCompleted
            End If
            Me.InvokeAsync("IsValidSiebelOwner", New Object() {OwnerEmail, PositionName}, Me.IsValidSiebelOwnerOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsValidSiebelOwnerOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsValidSiebelOwnerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsValidSiebelOwnerCompleted(Me, New IsValidSiebelOwnerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/CheckPositionName", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckPositionName(ByVal PositionName As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckPositionName", New Object() {PositionName})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckPositionNameAsync(ByVal PositionName As String)
            Me.CheckPositionNameAsync(PositionName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckPositionNameAsync(ByVal PositionName As String, ByVal userState As Object)
            If (Me.CheckPositionNameOperationCompleted Is Nothing) Then
                Me.CheckPositionNameOperationCompleted = AddressOf Me.OnCheckPositionNameOperationCompleted
            End If
            Me.InvokeAsync("CheckPositionName", New Object() {PositionName}, Me.CheckPositionNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckPositionNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckPositionNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckPositionNameCompleted(Me, New CheckPositionNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/GetBoughtUSBContactList", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBoughtUSBContactList() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetBoughtUSBContactList", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBoughtUSBContactListAsync()
            Me.GetBoughtUSBContactListAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBoughtUSBContactListAsync(ByVal userState As Object)
            If (Me.GetBoughtUSBContactListOperationCompleted Is Nothing) Then
                Me.GetBoughtUSBContactListOperationCompleted = AddressOf Me.OnGetBoughtUSBContactListOperationCompleted
            End If
            Me.InvokeAsync("GetBoughtUSBContactList", New Object(-1) {}, Me.GetBoughtUSBContactListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBoughtUSBContactListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBoughtUSBContactListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBoughtUSBContactListCompleted(Me, New GetBoughtUSBContactListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/SendELetter", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendELetter(ByVal CampId As String, ByRef ErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("SendELetter", New Object() {CampId, ErrMsg})
            ErrMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendELetterAsync(ByVal CampId As String, ByVal ErrMsg As String)
            Me.SendELetterAsync(CampId, ErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendELetterAsync(ByVal CampId As String, ByVal ErrMsg As String, ByVal userState As Object)
            If (Me.SendELetterOperationCompleted Is Nothing) Then
                Me.SendELetterOperationCompleted = AddressOf Me.OnSendELetterOperationCompleted
            End If
            Me.InvokeAsync("SendELetter", New Object() {CampId, ErrMsg}, Me.SendELetterOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendELetterOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendELetterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendELetterCompleted(Me, New SendELetterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/CheckMeta", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckMeta(ByRef dt As System.Data.DataTable) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("CheckMeta", New Object() {dt})
            dt = CType(results(1),System.Data.DataTable)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckMetaAsync(ByVal dt As System.Data.DataTable)
            Me.CheckMetaAsync(dt, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckMetaAsync(ByVal dt As System.Data.DataTable, ByVal userState As Object)
            If (Me.CheckMetaOperationCompleted Is Nothing) Then
                Me.CheckMetaOperationCompleted = AddressOf Me.OnCheckMetaOperationCompleted
            End If
            Me.InvokeAsync("CheckMeta", New Object() {dt}, Me.CheckMetaOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckMetaOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckMetaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckMetaCompleted(Me, New CheckMetaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/CheckJobTitle", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckJobTitle(ByVal dt As System.Data.DataTable) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("CheckJobTitle", New Object() {dt})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckJobTitleAsync(ByVal dt As System.Data.DataTable)
            Me.CheckJobTitleAsync(dt, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckJobTitleAsync(ByVal dt As System.Data.DataTable, ByVal userState As Object)
            If (Me.CheckJobTitleOperationCompleted Is Nothing) Then
                Me.CheckJobTitleOperationCompleted = AddressOf Me.OnCheckJobTitleOperationCompleted
            End If
            Me.InvokeAsync("CheckJobTitle", New Object() {dt}, Me.CheckJobTitleOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckJobTitleOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckJobTitleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckJobTitleCompleted(Me, New CheckJobTitleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/CreateAndExecuteListJob", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CreateAndExecuteListJob(ByVal ListID As String)
            Me.Invoke("CreateAndExecuteListJob", New Object() {ListID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateAndExecuteListJobAsync(ByVal ListID As String)
            Me.CreateAndExecuteListJobAsync(ListID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateAndExecuteListJobAsync(ByVal ListID As String, ByVal userState As Object)
            If (Me.CreateAndExecuteListJobOperationCompleted Is Nothing) Then
                Me.CreateAndExecuteListJobOperationCompleted = AddressOf Me.OnCreateAndExecuteListJobOperationCompleted
            End If
            Me.InvokeAsync("CreateAndExecuteListJob", New Object() {ListID}, Me.CreateAndExecuteListJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateAndExecuteListJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateAndExecuteListJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateAndExecuteListJobCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/ImportLiveChatByDataset", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ImportLiveChatByDataset(ByVal ds As System.Data.DataSet, ByVal FileName As String, ByRef ErrorMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("ImportLiveChatByDataset", New Object() {ds, FileName, ErrorMsg})
            ErrorMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ImportLiveChatByDatasetAsync(ByVal ds As System.Data.DataSet, ByVal FileName As String, ByVal ErrorMsg As String)
            Me.ImportLiveChatByDatasetAsync(ds, FileName, ErrorMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ImportLiveChatByDatasetAsync(ByVal ds As System.Data.DataSet, ByVal FileName As String, ByVal ErrorMsg As String, ByVal userState As Object)
            If (Me.ImportLiveChatByDatasetOperationCompleted Is Nothing) Then
                Me.ImportLiveChatByDatasetOperationCompleted = AddressOf Me.OnImportLiveChatByDatasetOperationCompleted
            End If
            Me.InvokeAsync("ImportLiveChatByDataset", New Object() {ds, FileName, ErrorMsg}, Me.ImportLiveChatByDatasetOperationCompleted, userState)
        End Sub
        
        Private Sub OnImportLiveChatByDatasetOperationCompleted(ByVal arg As Object)
            If (Not (Me.ImportLiveChatByDatasetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ImportLiveChatByDatasetCompleted(Me, New ImportLiveChatByDatasetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/ImportLiveChatByExcel", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ImportLiveChatByExcel(ByRef ErrorMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("ImportLiveChatByExcel", New Object() {ErrorMsg})
            ErrorMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ImportLiveChatByExcelAsync(ByVal ErrorMsg As String)
            Me.ImportLiveChatByExcelAsync(ErrorMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ImportLiveChatByExcelAsync(ByVal ErrorMsg As String, ByVal userState As Object)
            If (Me.ImportLiveChatByExcelOperationCompleted Is Nothing) Then
                Me.ImportLiveChatByExcelOperationCompleted = AddressOf Me.OnImportLiveChatByExcelOperationCompleted
            End If
            Me.InvokeAsync("ImportLiveChatByExcel", New Object() {ErrorMsg}, Me.ImportLiveChatByExcelOperationCompleted, userState)
        End Sub
        
        Private Sub OnImportLiveChatByExcelOperationCompleted(ByVal arg As Object)
            If (Not (Me.ImportLiveChatByExcelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ImportLiveChatByExcelCompleted(Me, New ImportLiveChatByExcelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("AdvProspectDb/ImportLiveChat", RequestNamespace:="AdvProspectDb", ResponseNamespace:="AdvProspectDb", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ImportLiveChat(ByVal ChatList() As LiveChatContact, ByVal ChatURLs() As LiveChatURL, ByRef ErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("ImportLiveChat", New Object() {ChatList, ChatURLs, ErrMsg})
            ErrMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ImportLiveChatAsync(ByVal ChatList() As LiveChatContact, ByVal ChatURLs() As LiveChatURL, ByVal ErrMsg As String)
            Me.ImportLiveChatAsync(ChatList, ChatURLs, ErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ImportLiveChatAsync(ByVal ChatList() As LiveChatContact, ByVal ChatURLs() As LiveChatURL, ByVal ErrMsg As String, ByVal userState As Object)
            If (Me.ImportLiveChatOperationCompleted Is Nothing) Then
                Me.ImportLiveChatOperationCompleted = AddressOf Me.OnImportLiveChatOperationCompleted
            End If
            Me.InvokeAsync("ImportLiveChat", New Object() {ChatList, ChatURLs, ErrMsg}, Me.ImportLiveChatOperationCompleted, userState)
        End Sub
        
        Private Sub OnImportLiveChatOperationCompleted(ByVal arg As Object)
            If (Not (Me.ImportLiveChatCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ImportLiveChatCompleted(Me, New ImportLiveChatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="AdvProspectDb")>  _
    Partial Public Class ObjImportedActivity
        
        Private emailField As String
        
        Private uRLField As String
        
        Private descriptionField As String
        
        Private accountNameField As String
        
        Private countryField As String
        
        Private telField As String
        
        Private firstNameField As String
        
        Private lastNameField As String
        
        Private webUserTypeField As WebUserTypeEnum
        
        Private activityTypeField As ActivityType
        
        Private commentsField As String
        
        Private siebelSourceIdField As String
        
        Private interestedProductField() As ProductLevelAndValue
        
        Private immediateCreateLeadField As Boolean
        
        Private strSiebelContactRowIdField As String
        
        Private stateField As String
        
        Private jobTitleField As String
        
        Private addressField As String
        
        Private zipCodeField As String
        
        Private cityField As String
        
        Private uploadFromField As LeadUploadSource
        
        Private eNewsLetterField As eNewsLetter
        
        Private routeIDField As String
        
        Private uploadViaFuncField As String
        
        Private actionDateField As Date
        
        '''<remarks/>
        Public Property Email() As String
            Get
                Return Me.emailField
            End Get
            Set
                Me.emailField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property URL() As String
            Get
                Return Me.uRLField
            End Get
            Set
                Me.uRLField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Description() As String
            Get
                Return Me.descriptionField
            End Get
            Set
                Me.descriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountName() As String
            Get
                Return Me.accountNameField
            End Get
            Set
                Me.accountNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Country() As String
            Get
                Return Me.countryField
            End Get
            Set
                Me.countryField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Tel() As String
            Get
                Return Me.telField
            End Get
            Set
                Me.telField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FirstName() As String
            Get
                Return Me.firstNameField
            End Get
            Set
                Me.firstNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LastName() As String
            Get
                Return Me.lastNameField
            End Get
            Set
                Me.lastNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property WebUserType() As WebUserTypeEnum
            Get
                Return Me.webUserTypeField
            End Get
            Set
                Me.webUserTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ActivityType() As ActivityType
            Get
                Return Me.activityTypeField
            End Get
            Set
                Me.activityTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Comments() As String
            Get
                Return Me.commentsField
            End Get
            Set
                Me.commentsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SiebelSourceId() As String
            Get
                Return Me.siebelSourceIdField
            End Get
            Set
                Me.siebelSourceIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property InterestedProduct() As ProductLevelAndValue()
            Get
                Return Me.interestedProductField
            End Get
            Set
                Me.interestedProductField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ImmediateCreateLead() As Boolean
            Get
                Return Me.immediateCreateLeadField
            End Get
            Set
                Me.immediateCreateLeadField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strSiebelContactRowId() As String
            Get
                Return Me.strSiebelContactRowIdField
            End Get
            Set
                Me.strSiebelContactRowIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property State() As String
            Get
                Return Me.stateField
            End Get
            Set
                Me.stateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property JobTitle() As String
            Get
                Return Me.jobTitleField
            End Get
            Set
                Me.jobTitleField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Address() As String
            Get
                Return Me.addressField
            End Get
            Set
                Me.addressField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ZipCode() As String
            Get
                Return Me.zipCodeField
            End Get
            Set
                Me.zipCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property City() As String
            Get
                Return Me.cityField
            End Get
            Set
                Me.cityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UploadFrom() As LeadUploadSource
            Get
                Return Me.uploadFromField
            End Get
            Set
                Me.uploadFromField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property eNewsLetter() As eNewsLetter
            Get
                Return Me.eNewsLetterField
            End Get
            Set
                Me.eNewsLetterField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RouteID() As String
            Get
                Return Me.routeIDField
            End Get
            Set
                Me.routeIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UploadViaFunc() As String
            Get
                Return Me.uploadViaFuncField
            End Get
            Set
                Me.uploadViaFuncField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ActionDate() As Date
            Get
                Return Me.actionDateField
            End Get
            Set
                Me.actionDateField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="AdvProspectDb")>  _
    Public Enum WebUserTypeEnum
        
        '''<remarks/>
        None
        
        '''<remarks/>
        Alibaba
        
        '''<remarks/>
        DirectIndustry
        
        '''<remarks/>
        DirectIndustry_ClickThrough
        
        '''<remarks/>
        DirectIndustry_SalesRequest
        
        '''<remarks/>
        GlobalSpec
        
        '''<remarks/>
        TracePart
        
        '''<remarks/>
        OtherExtSource
        
        '''<remarks/>
        ON24
        
        '''<remarks/>
        ASF
        
        '''<remarks/>
        ADF
        
        '''<remarks/>
        Support
        
        '''<remarks/>
        RMA
        
        '''<remarks/>
        SUSI_Access
        
        '''<remarks/>
        Web_Access
        
        '''<remarks/>
        Adam_Forum
        
        '''<remarks/>
        iPlanet_Forum
        
        '''<remarks/>
        Corporate_Website
        
        '''<remarks/>
        Sector_Portal
        
        '''<remarks/>
        eStore
        
        '''<remarks/>
        MyAdvantech
        
        '''<remarks/>
        eDM
        
        '''<remarks/>
        AOnlineSalesPortal
        
        '''<remarks/>
        Resource
        
        '''<remarks/>
        Siebel
        
        '''<remarks/>
        iPROS
        
        '''<remarks/>
        eGrabber
        
        '''<remarks/>
        Innocore
        
        '''<remarks/>
        Dlog
        
        '''<remarks/>
        iServicesBlog
        
        '''<remarks/>
        SolutionDay
        
        '''<remarks/>
        AGS
        
        '''<remarks/>
        ITMedia
        
        '''<remarks/>
        Gongye360
        
        '''<remarks/>
        AsianProducts
        
        '''<remarks/>
        LiveChat
        
        '''<remarks/>
        WESTWICK_FARROW
        
        '''<remarks/>
        Event_Tradeshow_Exhibition
        
        '''<remarks/>
        OnlineWebinar
        
        '''<remarks/>
        Netprospex
        
        '''<remarks/>
        Zoominfo
        
        '''<remarks/>
        IEN
        
        '''<remarks/>
        MedicalExpo
        
        '''<remarks/>
        Prognosysd
        
        '''<remarks/>
        ActOn
        
        '''<remarks/>
        SimpleForm
        
        '''<remarks/>
        DIGITIMES
        
        '''<remarks/>
        IntelSolutionDirectory
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="AdvProspectDb")>  _
    Public Enum ActivityType
        
        '''<remarks/>
        None
        
        '''<remarks/>
        Abandoned_Live_Chat
        
        '''<remarks/>
        Abort_Check_Out
        
        '''<remarks/>
        Add_To_Cart
        
        '''<remarks/>
        Browse_CMS
        
        '''<remarks/>
        Browse_ContactPage
        
        '''<remarks/>
        Browse_General_Info
        
        '''<remarks/>
        Browse_ProductPage
        
        '''<remarks/>
        Browse_ProductPage_From_Sales_Inquiries
        
        '''<remarks/>
        Build_System
        
        '''<remarks/>
        Buy_List
        
        '''<remarks/>
        Call_Inbound
        
        '''<remarks/>
        Click_Forward_To_Friends
        
        '''<remarks/>
        Click_Live_Chat
        
        '''<remarks/>
        Click_To_SNS
        
        '''<remarks/>
        Compare_Product
        
        '''<remarks/>
        Download_3DModel
        
        '''<remarks/>
        Download_MarketingFile
        
        '''<remarks/>
        Download_SR
        
        '''<remarks/>
        Download_TechFile
        
        '''<remarks/>
        eDM_Open
        
        '''<remarks/>
        eDM_Click
        
        '''<remarks/>
        eStore_Customize_Function
        
        '''<remarks/>
        Email_Inbound
        
        '''<remarks/>
        Exhibition_Participant
        
        '''<remarks/>
        Event_Attendants
        
        '''<remarks/>
        Event_Attendants_with_Sales_Inquiry
        
        '''<remarks/>
        Event_Registrants_without_Attendance
        
        '''<remarks/>
        Get_Quote
        
        '''<remarks/>
        Giveaway
        
        '''<remarks/>
        Hoovers_List
        
        '''<remarks/>
        Live_Chat
        
        '''<remarks/>
        Media_PR
        
        '''<remarks/>
        OnDemand_Webinar
        
        '''<remarks/>
        Purchase
        
        '''<remarks/>
        Register_Product
        
        '''<remarks/>
        Registration
        
        '''<remarks/>
        Registration_Without_Pwd
        
        '''<remarks/>
        Request_Qty_Discount
        
        '''<remarks/>
        Qualified_Sales_Leads_from_ActOn
        
        '''<remarks/>
        Qualified_Sales_Leads_from_Webinar
        
        '''<remarks/>
        Sales_Inquiry
        
        '''<remarks/>
        Search_Product
        
        '''<remarks/>
        Send_SR
        
        '''<remarks/>
        Share_To_SNS
        
        '''<remarks/>
        SimpleForm_eDM_eNews
        
        '''<remarks/>
        SolutionDay_Forum_Seminar
        
        '''<remarks/>
        Subscribe_ENews
        
        '''<remarks/>
        Training
        
        '''<remarks/>
        Update_User_Profile
        
        '''<remarks/>
        Uploaded_List
        
        '''<remarks/>
        OnlineForum_Watch_Video
        
        '''<remarks/>
        OnlineForum_Visit_Booth
        
        '''<remarks/>
        OnlineForum_Vew_Document
        
        '''<remarks/>
        OnlineForum_Stay_Over_30_Minutes
        
        '''<remarks/>
        OnlineForum_Stay_Over_90_Minutes
        
        '''<remarks/>
        InterestRate_Over_50
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="AdvProspectDb")>  _
    Partial Public Class ProductLevelAndValue
        
        Private productLevelField As ProductLevelEnum
        
        Private productValueField As String
        
        '''<remarks/>
        Public Property ProductLevel() As ProductLevelEnum
            Get
                Return Me.productLevelField
            End Get
            Set
                Me.productLevelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProductValue() As String
            Get
                Return Me.productValueField
            End Get
            Set
                Me.productValueField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="AdvProspectDb")>  _
    Public Enum ProductLevelEnum
        
        '''<remarks/>
        ProductGroup
        
        '''<remarks/>
        InterestedProduct
        
        '''<remarks/>
        SubCategory
        
        '''<remarks/>
        ModelNo
        
        '''<remarks/>
        PartNo
        
        '''<remarks/>
        SerialNo
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="AdvProspectDb")>  _
    Partial Public Class LiveChatURL
        
        Private seqNoField As String
        
        Private uRLField As String
        
        Private timestampField As Date
        
        Private realTimeSessionIDField As String
        
        '''<remarks/>
        Public Property SeqNo() As String
            Get
                Return Me.seqNoField
            End Get
            Set
                Me.seqNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property URL() As String
            Get
                Return Me.uRLField
            End Get
            Set
                Me.uRLField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Timestamp() As Date
            Get
                Return Me.timestampField
            End Get
            Set
                Me.timestampField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RealTimeSessionID() As String
            Get
                Return Me.realTimeSessionIDField
            End Get
            Set
                Me.realTimeSessionIDField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="AdvProspectDb")>  _
    Partial Public Class LiveChatContact
        
        Private realTimeSessionIDField As String
        
        Private startField As Date
        
        Private durationField As String
        
        Private operatorField As String
        
        Private skillField As String
        
        Private phoneNumberField As String
        
        Private emailField As String
        
        Private countryField As String
        
        Private identifierField As String
        
        Private orgField As String
        
        Private commentField As String
        
        '''<remarks/>
        Public Property RealTimeSessionID() As String
            Get
                Return Me.realTimeSessionIDField
            End Get
            Set
                Me.realTimeSessionIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Start() As Date
            Get
                Return Me.startField
            End Get
            Set
                Me.startField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Duration() As String
            Get
                Return Me.durationField
            End Get
            Set
                Me.durationField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property [Operator]() As String
            Get
                Return Me.operatorField
            End Get
            Set
                Me.operatorField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property skill() As String
            Get
                Return Me.skillField
            End Get
            Set
                Me.skillField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property phoneNumber() As String
            Get
                Return Me.phoneNumberField
            End Get
            Set
                Me.phoneNumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property email() As String
            Get
                Return Me.emailField
            End Get
            Set
                Me.emailField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Country() As String
            Get
                Return Me.countryField
            End Get
            Set
                Me.countryField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property identifier() As String
            Get
                Return Me.identifierField
            End Get
            Set
                Me.identifierField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Org() As String
            Get
                Return Me.orgField
            End Get
            Set
                Me.orgField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Comment() As String
            Get
                Return Me.commentField
            End Get
            Set
                Me.commentField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="AdvProspectDb")>  _
    Partial Public Class URL_Product
        
        Private uRLField As String
        
        Private modelNOField As String
        
        Private interestedProductField As String
        
        '''<remarks/>
        Public Property URL() As String
            Get
                Return Me.uRLField
            End Get
            Set
                Me.uRLField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ModelNO() As String
            Get
                Return Me.modelNOField
            End Get
            Set
                Me.modelNOField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property InterestedProduct() As String
            Get
                Return Me.interestedProductField
            End Get
            Set
                Me.interestedProductField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="AdvProspectDb")>  _
    Public Enum LeadUploadSource
        
        '''<remarks/>
        Daily
        
        '''<remarks/>
        External
        
        '''<remarks/>
        List
        
        '''<remarks/>
        Unica
        
        '''<remarks/>
        Manual
        
        '''<remarks/>
        ThankLetter
        
        '''<remarks/>
        MarketingLead
        
        '''<remarks/>
        LiveChat
        
        '''<remarks/>
        eDM_Rule
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="AdvProspectDb")>  _
    Public Enum eNewsLetter
        
        '''<remarks/>
        None
        
        '''<remarks/>
        IoTMart_eNews_Embedded
        
        '''<remarks/>
        IoTMart_eNews_Industry_4_0
        
        '''<remarks/>
        IoTMart_eNews_Intelligent_Environment
        
        '''<remarks/>
        IoTMart_eNews_Intelligent_Hospital
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="AdvProspectDb")>  _
    Public Enum LeadQuality
        
        '''<remarks/>
        Hot
        
        '''<remarks/>
        Warm
        
        '''<remarks/>
        Cool
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="AdvProspectDb")>  _
    Public Enum ActivityStatus
        
        '''<remarks/>
        Not_Started
        
        '''<remarks/>
        In_Progress
        
        '''<remarks/>
        Approved
        
        '''<remarks/>
        Cancelled
        
        '''<remarks/>
        Done
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub HelloKittyCompletedEventHandler(ByVal sender As Object, ByVal e As HelloKittyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HelloKittyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub GetContactOwnerByEmailAndUserBehaviorCompletedEventHandler(ByVal sender As Object, ByVal e As GetContactOwnerByEmailAndUserBehaviorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetContactOwnerByEmailAndUserBehaviorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub GetRBUbyCountryCompletedEventHandler(ByVal sender As Object, ByVal e As GetRBUbyCountryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRBUbyCountryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub GetLeadFlashRBUbyCountryCompletedEventHandler(ByVal sender As Object, ByVal e As GetLeadFlashRBUbyCountryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLeadFlashRBUbyCountryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub IsProcessedAlibabaEmailCompletedEventHandler(ByVal sender As Object, ByVal e As IsProcessedAlibabaEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsProcessedAlibabaEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ProcessTracepartEmailCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessTracepartEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessTracepartEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ProcessTracepartsExcelCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessTracepartsExcelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessTracepartsExcelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ProcessGlobalspecEmailCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessGlobalspecEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessGlobalspecEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ProcessGlobalspecExcelCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessGlobalspecExcelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessGlobalspecExcelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ProcessDirectIndustrySalesInquiryEmailCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessDirectIndustrySalesInquiryEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessDirectIndustrySalesInquiryEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ProcessMedicalExpoSalesInquiryEmailCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessMedicalExpoSalesInquiryEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessMedicalExpoSalesInquiryEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ProcessIENSalesInquiryEmailCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessIENSalesInquiryEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessIENSalesInquiryEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ProcessAlibabaEmailCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessAlibabaEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessAlibabaEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ProcessAsianProductsEmailCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessAsianProductsEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessAsianProductsEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub SendRegularEDMReportCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub FetchProductInfoFromURLCompletedEventHandler(ByVal sender As Object, ByVal e As FetchProductInfoFromURLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchProductInfoFromURLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As URL_Product()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),URL_Product())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub CreateResourceContactCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub GetAllModelStringCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllModelStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllModelStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub GetMatchedModelsFromTextCompletedEventHandler(ByVal sender As Object, ByVal e As GetMatchedModelsFromTextCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMatchedModelsFromTextCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub CalculateEngagementPointCompletedEventHandler(ByVal sender As Object, ByVal e As CalculateEngagementPointCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CalculateEngagementPointCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ImportCuratedActivityFromLetterCompletedEventHandler(ByVal sender As Object, ByVal e As ImportCuratedActivityFromLetterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ImportCuratedActivityFromLetterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ImportSalesLeadCompletedEventHandler(ByVal sender As Object, ByVal e As ImportSalesLeadCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ImportSalesLeadCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ImportLeadFromUnicaCompletedEventHandler(ByVal sender As Object, ByVal e As ImportLeadFromUnicaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ImportLeadFromUnicaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ImportLeadDailyCompletedEventHandler(ByVal sender As Object, ByVal e As ImportLeadDailyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ImportLeadDailyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ImportLeadFromMarketingLeadCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ImportLeadFromUploadedListCompletedEventHandler(ByVal sender As Object, ByVal e As ImportLeadFromUploadedListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ImportLeadFromUploadedListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub CreateContactCompletedEventHandler(ByVal sender As Object, ByVal e As CreateContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub CreateContact_NewCompletedEventHandler(ByVal sender As Object, ByVal e As CreateContact_NewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateContact_NewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub CreateActivityCompletedEventHandler(ByVal sender As Object, ByVal e As CreateActivityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateActivityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub CreateActivity_NewCompletedEventHandler(ByVal sender As Object, ByVal e As CreateActivity_NewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateActivity_NewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub GetAdminEmailByCountryCompletedEventHandler(ByVal sender As Object, ByVal e As GetAdminEmailByCountryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAdminEmailByCountryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub GetSiebelActivityCompletedEventHandler(ByVal sender As Object, ByVal e As GetSiebelActivityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSiebelActivityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub UpdateContactCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub UpdateContactNeverEmailCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateContactNeverEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateContactNeverEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub InferAccountNameByEmailCompletedEventHandler(ByVal sender As Object, ByVal e As InferAccountNameByEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InferAccountNameByEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strAccountName() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strAccountCorpURL() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ExecuteACLECAMPJobCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub CreateUNICAOffer_TestServerCompletedEventHandler(ByVal sender As Object, ByVal e As CreateUNICAOffer_TestServerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateUNICAOffer_TestServerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub SyncSimpleFormInterestedProductContactToSiebelCompletedEventHandler(ByVal sender As Object, ByVal e As SyncSimpleFormInterestedProductContactToSiebelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SyncSimpleFormInterestedProductContactToSiebelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub IsValidSiebelOwnerCompletedEventHandler(ByVal sender As Object, ByVal e As IsValidSiebelOwnerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsValidSiebelOwnerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property PositionName() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub CheckPositionNameCompletedEventHandler(ByVal sender As Object, ByVal e As CheckPositionNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckPositionNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub GetBoughtUSBContactListCompletedEventHandler(ByVal sender As Object, ByVal e As GetBoughtUSBContactListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBoughtUSBContactListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub SendELetterCompletedEventHandler(ByVal sender As Object, ByVal e As SendELetterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendELetterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub CheckMetaCompletedEventHandler(ByVal sender As Object, ByVal e As CheckMetaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckMetaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dt() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub CheckJobTitleCompletedEventHandler(ByVal sender As Object, ByVal e As CheckJobTitleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckJobTitleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub CreateAndExecuteListJobCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ImportLiveChatByDatasetCompletedEventHandler(ByVal sender As Object, ByVal e As ImportLiveChatByDatasetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ImportLiveChatByDatasetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrorMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ImportLiveChatByExcelCompletedEventHandler(ByVal sender As Object, ByVal e As ImportLiveChatByExcelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ImportLiveChatByExcelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrorMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ImportLiveChatCompletedEventHandler(ByVal sender As Object, ByVal e As ImportLiveChatCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ImportLiveChatCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
End Namespace
